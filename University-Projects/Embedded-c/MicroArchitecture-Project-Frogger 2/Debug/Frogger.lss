
Frogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000296e  00002a02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000296e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cb  00800112  00800112  00002a14  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002a14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00002ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003462  00000000  00000000  00002cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fdd  00000000  00000000  00006132  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ad2  00000000  00000000  0000710f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000540  00000000  00000000  00008be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009fa  00000000  00000000  00009124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d73  00000000  00000000  00009b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  0000b891  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 21 01 	jmp	0x242	; 0x242 <__ctors_end>
       4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
       8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
       c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      10:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      14:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      18:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      1c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      20:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      24:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      28:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      2c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      30:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      34:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      38:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      3c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      40:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      44:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      48:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      4c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      50:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      54:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      58:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      5c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      60:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      64:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      68:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      6c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      70:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      74:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      78:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      7c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      80:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      84:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      88:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      8c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      90:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      94:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      98:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      9c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      ac:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b4:	ad 03       	fmulsu	r18, r21
      b6:	b2 03       	fmuls	r19, r18
      b8:	b7 03       	fmuls	r19, r23
      ba:	bc 03       	fmulsu	r19, r20
      bc:	c1 03       	fmuls	r20, r17
      be:	c6 03       	fmuls	r20, r22
      c0:	cb 03       	fmulsu	r20, r19
      c2:	d0 03       	fmuls	r21, r16

000000c4 <__trampolines_end>:
      c4:	6e 61       	ori	r22, 0x1E	; 30
      c6:	6e 00       	.word	0x006e	; ????

000000c8 <__c.2332>:
      c8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      d8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      e8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      f8:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     108:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     118:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     128:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     138:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     148:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     158:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     168:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     178:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     188:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     198:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1a8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1b8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001c6 <__c.2962>:
     1c6:	59 6f 75 20 57 69 6e 21 00                          You Win!.

000001cf <__c.2959>:
     1cf:	47 61 6d 65 20 4f 76 65 72 21 00                    Game Over!.

000001da <__c.2955>:
     1da:	47 6f 21 00                                         Go!.

000001de <__c.2875>:
     1de:	56 69 63 74 6f 72 79 21 00                          Victory!.

000001e7 <__c.2861>:
     1e7:	53 50 4c 41 54 21 00                                SPLAT!.

000001ee <__c.2854>:
     1ee:	53 63 6f 72 65 3a 20 00                             Score: .

000001f6 <__c.2733>:
     1f6:	2e 2e 58 00                                         ..X.

000001fa <__c.2731>:
     1fa:	42 43 2e 00                                         BC..

000001fe <__c.2729>:
     1fe:	46 47 41 00                                         FGA.

00000202 <__c.2727>:
     202:	43 44 45 00                                         CDE.

00000206 <__c.2722>:
     206:	34 3a 20 43 20 4d 61 6a 6f 72 00                    4: C Major.

00000211 <__c.2720>:
     211:	33 3a 20 53 63 6f 72 65 64 20 46 72 6f 67 67 65     3: Scored Frogge
     221:	72 00                                               r.

00000223 <__c.2718>:
     223:	32 3a 20 50 6c 61 79 20 46 72 6f 67 67 65 72 00     2: Play Frogger.

00000233 <__c.2716>:
     233:	31 3a 20 50 6c 61 79 20 54 6f 6e 65 73 00 00        1: Play Tones..

00000242 <__ctors_end>:
     242:	11 24       	eor	r1, r1
     244:	1f be       	out	0x3f, r1	; 63
     246:	cf ef       	ldi	r28, 0xFF	; 255
     248:	d8 e0       	ldi	r29, 0x08	; 8
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	cd bf       	out	0x3d, r28	; 61

0000024e <__do_copy_data>:
     24e:	11 e0       	ldi	r17, 0x01	; 1
     250:	a0 e0       	ldi	r26, 0x00	; 0
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	ee e6       	ldi	r30, 0x6E	; 110
     256:	f9 e2       	ldi	r31, 0x29	; 41
     258:	02 c0       	rjmp	.+4      	; 0x25e <__do_copy_data+0x10>
     25a:	05 90       	lpm	r0, Z+
     25c:	0d 92       	st	X+, r0
     25e:	a2 31       	cpi	r26, 0x12	; 18
     260:	b1 07       	cpc	r27, r17
     262:	d9 f7       	brne	.-10     	; 0x25a <__do_copy_data+0xc>

00000264 <__do_clear_bss>:
     264:	21 e0       	ldi	r18, 0x01	; 1
     266:	a2 e1       	ldi	r26, 0x12	; 18
     268:	b1 e0       	ldi	r27, 0x01	; 1
     26a:	01 c0       	rjmp	.+2      	; 0x26e <.do_clear_bss_start>

0000026c <.do_clear_bss_loop>:
     26c:	1d 92       	st	X+, r1

0000026e <.do_clear_bss_start>:
     26e:	ad 3d       	cpi	r26, 0xDD	; 221
     270:	b2 07       	cpc	r27, r18
     272:	e1 f7       	brne	.-8      	; 0x26c <.do_clear_bss_loop>
     274:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <main>
     278:	0c 94 b5 14 	jmp	0x296a	; 0x296a <_exit>

0000027c <__bad_interrupt>:
     27c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000280 <atmel_start_init>:
     280:	0e 94 9b 0c 	call	0x1936	; 0x1936 <system_init>
     284:	08 95       	ret

00000286 <lcd_set_type_data>:
     286:	88 b1       	in	r24, 0x08	; 8
     288:	80 62       	ori	r24, 0x20	; 32
     28a:	88 b9       	out	0x08, r24	; 8
     28c:	08 95       	ret

0000028e <lcd_set_type_command>:
     28e:	88 b1       	in	r24, 0x08	; 8
     290:	8f 7d       	andi	r24, 0xDF	; 223
     292:	88 b9       	out	0x08, r24	; 8
     294:	08 95       	ret

00000296 <lcd_write_nibble>:
     296:	98 b1       	in	r25, 0x08	; 8
     298:	90 7f       	andi	r25, 0xF0	; 240
     29a:	98 b9       	out	0x08, r25	; 8
     29c:	98 b1       	in	r25, 0x08	; 8
     29e:	8f 70       	andi	r24, 0x0F	; 15
     2a0:	98 2b       	or	r25, r24
     2a2:	98 b9       	out	0x08, r25	; 8
     2a4:	88 b1       	in	r24, 0x08	; 8
     2a6:	80 61       	ori	r24, 0x10	; 16
     2a8:	88 b9       	out	0x08, r24	; 8
     2aa:	85 e0       	ldi	r24, 0x05	; 5
     2ac:	8a 95       	dec	r24
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <lcd_write_nibble+0x16>
     2b0:	00 00       	nop
     2b2:	88 b1       	in	r24, 0x08	; 8
     2b4:	8f 7e       	andi	r24, 0xEF	; 239
     2b6:	88 b9       	out	0x08, r24	; 8
     2b8:	85 e0       	ldi	r24, 0x05	; 5
     2ba:	8a 95       	dec	r24
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_write_nibble+0x24>
     2be:	00 00       	nop
     2c0:	08 95       	ret

000002c2 <lcd_write_byte>:
     2c2:	cf 93       	push	r28
     2c4:	c8 2f       	mov	r28, r24
     2c6:	82 95       	swap	r24
     2c8:	8f 70       	andi	r24, 0x0F	; 15
     2ca:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_write_nibble>
     2ce:	8c 2f       	mov	r24, r28
     2d0:	8f 70       	andi	r24, 0x0F	; 15
     2d2:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_write_nibble>
     2d6:	8f e3       	ldi	r24, 0x3F	; 63
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <lcd_write_byte+0x18>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <lcd_write_byte+0x1e>
     2e0:	00 00       	nop
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <lcd_clear_and_home>:
     2e6:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_set_type_command>
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_write_byte>
     2f0:	2f ef       	ldi	r18, 0xFF	; 255
     2f2:	80 e7       	ldi	r24, 0x70	; 112
     2f4:	92 e0       	ldi	r25, 0x02	; 2
     2f6:	21 50       	subi	r18, 0x01	; 1
     2f8:	80 40       	sbci	r24, 0x00	; 0
     2fa:	90 40       	sbci	r25, 0x00	; 0
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <lcd_clear_and_home+0x10>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <lcd_clear_and_home+0x1a>
     300:	00 00       	nop
     302:	82 e0       	ldi	r24, 0x02	; 2
     304:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_write_byte>
     308:	2f ef       	ldi	r18, 0xFF	; 255
     30a:	80 e7       	ldi	r24, 0x70	; 112
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	21 50       	subi	r18, 0x01	; 1
     310:	80 40       	sbci	r24, 0x00	; 0
     312:	90 40       	sbci	r25, 0x00	; 0
     314:	e1 f7       	brne	.-8      	; 0x30e <lcd_clear_and_home+0x28>
     316:	00 c0       	rjmp	.+0      	; 0x318 <lcd_clear_and_home+0x32>
     318:	00 00       	nop
     31a:	08 95       	ret

0000031c <lcd_home>:
     31c:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_set_type_command>
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_write_byte>
     326:	2f ef       	ldi	r18, 0xFF	; 255
     328:	80 e7       	ldi	r24, 0x70	; 112
     32a:	92 e0       	ldi	r25, 0x02	; 2
     32c:	21 50       	subi	r18, 0x01	; 1
     32e:	80 40       	sbci	r24, 0x00	; 0
     330:	90 40       	sbci	r25, 0x00	; 0
     332:	e1 f7       	brne	.-8      	; 0x32c <lcd_home+0x10>
     334:	00 c0       	rjmp	.+0      	; 0x336 <lcd_home+0x1a>
     336:	00 00       	nop
     338:	08 95       	ret

0000033a <lcd_write_data>:
     33a:	cf 93       	push	r28
     33c:	c8 2f       	mov	r28, r24
     33e:	0e 94 43 01 	call	0x286	; 0x286 <lcd_set_type_data>
     342:	8c 2f       	mov	r24, r28
     344:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_write_byte>
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <lcd_write_int16>:
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	8c 01       	movw	r16, r24
     35a:	99 23       	and	r25, r25
     35c:	34 f4       	brge	.+12     	; 0x36a <lcd_write_int16+0x1e>
     35e:	8d e2       	ldi	r24, 0x2D	; 45
     360:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
     364:	11 95       	neg	r17
     366:	01 95       	neg	r16
     368:	11 09       	sbc	r17, r1
     36a:	c0 e1       	ldi	r28, 0x10	; 16
     36c:	d7 e2       	ldi	r29, 0x27	; 39
     36e:	40 e0       	ldi	r20, 0x00	; 0
     370:	25 c0       	rjmp	.+74     	; 0x3bc <lcd_write_int16+0x70>
     372:	e0 2e       	mov	r14, r16
     374:	f1 2e       	mov	r15, r17
     376:	c8 01       	movw	r24, r16
     378:	be 01       	movw	r22, r28
     37a:	0e 94 09 12 	call	0x2412	; 0x2412 <__udivmodhi4>
     37e:	61 15       	cp	r22, r1
     380:	71 05       	cpc	r23, r1
     382:	29 f4       	brne	.+10     	; 0x38e <lcd_write_int16+0x42>
     384:	41 11       	cpse	r20, r1
     386:	03 c0       	rjmp	.+6      	; 0x38e <lcd_write_int16+0x42>
     388:	c1 30       	cpi	r28, 0x01	; 1
     38a:	d1 05       	cpc	r29, r1
     38c:	59 f4       	brne	.+22     	; 0x3a4 <lcd_write_int16+0x58>
     38e:	80 e3       	ldi	r24, 0x30	; 48
     390:	86 0f       	add	r24, r22
     392:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
     396:	8e 2d       	mov	r24, r14
     398:	9f 2d       	mov	r25, r15
     39a:	be 01       	movw	r22, r28
     39c:	0e 94 09 12 	call	0x2412	; 0x2412 <__udivmodhi4>
     3a0:	8c 01       	movw	r16, r24
     3a2:	41 e0       	ldi	r20, 0x01	; 1
     3a4:	9e 01       	movw	r18, r28
     3a6:	ad ec       	ldi	r26, 0xCD	; 205
     3a8:	bc ec       	ldi	r27, 0xCC	; 204
     3aa:	0e 94 56 12 	call	0x24ac	; 0x24ac <__umulhisi3>
     3ae:	ec 01       	movw	r28, r24
     3b0:	d6 95       	lsr	r29
     3b2:	c7 95       	ror	r28
     3b4:	d6 95       	lsr	r29
     3b6:	c7 95       	ror	r28
     3b8:	d6 95       	lsr	r29
     3ba:	c7 95       	ror	r28
     3bc:	20 97       	sbiw	r28, 0x00	; 0
     3be:	c9 f6       	brne	.-78     	; 0x372 <lcd_write_int16+0x26>
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	ff 90       	pop	r15
     3ca:	ef 90       	pop	r14
     3cc:	08 95       	ret

000003ce <lcd_write_string>:
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	ec 01       	movw	r28, r24
     3d4:	05 c0       	rjmp	.+10     	; 0x3e0 <lcd_write_string+0x12>
     3d6:	21 96       	adiw	r28, 0x01	; 1
     3d8:	fc 01       	movw	r30, r24
     3da:	84 91       	lpm	r24, Z
     3dc:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
     3e0:	ce 01       	movw	r24, r28
     3e2:	fe 01       	movw	r30, r28
     3e4:	24 91       	lpm	r18, Z
     3e6:	21 11       	cpse	r18, r1
     3e8:	f6 cf       	rjmp	.-20     	; 0x3d6 <lcd_write_string+0x8>
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <lcd_goto_position>:
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	d8 2f       	mov	r29, r24
     3f6:	c6 2f       	mov	r28, r22
     3f8:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_set_type_command>
     3fc:	d2 30       	cpi	r29, 0x02	; 2
     3fe:	31 f0       	breq	.+12     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     400:	d3 30       	cpi	r29, 0x03	; 3
     402:	31 f0       	breq	.+12     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     404:	d1 30       	cpi	r29, 0x01	; 1
     406:	31 f0       	breq	.+12     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	05 c0       	rjmp	.+10     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     40c:	84 e1       	ldi	r24, 0x14	; 20
     40e:	03 c0       	rjmp	.+6      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     410:	84 e5       	ldi	r24, 0x54	; 84
     412:	01 c0       	rjmp	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     414:	80 e4       	ldi	r24, 0x40	; 64
     416:	8c 0f       	add	r24, r28
     418:	80 68       	ori	r24, 0x80	; 128
     41a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_write_byte>
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <lcd_init>:
     424:	87 b1       	in	r24, 0x07	; 7
     426:	8f 63       	ori	r24, 0x3F	; 63
     428:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     42a:	2f ef       	ldi	r18, 0xFF	; 255
     42c:	81 ee       	ldi	r24, 0xE1	; 225
     42e:	94 e0       	ldi	r25, 0x04	; 4
     430:	21 50       	subi	r18, 0x01	; 1
     432:	80 40       	sbci	r24, 0x00	; 0
     434:	90 40       	sbci	r25, 0x00	; 0
     436:	e1 f7       	brne	.-8      	; 0x430 <lcd_init+0xc>
     438:	00 c0       	rjmp	.+0      	; 0x43a <lcd_init+0x16>
     43a:	00 00       	nop
     43c:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_set_type_command>
     440:	83 e0       	ldi	r24, 0x03	; 3
     442:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_write_nibble>
     446:	8f eb       	ldi	r24, 0xBF	; 191
     448:	9d e5       	ldi	r25, 0x5D	; 93
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <lcd_init+0x26>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <lcd_init+0x2c>
     450:	00 00       	nop
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_write_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     458:	87 ee       	ldi	r24, 0xE7	; 231
     45a:	93 e0       	ldi	r25, 0x03	; 3
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_init+0x38>
     460:	00 c0       	rjmp	.+0      	; 0x462 <lcd_init+0x3e>
     462:	00 00       	nop
     464:	83 e0       	ldi	r24, 0x03	; 3
     466:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_write_nibble>
     46a:	87 ee       	ldi	r24, 0xE7	; 231
     46c:	93 e0       	ldi	r25, 0x03	; 3
     46e:	01 97       	sbiw	r24, 0x01	; 1
     470:	f1 f7       	brne	.-4      	; 0x46e <lcd_init+0x4a>
     472:	00 c0       	rjmp	.+0      	; 0x474 <lcd_init+0x50>
     474:	00 00       	nop
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_write_nibble>
     47c:	88 e2       	ldi	r24, 0x28	; 40
     47e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_write_byte>
     482:	8c e0       	ldi	r24, 0x0C	; 12
     484:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_write_byte>
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     48e:	8f e1       	ldi	r24, 0x1F	; 31
     490:	9e e4       	ldi	r25, 0x4E	; 78
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	f1 f7       	brne	.-4      	; 0x492 <lcd_init+0x6e>
     496:	00 c0       	rjmp	.+0      	; 0x498 <lcd_init+0x74>
     498:	00 00       	nop
     49a:	8c e0       	ldi	r24, 0x0C	; 12
     49c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_write_byte>
     4a0:	86 e0       	ldi	r24, 0x06	; 6
     4a2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_write_byte>
     4a6:	84 e1       	ldi	r24, 0x14	; 20
     4a8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_write_byte>
     4ac:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_clear_and_home>
     4b0:	08 95       	ret

000004b2 <keypad_init>:
//**************************************************
void keypad_init() {
    // Subroutine to set ports to required input and output states and enable pull up resistors for inputs
    
    // Set the columns as output
    DDRD |= (1<<PD0) | (1<<PD2) | (1<<PD4);
     4b2:	8a b1       	in	r24, 0x0a	; 10
     4b4:	85 61       	ori	r24, 0x15	; 21
     4b6:	8a b9       	out	0x0a, r24	; 10
    
    // Set row pins to input mode  
    DDRD &= ~(1<<PD1) & ~(1<<PD3) & ~(1<<PD5) & ~(1<<PD6);
     4b8:	8a b1       	in	r24, 0x0a	; 10
     4ba:	85 79       	andi	r24, 0x95	; 149
     4bc:	8a b9       	out	0x0a, r24	; 10
    
    // Turn on the internal resistors for the input pins
    PORTD |= (1<<PD1) | (1<<PD3) | (1<<PD5) | (1<<PD6);
     4be:	8b b1       	in	r24, 0x0b	; 11
     4c0:	8a 66       	ori	r24, 0x6A	; 106
     4c2:	8b b9       	out	0x0b, r24	; 11
    
    // Initialise the column output pins low, so input low if contact made
    PORTD &= ~(1<<PD0) & ~(1<<PD2) & ~(1<<PD4);
     4c4:	8b b1       	in	r24, 0x0b	; 11
     4c6:	8a 7e       	andi	r24, 0xEA	; 234
     4c8:	8b b9       	out	0x0b, r24	; 11
     4ca:	08 95       	ret

000004cc <keypressed>:

uint8_t keypressed() {
    uint8_t rowval;
    uint8_t kp;
    
    PORTD &= ~(1<<PD0) & ~(1<<PD2) & ~(1<<PD4);
     4cc:	8b b1       	in	r24, 0x0b	; 11
     4ce:	8a 7e       	andi	r24, 0xEA	; 234
     4d0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d2:	85 e3       	ldi	r24, 0x35	; 53
     4d4:	8a 95       	dec	r24
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <keypressed+0x8>
     4d8:	00 00       	nop
    _delay_us(10);
    
    rowval = PIND & 0x6A;
     4da:	99 b1       	in	r25, 0x09	; 9
     4dc:	9a 76       	andi	r25, 0x6A	; 106
    
    kp = (rowval != 0x6A);
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	9a 36       	cpi	r25, 0x6A	; 106
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <keypressed+0x1a>
     4e4:	80 e0       	ldi	r24, 0x00	; 0
    
    return kp;
}
     4e6:	08 95       	ret

000004e8 <keypad_read>:

//**************************************************

char keypad_read(char lastchar) {
     4e8:	28 2f       	mov	r18, r24
    uint8_t rowval;
    char keych;
    
    keych = '$';
    
    PORTD &= ~(1<<PD2);
     4ea:	9b b1       	in	r25, 0x0b	; 11
     4ec:	9b 7f       	andi	r25, 0xFB	; 251
     4ee:	9b b9       	out	0x0b, r25	; 11
    PORTD |= (1<<PD0) | (1<<PD4);
     4f0:	9b b1       	in	r25, 0x0b	; 11
     4f2:	91 61       	ori	r25, 0x11	; 17
     4f4:	9b b9       	out	0x0b, r25	; 11
     4f6:	85 e3       	ldi	r24, 0x35	; 53
     4f8:	8a 95       	dec	r24
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <keypad_read+0x10>
     4fc:	00 00       	nop
    _delay_us(10);
    
    rowval = PIND & 0x6A;
     4fe:	99 b1       	in	r25, 0x09	; 9
     500:	9a 76       	andi	r25, 0x6A	; 106
    
    switch(rowval) {
     502:	9a 34       	cpi	r25, 0x4A	; 74
     504:	51 f0       	breq	.+20     	; 0x51a <keypad_read+0x32>
     506:	18 f4       	brcc	.+6      	; 0x50e <keypad_read+0x26>
     508:	9a 32       	cpi	r25, 0x2A	; 42
     50a:	69 f0       	breq	.+26     	; 0x526 <keypad_read+0x3e>
     50c:	0a c0       	rjmp	.+20     	; 0x522 <keypad_read+0x3a>
     50e:	92 36       	cpi	r25, 0x62	; 98
     510:	31 f0       	breq	.+12     	; 0x51e <keypad_read+0x36>
     512:	98 36       	cpi	r25, 0x68	; 104
     514:	31 f4       	brne	.+12     	; 0x522 <keypad_read+0x3a>
        case 0x68: keych = '1'; break;
     516:	81 e3       	ldi	r24, 0x31	; 49
     518:	07 c0       	rjmp	.+14     	; 0x528 <keypad_read+0x40>
        case 0x2A: keych = '4'; break;
        case 0x4A: keych = '7'; break;
     51a:	87 e3       	ldi	r24, 0x37	; 55
     51c:	05 c0       	rjmp	.+10     	; 0x528 <keypad_read+0x40>
        case 0x62: keych = '*'; break;
     51e:	8a e2       	ldi	r24, 0x2A	; 42
     520:	03 c0       	rjmp	.+6      	; 0x528 <keypad_read+0x40>
        default: keych = '$'; break;
     522:	84 e2       	ldi	r24, 0x24	; 36
     524:	01 c0       	rjmp	.+2      	; 0x528 <keypad_read+0x40>
    
    rowval = PIND & 0x6A;
    
    switch(rowval) {
        case 0x68: keych = '1'; break;
        case 0x2A: keych = '4'; break;
     526:	84 e3       	ldi	r24, 0x34	; 52
        case 0x4A: keych = '7'; break;
        case 0x62: keych = '*'; break;
        default: keych = '$'; break;
    }
    
    if (keych=='$') {
     528:	84 32       	cpi	r24, 0x24	; 36
     52a:	e9 f4       	brne	.+58     	; 0x566 <keypad_read+0x7e>
        PORTD &= ~(1<<PD0);
     52c:	9b b1       	in	r25, 0x0b	; 11
     52e:	9e 7f       	andi	r25, 0xFE	; 254
     530:	9b b9       	out	0x0b, r25	; 11
        PORTD |= (1<<PD2) | (1<<PD4);
     532:	9b b1       	in	r25, 0x0b	; 11
     534:	94 61       	ori	r25, 0x14	; 20
     536:	9b b9       	out	0x0b, r25	; 11
     538:	95 e3       	ldi	r25, 0x35	; 53
     53a:	9a 95       	dec	r25
     53c:	f1 f7       	brne	.-4      	; 0x53a <keypad_read+0x52>
     53e:	00 00       	nop
        _delay_us(10);
        
        rowval = PIND & 0x6A;
     540:	99 b1       	in	r25, 0x09	; 9
     542:	9a 76       	andi	r25, 0x6A	; 106
        
        switch(rowval) {
     544:	9a 34       	cpi	r25, 0x4A	; 74
     546:	51 f0       	breq	.+20     	; 0x55c <keypad_read+0x74>
     548:	18 f4       	brcc	.+6      	; 0x550 <keypad_read+0x68>
     54a:	9a 32       	cpi	r25, 0x2A	; 42
     54c:	59 f0       	breq	.+22     	; 0x564 <keypad_read+0x7c>
     54e:	0b c0       	rjmp	.+22     	; 0x566 <keypad_read+0x7e>
     550:	92 36       	cpi	r25, 0x62	; 98
     552:	31 f0       	breq	.+12     	; 0x560 <keypad_read+0x78>
     554:	98 36       	cpi	r25, 0x68	; 104
     556:	39 f4       	brne	.+14     	; 0x566 <keypad_read+0x7e>
            case 0x68: keych = '2'; break;
     558:	82 e3       	ldi	r24, 0x32	; 50
     55a:	05 c0       	rjmp	.+10     	; 0x566 <keypad_read+0x7e>
            case 0x2A: keych = '5'; break;
            case 0x4A: keych = '8'; break;
     55c:	88 e3       	ldi	r24, 0x38	; 56
     55e:	03 c0       	rjmp	.+6      	; 0x566 <keypad_read+0x7e>
            case 0x62: keych = '0'; break;
     560:	80 e3       	ldi	r24, 0x30	; 48
     562:	01 c0       	rjmp	.+2      	; 0x566 <keypad_read+0x7e>
        
        rowval = PIND & 0x6A;
        
        switch(rowval) {
            case 0x68: keych = '2'; break;
            case 0x2A: keych = '5'; break;
     564:	85 e3       	ldi	r24, 0x35	; 53
            case 0x62: keych = '0'; break;
            default: keych = '$'; break;
        }
    }
    
    if (keych=='$') {
     566:	84 32       	cpi	r24, 0x24	; 36
     568:	e9 f4       	brne	.+58     	; 0x5a4 <keypad_read+0xbc>
        PORTD &= ~(1<<PD4);
     56a:	9b b1       	in	r25, 0x0b	; 11
     56c:	9f 7e       	andi	r25, 0xEF	; 239
     56e:	9b b9       	out	0x0b, r25	; 11
        PORTD |= (1<<PD0) | (1<<PD2);
     570:	9b b1       	in	r25, 0x0b	; 11
     572:	95 60       	ori	r25, 0x05	; 5
     574:	9b b9       	out	0x0b, r25	; 11
     576:	95 e3       	ldi	r25, 0x35	; 53
     578:	9a 95       	dec	r25
     57a:	f1 f7       	brne	.-4      	; 0x578 <keypad_read+0x90>
     57c:	00 00       	nop
        _delay_us(10);
        
        rowval = PIND & 0x6A;
     57e:	99 b1       	in	r25, 0x09	; 9
     580:	9a 76       	andi	r25, 0x6A	; 106
        
        switch(rowval) {
     582:	9a 34       	cpi	r25, 0x4A	; 74
     584:	51 f0       	breq	.+20     	; 0x59a <keypad_read+0xb2>
     586:	18 f4       	brcc	.+6      	; 0x58e <keypad_read+0xa6>
     588:	9a 32       	cpi	r25, 0x2A	; 42
     58a:	59 f0       	breq	.+22     	; 0x5a2 <keypad_read+0xba>
     58c:	0b c0       	rjmp	.+22     	; 0x5a4 <keypad_read+0xbc>
     58e:	92 36       	cpi	r25, 0x62	; 98
     590:	31 f0       	breq	.+12     	; 0x59e <keypad_read+0xb6>
     592:	98 36       	cpi	r25, 0x68	; 104
     594:	39 f4       	brne	.+14     	; 0x5a4 <keypad_read+0xbc>
            case 0x68: keych = '3'; break;
     596:	83 e3       	ldi	r24, 0x33	; 51
     598:	05 c0       	rjmp	.+10     	; 0x5a4 <keypad_read+0xbc>
            case 0x2A: keych = '6'; break;
            case 0x4A: keych = '9'; break;
     59a:	89 e3       	ldi	r24, 0x39	; 57
     59c:	03 c0       	rjmp	.+6      	; 0x5a4 <keypad_read+0xbc>
            case 0x62: keych = '#'; break;
     59e:	83 e2       	ldi	r24, 0x23	; 35
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <keypad_read+0xbc>
        
        rowval = PIND & 0x6A;
        
        switch(rowval) {
            case 0x68: keych = '3'; break;
            case 0x2A: keych = '6'; break;
     5a2:	86 e3       	ldi	r24, 0x36	; 54
            case 0x62: keych = '#'; break;
            default: keych = '$'; break;
        }
    }
    
    if (keych != '$') {
     5a4:	84 32       	cpi	r24, 0x24	; 36
     5a6:	09 f4       	brne	.+2      	; 0x5aa <keypad_read+0xc2>
     5a8:	82 2f       	mov	r24, r18
        lastchar = keych;
    }
    
    return lastchar;
}  // END keypad_read
     5aa:	08 95       	ret

000005ac <get_keypad_input>:

//**************************************************

uint8_t get_keypad_input() {
    if (keypressed()) {
     5ac:	0e 94 66 02 	call	0x4cc	; 0x4cc <keypressed>
     5b0:	88 23       	and	r24, r24
     5b2:	21 f0       	breq	.+8      	; 0x5bc <get_keypad_input+0x10>
        char keychar = keypad_read('$');
     5b4:	84 e2       	ldi	r24, 0x24	; 36
     5b6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <keypad_read>
        return keychar;
     5ba:	08 95       	ret
    }
    return '$';
     5bc:	84 e2       	ldi	r24, 0x24	; 36
}
     5be:	08 95       	ret

000005c0 <init_interrupts>:

//**************************************************

void init_interrupts() {
    PCMSK0 = (1<<PCINT1);
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
    PCICR &= ~(1<<PCIE1) & ~(1<<PCIE2);
     5c6:	e8 e6       	ldi	r30, 0x68	; 104
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	80 81       	ld	r24, Z
     5cc:	89 7f       	andi	r24, 0xF9	; 249
     5ce:	80 83       	st	Z, r24
    PCICR |= (1<<PCIE0);
     5d0:	80 81       	ld	r24, Z
     5d2:	81 60       	ori	r24, 0x01	; 1
     5d4:	80 83       	st	Z, r24
    sei();
     5d6:	78 94       	sei
     5d8:	08 95       	ret

000005da <display_menu>:
//********************************************************************************************************

//Displays Welcome Menu 

void display_menu(void) {
    lcd_clear_and_home();
     5da:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_clear_and_home>
    lcd_write_string(PSTR("1: Play Tones"));
     5de:	83 e3       	ldi	r24, 0x33	; 51
     5e0:	92 e0       	ldi	r25, 0x02	; 2
     5e2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_write_string>
    lcd_goto_position(1, 0);  
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
    lcd_write_string(PSTR("2: Play Frogger"));
     5ee:	83 e2       	ldi	r24, 0x23	; 35
     5f0:	92 e0       	ldi	r25, 0x02	; 2
     5f2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_write_string>
    lcd_goto_position(2, 0);  
     5f6:	60 e0       	ldi	r22, 0x00	; 0
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
    lcd_write_string(PSTR("3: Scored Frogger"));
     5fe:	81 e1       	ldi	r24, 0x11	; 17
     600:	92 e0       	ldi	r25, 0x02	; 2
     602:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_write_string>
    lcd_goto_position(3, 0);  
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
    lcd_write_string(PSTR("4: C Major"));
     60e:	86 e0       	ldi	r24, 0x06	; 6
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_write_string>
     616:	08 95       	ret

00000618 <display_tone_grid>:
}


//Displays 3x4 grid for tone generation choice
void display_tone_grid(void) {
    lcd_clear_and_home();
     618:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_clear_and_home>
    lcd_goto_position(0, 8);  
     61c:	68 e0       	ldi	r22, 0x08	; 8
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
    lcd_write_string(PSTR("CDE"));
     624:	82 e0       	ldi	r24, 0x02	; 2
     626:	92 e0       	ldi	r25, 0x02	; 2
     628:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_write_string>
    lcd_goto_position(1, 8);  
     62c:	68 e0       	ldi	r22, 0x08	; 8
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
    lcd_write_string(PSTR("FGA"));
     634:	8e ef       	ldi	r24, 0xFE	; 254
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_write_string>
    lcd_goto_position(2, 8);  
     63c:	68 e0       	ldi	r22, 0x08	; 8
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
    lcd_write_string(PSTR("BC."));
     644:	8a ef       	ldi	r24, 0xFA	; 250
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_write_string>
    lcd_goto_position(3, 8);  
     64c:	68 e0       	ldi	r22, 0x08	; 8
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
    lcd_write_string(PSTR("..X"));
     654:	86 ef       	ldi	r24, 0xF6	; 246
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_write_string>
     65c:	08 95       	ret

0000065e <delay_us>:
//********************************************************************************************************

//Custom delay_us to allow for dynamic variables to be used (unlike AVR Library _delay_us

void delay_us(uint16_t us) {
    while (us--) {
     65e:	05 c0       	rjmp	.+10     	; 0x66a <delay_us+0xc>
     660:	85 e0       	ldi	r24, 0x05	; 5
     662:	8a 95       	dec	r24
     664:	f1 f7       	brne	.-4      	; 0x662 <delay_us+0x4>
     666:	00 00       	nop
     668:	c9 01       	movw	r24, r18
     66a:	9c 01       	movw	r18, r24
     66c:	21 50       	subi	r18, 0x01	; 1
     66e:	31 09       	sbc	r19, r1
     670:	89 2b       	or	r24, r25
     672:	b1 f7       	brne	.-20     	; 0x660 <delay_us+0x2>
        _delay_us(1);
    }
}
     674:	08 95       	ret

00000676 <play_tone>:

void play_tone(uint16_t frequency) {
     676:	cf 92       	push	r12
     678:	df 92       	push	r13
     67a:	ef 92       	push	r14
     67c:	ff 92       	push	r15
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	8c 01       	movw	r16, r24
    uint16_t delayTime = 500000 / frequency / 2;
     688:	9c 01       	movw	r18, r24
     68a:	40 e0       	ldi	r20, 0x00	; 0
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	60 e9       	ldi	r22, 0x90	; 144
     690:	70 ed       	ldi	r23, 0xD0	; 208
     692:	83 e0       	ldi	r24, 0x03	; 3
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 31 12 	call	0x2462	; 0x2462 <__divmodsi4>
     69a:	e9 01       	movw	r28, r18
    
    for (uint32_t i = 0; i < (frequency / 2)/4; ++i) {
     69c:	c1 2c       	mov	r12, r1
     69e:	d1 2c       	mov	r13, r1
     6a0:	76 01       	movw	r14, r12
     6a2:	11 c0       	rjmp	.+34     	; 0x6c6 <play_tone+0x50>
        PORTB |= (1 << PB0);
     6a4:	85 b1       	in	r24, 0x05	; 5
     6a6:	81 60       	ori	r24, 0x01	; 1
     6a8:	85 b9       	out	0x05, r24	; 5
        delay_us(delayTime);
     6aa:	ce 01       	movw	r24, r28
     6ac:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
        PORTB &= ~(1 << PB0);
     6b0:	85 b1       	in	r24, 0x05	; 5
     6b2:	8e 7f       	andi	r24, 0xFE	; 254
     6b4:	85 b9       	out	0x05, r24	; 5
        delay_us(delayTime);
     6b6:	ce 01       	movw	r24, r28
     6b8:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
}

void play_tone(uint16_t frequency) {
    uint16_t delayTime = 500000 / frequency / 2;
    
    for (uint32_t i = 0; i < (frequency / 2)/4; ++i) {
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	c8 1a       	sub	r12, r24
     6c0:	d8 0a       	sbc	r13, r24
     6c2:	e8 0a       	sbc	r14, r24
     6c4:	f8 0a       	sbc	r15, r24
     6c6:	c8 01       	movw	r24, r16
     6c8:	96 95       	lsr	r25
     6ca:	87 95       	ror	r24
     6cc:	96 95       	lsr	r25
     6ce:	87 95       	ror	r24
     6d0:	96 95       	lsr	r25
     6d2:	87 95       	ror	r24
     6d4:	a0 e0       	ldi	r26, 0x00	; 0
     6d6:	b0 e0       	ldi	r27, 0x00	; 0
     6d8:	c8 16       	cp	r12, r24
     6da:	d9 06       	cpc	r13, r25
     6dc:	ea 06       	cpc	r14, r26
     6de:	fb 06       	cpc	r15, r27
     6e0:	08 f3       	brcs	.-62     	; 0x6a4 <play_tone+0x2e>
        PORTB |= (1 << PB0);
        delay_us(delayTime);
        PORTB &= ~(1 << PB0);
        delay_us(delayTime);
    }
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	08 95       	ret

000006f4 <hold_tone>:

void hold_tone(uint16_t frequency) {
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
    uint16_t delayTime = 500000 / frequency / 2;
     6f8:	9c 01       	movw	r18, r24
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	60 e9       	ldi	r22, 0x90	; 144
     700:	70 ed       	ldi	r23, 0xD0	; 208
     702:	83 e0       	ldi	r24, 0x03	; 3
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 31 12 	call	0x2462	; 0x2462 <__divmodsi4>
     70a:	e9 01       	movw	r28, r18
    
    while (keypressed()){
     70c:	0c c0       	rjmp	.+24     	; 0x726 <hold_tone+0x32>
        PORTB |= (1 << PB0);
     70e:	85 b1       	in	r24, 0x05	; 5
     710:	81 60       	ori	r24, 0x01	; 1
     712:	85 b9       	out	0x05, r24	; 5
        delay_us(delayTime);
     714:	ce 01       	movw	r24, r28
     716:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
        PORTB &= ~(1 << PB0);
     71a:	85 b1       	in	r24, 0x05	; 5
     71c:	8e 7f       	andi	r24, 0xFE	; 254
     71e:	85 b9       	out	0x05, r24	; 5
        delay_us(delayTime);
     720:	ce 01       	movw	r24, r28
     722:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
}

void hold_tone(uint16_t frequency) {
    uint16_t delayTime = 500000 / frequency / 2;
    
    while (keypressed()){
     726:	0e 94 66 02 	call	0x4cc	; 0x4cc <keypressed>
     72a:	81 11       	cpse	r24, r1
     72c:	f0 cf       	rjmp	.-32     	; 0x70e <hold_tone+0x1a>
        PORTB |= (1 << PB0);
        delay_us(delayTime);
        PORTB &= ~(1 << PB0);
        delay_us(delayTime);
    }
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <play_tones>:

void play_tones(void) {
    display_tone_grid();
     734:	0e 94 0c 03 	call	0x618	; 0x618 <display_tone_grid>

    while(1) {
        char input = get_keypad_input();
     738:	0e 94 d6 02 	call	0x5ac	; 0x5ac <get_keypad_input>

        if (input == '#') {
     73c:	83 32       	cpi	r24, 0x23	; 35
     73e:	19 f4       	brne	.+6      	; 0x746 <play_tones+0x12>
            display_menu();
     740:	0e 94 ed 02 	call	0x5da	; 0x5da <display_menu>
            return;
     744:	08 95       	ret
        }

        switch(input) {
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	fc 01       	movw	r30, r24
     74a:	f1 97       	sbiw	r30, 0x31	; 49
     74c:	e8 30       	cpi	r30, 0x08	; 8
     74e:	f1 05       	cpc	r31, r1
     750:	98 f7       	brcc	.-26     	; 0x738 <play_tones+0x4>
     752:	e6 5a       	subi	r30, 0xA6	; 166
     754:	ff 4f       	sbci	r31, 0xFF	; 255
     756:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <__tablejump2__>
            case '1':
                hold_tone(freq_C4);
     75a:	85 e0       	ldi	r24, 0x05	; 5
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <hold_tone>
                break;
     762:	ea cf       	rjmp	.-44     	; 0x738 <play_tones+0x4>
            case '2':
                hold_tone(freq_D4);
     764:	86 e2       	ldi	r24, 0x26	; 38
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <hold_tone>
                break;
     76c:	e5 cf       	rjmp	.-54     	; 0x738 <play_tones+0x4>
            case '3':
                hold_tone(freq_E4);
     76e:	8a e4       	ldi	r24, 0x4A	; 74
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <hold_tone>
                break;
     776:	e0 cf       	rjmp	.-64     	; 0x738 <play_tones+0x4>
            case '4':
                hold_tone(freq_F4);
     778:	8d e5       	ldi	r24, 0x5D	; 93
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <hold_tone>
                break;
     780:	db cf       	rjmp	.-74     	; 0x738 <play_tones+0x4>
            case '5':
                hold_tone(freq_G4);
     782:	88 e8       	ldi	r24, 0x88	; 136
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <hold_tone>
                break;
     78a:	d6 cf       	rjmp	.-84     	; 0x738 <play_tones+0x4>
            case '6':
                hold_tone(freq_A4);
     78c:	88 eb       	ldi	r24, 0xB8	; 184
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <hold_tone>
                break;
     794:	d1 cf       	rjmp	.-94     	; 0x738 <play_tones+0x4>
            case '7':
                hold_tone(freq_B4);
     796:	8e ee       	ldi	r24, 0xEE	; 238
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <hold_tone>
                break;
     79e:	cc cf       	rjmp	.-104    	; 0x738 <play_tones+0x4>
            case '8':
                hold_tone(freq_C5);
     7a0:	8b e0       	ldi	r24, 0x0B	; 11
     7a2:	92 e0       	ldi	r25, 0x02	; 2
     7a4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <hold_tone>
                break;
     7a8:	c7 cf       	rjmp	.-114    	; 0x738 <play_tones+0x4>

000007aa <c_scale>:
        }
    }
}

void c_scale() {
    DDRB |= (1 << PB0);
     7aa:	84 b1       	in	r24, 0x04	; 4
     7ac:	81 60       	ori	r24, 0x01	; 1
     7ae:	84 b9       	out	0x04, r24	; 4
    
    play_tone(freq_C4);
     7b0:	85 e0       	ldi	r24, 0x05	; 5
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b8:	2f ef       	ldi	r18, 0xFF	; 255
     7ba:	89 e6       	ldi	r24, 0x69	; 105
     7bc:	98 e1       	ldi	r25, 0x18	; 24
     7be:	21 50       	subi	r18, 0x01	; 1
     7c0:	80 40       	sbci	r24, 0x00	; 0
     7c2:	90 40       	sbci	r25, 0x00	; 0
     7c4:	e1 f7       	brne	.-8      	; 0x7be <c_scale+0x14>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <c_scale+0x1e>
     7c8:	00 00       	nop
    _delay_ms(500);
    play_tone(freq_D4);
     7ca:	86 e2       	ldi	r24, 0x26	; 38
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
     7d2:	2f ef       	ldi	r18, 0xFF	; 255
     7d4:	89 e6       	ldi	r24, 0x69	; 105
     7d6:	98 e1       	ldi	r25, 0x18	; 24
     7d8:	21 50       	subi	r18, 0x01	; 1
     7da:	80 40       	sbci	r24, 0x00	; 0
     7dc:	90 40       	sbci	r25, 0x00	; 0
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <c_scale+0x2e>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <c_scale+0x38>
     7e2:	00 00       	nop
    _delay_ms(500);
    play_tone(freq_E4);
     7e4:	8a e4       	ldi	r24, 0x4A	; 74
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
     7ec:	2f ef       	ldi	r18, 0xFF	; 255
     7ee:	89 e6       	ldi	r24, 0x69	; 105
     7f0:	98 e1       	ldi	r25, 0x18	; 24
     7f2:	21 50       	subi	r18, 0x01	; 1
     7f4:	80 40       	sbci	r24, 0x00	; 0
     7f6:	90 40       	sbci	r25, 0x00	; 0
     7f8:	e1 f7       	brne	.-8      	; 0x7f2 <c_scale+0x48>
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <c_scale+0x52>
     7fc:	00 00       	nop
    _delay_ms(500);
    play_tone(freq_F4);
     7fe:	8d e5       	ldi	r24, 0x5D	; 93
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
     806:	2f ef       	ldi	r18, 0xFF	; 255
     808:	89 e6       	ldi	r24, 0x69	; 105
     80a:	98 e1       	ldi	r25, 0x18	; 24
     80c:	21 50       	subi	r18, 0x01	; 1
     80e:	80 40       	sbci	r24, 0x00	; 0
     810:	90 40       	sbci	r25, 0x00	; 0
     812:	e1 f7       	brne	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     814:	00 c0       	rjmp	.+0      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     816:	00 00       	nop
    _delay_ms(500);
    play_tone(freq_G4);
     818:	88 e8       	ldi	r24, 0x88	; 136
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
     820:	2f ef       	ldi	r18, 0xFF	; 255
     822:	89 e6       	ldi	r24, 0x69	; 105
     824:	98 e1       	ldi	r25, 0x18	; 24
     826:	21 50       	subi	r18, 0x01	; 1
     828:	80 40       	sbci	r24, 0x00	; 0
     82a:	90 40       	sbci	r25, 0x00	; 0
     82c:	e1 f7       	brne	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     830:	00 00       	nop
    _delay_ms(500);
    play_tone(freq_A4);
     832:	88 eb       	ldi	r24, 0xB8	; 184
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
     83a:	2f ef       	ldi	r18, 0xFF	; 255
     83c:	89 e6       	ldi	r24, 0x69	; 105
     83e:	98 e1       	ldi	r25, 0x18	; 24
     840:	21 50       	subi	r18, 0x01	; 1
     842:	80 40       	sbci	r24, 0x00	; 0
     844:	90 40       	sbci	r25, 0x00	; 0
     846:	e1 f7       	brne	.-8      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     848:	00 c0       	rjmp	.+0      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     84a:	00 00       	nop
    _delay_ms(500);
    play_tone(freq_B4);
     84c:	8e ee       	ldi	r24, 0xEE	; 238
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
     854:	2f ef       	ldi	r18, 0xFF	; 255
     856:	89 e6       	ldi	r24, 0x69	; 105
     858:	98 e1       	ldi	r25, 0x18	; 24
     85a:	21 50       	subi	r18, 0x01	; 1
     85c:	80 40       	sbci	r24, 0x00	; 0
     85e:	90 40       	sbci	r25, 0x00	; 0
     860:	e1 f7       	brne	.-8      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     862:	00 c0       	rjmp	.+0      	; 0x864 <__DATA_REGION_LENGTH__+0x64>
     864:	00 00       	nop
    _delay_ms(500);
    play_tone(freq_C5);
     866:	8b e0       	ldi	r24, 0x0B	; 11
     868:	92 e0       	ldi	r25, 0x02	; 2
     86a:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
     86e:	2f ef       	ldi	r18, 0xFF	; 255
     870:	89 e6       	ldi	r24, 0x69	; 105
     872:	98 e1       	ldi	r25, 0x18	; 24
     874:	21 50       	subi	r18, 0x01	; 1
     876:	80 40       	sbci	r24, 0x00	; 0
     878:	90 40       	sbci	r25, 0x00	; 0
     87a:	e1 f7       	brne	.-8      	; 0x874 <__DATA_REGION_LENGTH__+0x74>
     87c:	00 c0       	rjmp	.+0      	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
     87e:	00 00       	nop
    _delay_ms(500);

    display_menu();
     880:	0e 94 ed 02 	call	0x5da	; 0x5da <display_menu>
     884:	08 95       	ret

00000886 <is_space_clear>:
//********************************************************************************************************
//*					Task 1 and 2 - Shared Functions Frogger												*
//********************************************************************************************************

//Checks if space is clear for vehicle spawn
bool is_space_clear(int x, int y, int length) {
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	ec 01       	movw	r28, r24
    for (int i = 0; i < length; i++) {
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	11 c0       	rjmp	.+34     	; 0x8b4 <is_space_clear+0x2e>
        if (grid[y][x + i] != ' ') {
     892:	94 e1       	ldi	r25, 0x14	; 20
     894:	96 9f       	mul	r25, r22
     896:	f0 01       	movw	r30, r0
     898:	97 9f       	mul	r25, r23
     89a:	f0 0d       	add	r31, r0
     89c:	11 24       	eor	r1, r1
     89e:	e8 5e       	subi	r30, 0xE8	; 232
     8a0:	fe 4f       	sbci	r31, 0xFE	; 254
     8a2:	9d 01       	movw	r18, r26
     8a4:	2c 0f       	add	r18, r28
     8a6:	3d 1f       	adc	r19, r29
     8a8:	e2 0f       	add	r30, r18
     8aa:	f3 1f       	adc	r31, r19
     8ac:	90 81       	ld	r25, Z
     8ae:	90 32       	cpi	r25, 0x20	; 32
     8b0:	31 f4       	brne	.+12     	; 0x8be <is_space_clear+0x38>
//*					Task 1 and 2 - Shared Functions Frogger												*
//********************************************************************************************************

//Checks if space is clear for vehicle spawn
bool is_space_clear(int x, int y, int length) {
    for (int i = 0; i < length; i++) {
     8b2:	11 96       	adiw	r26, 0x01	; 1
     8b4:	a4 17       	cp	r26, r20
     8b6:	b5 07       	cpc	r27, r21
     8b8:	64 f3       	brlt	.-40     	; 0x892 <is_space_clear+0xc>
        if (grid[y][x + i] != ' ') {
            return false;
        }
    }
    return true;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <is_space_clear+0x3a>

//Checks if space is clear for vehicle spawn
bool is_space_clear(int x, int y, int length) {
    for (int i = 0; i < length; i++) {
        if (grid[y][x + i] != ' ') {
            return false;
     8be:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    return true;
}
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <reverse_string>:

//Reverse Vehicle string for both directions
void reverse_string(char* str, char* reversed, int length) {
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	ec 01       	movw	r28, r24
    for (int i = 0; i < length; i++) {
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	0d c0       	rjmp	.+26     	; 0x8ec <reverse_string+0x26>
        reversed[i] = str[length - i - 1];
     8d2:	db 01       	movw	r26, r22
     8d4:	a2 0f       	add	r26, r18
     8d6:	b3 1f       	adc	r27, r19
     8d8:	fa 01       	movw	r30, r20
     8da:	e2 1b       	sub	r30, r18
     8dc:	f3 0b       	sbc	r31, r19
     8de:	ec 0f       	add	r30, r28
     8e0:	fd 1f       	adc	r31, r29
     8e2:	31 97       	sbiw	r30, 0x01	; 1
     8e4:	90 81       	ld	r25, Z
     8e6:	9c 93       	st	X, r25
    return true;
}

//Reverse Vehicle string for both directions
void reverse_string(char* str, char* reversed, int length) {
    for (int i = 0; i < length; i++) {
     8e8:	2f 5f       	subi	r18, 0xFF	; 255
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	24 17       	cp	r18, r20
     8ee:	35 07       	cpc	r19, r21
     8f0:	84 f3       	brlt	.-32     	; 0x8d2 <reverse_string+0xc>
        reversed[i] = str[length - i - 1];
    }
    reversed[length] = '\0';
     8f2:	fb 01       	movw	r30, r22
     8f4:	e4 0f       	add	r30, r20
     8f6:	f5 1f       	adc	r31, r21
     8f8:	10 82       	st	Z, r1
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <spawn_vehicle>:

void spawn_vehicle() {
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
    for (int i = 0; i < MAX_VEHICLES; i++) {
     90c:	c0 e0       	ldi	r28, 0x00	; 0
     90e:	d0 e0       	ldi	r29, 0x00	; 0
     910:	9f c0       	rjmp	.+318    	; 0xa50 <spawn_vehicle+0x150>
        if (!vehicles[i].active) {
     912:	85 e1       	ldi	r24, 0x15	; 21
     914:	8c 9f       	mul	r24, r28
     916:	f0 01       	movw	r30, r0
     918:	8d 9f       	mul	r24, r29
     91a:	f0 0d       	add	r31, r0
     91c:	11 24       	eor	r1, r1
     91e:	e6 59       	subi	r30, 0x96	; 150
     920:	fe 4f       	sbci	r31, 0xFE	; 254
     922:	82 89       	ldd	r24, Z+18	; 0x12
     924:	81 11       	cpse	r24, r1
     926:	93 c0       	rjmp	.+294    	; 0xa4e <spawn_vehicle+0x14e>
            vehicles[i].active = true;
     928:	85 e1       	ldi	r24, 0x15	; 21
     92a:	8c 9f       	mul	r24, r28
     92c:	f0 01       	movw	r30, r0
     92e:	8d 9f       	mul	r24, r29
     930:	f0 0d       	add	r31, r0
     932:	11 24       	eor	r1, r1
     934:	e6 59       	subi	r30, 0x96	; 150
     936:	fe 4f       	sbci	r31, 0xFE	; 254
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	82 8b       	std	Z+18, r24	; 0x12
            vehicles[i].y = rand() % 2 + 1;
     93c:	0e 94 0a 13 	call	0x2614	; 0x2614 <rand>
     940:	81 70       	andi	r24, 0x01	; 1
     942:	90 78       	andi	r25, 0x80	; 128
     944:	99 23       	and	r25, r25
     946:	24 f4       	brge	.+8      	; 0x950 <spawn_vehicle+0x50>
     948:	01 97       	sbiw	r24, 0x01	; 1
     94a:	8e 6f       	ori	r24, 0xFE	; 254
     94c:	9f 6f       	ori	r25, 0xFF	; 255
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	01 96       	adiw	r24, 0x01	; 1
     952:	25 e1       	ldi	r18, 0x15	; 21
     954:	2c 9f       	mul	r18, r28
     956:	f0 01       	movw	r30, r0
     958:	2d 9f       	mul	r18, r29
     95a:	f0 0d       	add	r31, r0
     95c:	11 24       	eor	r1, r1
     95e:	e6 59       	subi	r30, 0x96	; 150
     960:	fe 4f       	sbci	r31, 0xFE	; 254
     962:	93 83       	std	Z+3, r25	; 0x03
     964:	82 83       	std	Z+2, r24	; 0x02
            int length;
            if (rand() % 2 == 0) {
     966:	0e 94 0a 13 	call	0x2614	; 0x2614 <rand>
     96a:	80 fd       	sbrc	r24, 0
     96c:	15 c0       	rjmp	.+42     	; 0x998 <spawn_vehicle+0x98>
                length = 5;
                strcpy(vehicles[i].representation, "####T");
     96e:	85 e1       	ldi	r24, 0x15	; 21
     970:	8c 9f       	mul	r24, r28
     972:	d0 01       	movw	r26, r0
     974:	8d 9f       	mul	r24, r29
     976:	b0 0d       	add	r27, r0
     978:	11 24       	eor	r1, r1
     97a:	a0 59       	subi	r26, 0x90	; 144
     97c:	be 4f       	sbci	r27, 0xFE	; 254
     97e:	86 e0       	ldi	r24, 0x06	; 6
     980:	ec e0       	ldi	r30, 0x0C	; 12
     982:	f1 e0       	ldi	r31, 0x01	; 1
     984:	01 90       	ld	r0, Z+
     986:	0d 92       	st	X+, r0
     988:	8a 95       	dec	r24
     98a:	e1 f7       	brne	.-8      	; 0x984 <spawn_vehicle+0x84>
        if (!vehicles[i].active) {
            vehicles[i].active = true;
            vehicles[i].y = rand() % 2 + 1;
            int length;
            if (rand() % 2 == 0) {
                length = 5;
     98c:	0f 2e       	mov	r0, r31
     98e:	f5 e0       	ldi	r31, 0x05	; 5
     990:	ef 2e       	mov	r14, r31
     992:	f1 2c       	mov	r15, r1
     994:	f0 2d       	mov	r31, r0
     996:	15 c0       	rjmp	.+42     	; 0x9c2 <spawn_vehicle+0xc2>
                strcpy(vehicles[i].representation, "####T");
            } else {
                length = 3;
                strcpy(vehicles[i].representation, "##8");
     998:	85 e1       	ldi	r24, 0x15	; 21
     99a:	8c 9f       	mul	r24, r28
     99c:	f0 01       	movw	r30, r0
     99e:	8d 9f       	mul	r24, r29
     9a0:	f0 0d       	add	r31, r0
     9a2:	11 24       	eor	r1, r1
     9a4:	e0 59       	subi	r30, 0x90	; 144
     9a6:	fe 4f       	sbci	r31, 0xFE	; 254
     9a8:	83 e2       	ldi	r24, 0x23	; 35
     9aa:	93 e2       	ldi	r25, 0x23	; 35
     9ac:	91 83       	std	Z+1, r25	; 0x01
     9ae:	80 83       	st	Z, r24
     9b0:	88 e3       	ldi	r24, 0x38	; 56
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	93 83       	std	Z+3, r25	; 0x03
     9b6:	82 83       	std	Z+2, r24	; 0x02
            int length;
            if (rand() % 2 == 0) {
                length = 5;
                strcpy(vehicles[i].representation, "####T");
            } else {
                length = 3;
     9b8:	0f 2e       	mov	r0, r31
     9ba:	f3 e0       	ldi	r31, 0x03	; 3
     9bc:	ef 2e       	mov	r14, r31
     9be:	f1 2c       	mov	r15, r1
     9c0:	f0 2d       	mov	r31, r0
                strcpy(vehicles[i].representation, "##8");
            }
            reverse_string(vehicles[i].representation, vehicles[i].reversed_representation, length);
     9c2:	85 e1       	ldi	r24, 0x15	; 21
     9c4:	8c 9f       	mul	r24, r28
     9c6:	80 01       	movw	r16, r0
     9c8:	8d 9f       	mul	r24, r29
     9ca:	10 0d       	add	r17, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	b8 01       	movw	r22, r16
     9d0:	6a 58       	subi	r22, 0x8A	; 138
     9d2:	7e 4f       	sbci	r23, 0xFE	; 254
     9d4:	a7 01       	movw	r20, r14
     9d6:	c8 01       	movw	r24, r16
     9d8:	80 59       	subi	r24, 0x90	; 144
     9da:	9e 4f       	sbci	r25, 0xFE	; 254
     9dc:	0e 94 63 04 	call	0x8c6	; 0x8c6 <reverse_string>
            vehicles[i].length = length;
     9e0:	f8 01       	movw	r30, r16
     9e2:	e6 59       	subi	r30, 0x96	; 150
     9e4:	fe 4f       	sbci	r31, 0xFE	; 254
     9e6:	f5 82       	std	Z+5, r15	; 0x05
     9e8:	e4 82       	std	Z+4, r14	; 0x04
            if (vehicles[i].y == 1) {
     9ea:	62 81       	ldd	r22, Z+2	; 0x02
     9ec:	73 81       	ldd	r23, Z+3	; 0x03
     9ee:	61 30       	cpi	r22, 0x01	; 1
     9f0:	71 05       	cpc	r23, r1
     9f2:	89 f4       	brne	.+34     	; 0xa16 <spawn_vehicle+0x116>
                vehicles[i].x = 0;
     9f4:	f8 01       	movw	r30, r16
     9f6:	e6 59       	subi	r30, 0x96	; 150
     9f8:	fe 4f       	sbci	r31, 0xFE	; 254
     9fa:	11 82       	std	Z+1, r1	; 0x01
     9fc:	10 82       	st	Z, r1
                if (!is_space_clear(vehicles[i].x, vehicles[i].y, length)) {
     9fe:	a7 01       	movw	r20, r14
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 43 04 	call	0x886	; 0x886 <is_space_clear>
     a08:	81 11       	cpse	r24, r1
     a0a:	26 c0       	rjmp	.+76     	; 0xa58 <spawn_vehicle+0x158>
                    vehicles[i].active = false;
     a0c:	f8 01       	movw	r30, r16
     a0e:	e6 59       	subi	r30, 0x96	; 150
     a10:	fe 4f       	sbci	r31, 0xFE	; 254
     a12:	12 8a       	std	Z+18, r1	; 0x12
                    continue;
     a14:	1c c0       	rjmp	.+56     	; 0xa4e <spawn_vehicle+0x14e>
                }
            } else {
                vehicles[i].x = GRID_WIDTH - length;
     a16:	84 e1       	ldi	r24, 0x14	; 20
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	8e 19       	sub	r24, r14
     a1c:	9f 09       	sbc	r25, r15
     a1e:	25 e1       	ldi	r18, 0x15	; 21
     a20:	2c 9f       	mul	r18, r28
     a22:	f0 01       	movw	r30, r0
     a24:	2d 9f       	mul	r18, r29
     a26:	f0 0d       	add	r31, r0
     a28:	11 24       	eor	r1, r1
     a2a:	e6 59       	subi	r30, 0x96	; 150
     a2c:	fe 4f       	sbci	r31, 0xFE	; 254
     a2e:	91 83       	std	Z+1, r25	; 0x01
     a30:	80 83       	st	Z, r24
                if (!is_space_clear(vehicles[i].x, vehicles[i].y, length)) {
     a32:	a7 01       	movw	r20, r14
     a34:	0e 94 43 04 	call	0x886	; 0x886 <is_space_clear>
     a38:	81 11       	cpse	r24, r1
     a3a:	0e c0       	rjmp	.+28     	; 0xa58 <spawn_vehicle+0x158>
                    vehicles[i].active = false;
     a3c:	85 e1       	ldi	r24, 0x15	; 21
     a3e:	8c 9f       	mul	r24, r28
     a40:	f0 01       	movw	r30, r0
     a42:	8d 9f       	mul	r24, r29
     a44:	f0 0d       	add	r31, r0
     a46:	11 24       	eor	r1, r1
     a48:	e6 59       	subi	r30, 0x96	; 150
     a4a:	fe 4f       	sbci	r31, 0xFE	; 254
     a4c:	12 8a       	std	Z+18, r1	; 0x12
    }
    reversed[length] = '\0';
}

void spawn_vehicle() {
    for (int i = 0; i < MAX_VEHICLES; i++) {
     a4e:	21 96       	adiw	r28, 0x01	; 1
     a50:	c5 30       	cpi	r28, 0x05	; 5
     a52:	d1 05       	cpc	r29, r1
     a54:	0c f4       	brge	.+2      	; 0xa58 <spawn_vehicle+0x158>
     a56:	5d cf       	rjmp	.-326    	; 0x912 <spawn_vehicle+0x12>
                }
            }
            break;
        }
    }
}
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	08 95       	ret

00000a66 <update_vehicles>:

void update_vehicles() {
    for (int i = 0; i < MAX_VEHICLES; i++) {
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	5a c0       	rjmp	.+180    	; 0xb20 <update_vehicles+0xba>
        if (vehicles[i].active) {
     a6c:	25 e1       	ldi	r18, 0x15	; 21
     a6e:	28 9f       	mul	r18, r24
     a70:	f0 01       	movw	r30, r0
     a72:	29 9f       	mul	r18, r25
     a74:	f0 0d       	add	r31, r0
     a76:	11 24       	eor	r1, r1
     a78:	e6 59       	subi	r30, 0x96	; 150
     a7a:	fe 4f       	sbci	r31, 0xFE	; 254
     a7c:	22 89       	ldd	r18, Z+18	; 0x12
     a7e:	22 23       	and	r18, r18
     a80:	09 f4       	brne	.+2      	; 0xa84 <update_vehicles+0x1e>
     a82:	4d c0       	rjmp	.+154    	; 0xb1e <update_vehicles+0xb8>
            if (vehicles[i].y == 1) {
     a84:	25 e1       	ldi	r18, 0x15	; 21
     a86:	28 9f       	mul	r18, r24
     a88:	f0 01       	movw	r30, r0
     a8a:	29 9f       	mul	r18, r25
     a8c:	f0 0d       	add	r31, r0
     a8e:	11 24       	eor	r1, r1
     a90:	e6 59       	subi	r30, 0x96	; 150
     a92:	fe 4f       	sbci	r31, 0xFE	; 254
     a94:	22 81       	ldd	r18, Z+2	; 0x02
     a96:	33 81       	ldd	r19, Z+3	; 0x03
     a98:	21 30       	cpi	r18, 0x01	; 1
     a9a:	31 05       	cpc	r19, r1
     a9c:	79 f4       	brne	.+30     	; 0xabc <update_vehicles+0x56>
                vehicles[i].x += 1;
     a9e:	25 e1       	ldi	r18, 0x15	; 21
     aa0:	28 9f       	mul	r18, r24
     aa2:	f0 01       	movw	r30, r0
     aa4:	29 9f       	mul	r18, r25
     aa6:	f0 0d       	add	r31, r0
     aa8:	11 24       	eor	r1, r1
     aaa:	e6 59       	subi	r30, 0x96	; 150
     aac:	fe 4f       	sbci	r31, 0xFE	; 254
     aae:	20 81       	ld	r18, Z
     ab0:	31 81       	ldd	r19, Z+1	; 0x01
     ab2:	2f 5f       	subi	r18, 0xFF	; 255
     ab4:	3f 4f       	sbci	r19, 0xFF	; 255
     ab6:	31 83       	std	Z+1, r19	; 0x01
     ab8:	20 83       	st	Z, r18
     aba:	0e c0       	rjmp	.+28     	; 0xad8 <update_vehicles+0x72>
            } else {
                vehicles[i].x -= 1;
     abc:	25 e1       	ldi	r18, 0x15	; 21
     abe:	28 9f       	mul	r18, r24
     ac0:	f0 01       	movw	r30, r0
     ac2:	29 9f       	mul	r18, r25
     ac4:	f0 0d       	add	r31, r0
     ac6:	11 24       	eor	r1, r1
     ac8:	e6 59       	subi	r30, 0x96	; 150
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	20 81       	ld	r18, Z
     ace:	31 81       	ldd	r19, Z+1	; 0x01
     ad0:	21 50       	subi	r18, 0x01	; 1
     ad2:	31 09       	sbc	r19, r1
     ad4:	31 83       	std	Z+1, r19	; 0x01
     ad6:	20 83       	st	Z, r18
            }

            if (vehicles[i].x < 0 || vehicles[i].x + vehicles[i].length > GRID_WIDTH) {
     ad8:	25 e1       	ldi	r18, 0x15	; 21
     ada:	28 9f       	mul	r18, r24
     adc:	f0 01       	movw	r30, r0
     ade:	29 9f       	mul	r18, r25
     ae0:	f0 0d       	add	r31, r0
     ae2:	11 24       	eor	r1, r1
     ae4:	e6 59       	subi	r30, 0x96	; 150
     ae6:	fe 4f       	sbci	r31, 0xFE	; 254
     ae8:	40 81       	ld	r20, Z
     aea:	51 81       	ldd	r21, Z+1	; 0x01
     aec:	55 23       	and	r21, r21
     aee:	74 f0       	brlt	.+28     	; 0xb0c <update_vehicles+0xa6>
     af0:	28 9f       	mul	r18, r24
     af2:	f0 01       	movw	r30, r0
     af4:	29 9f       	mul	r18, r25
     af6:	f0 0d       	add	r31, r0
     af8:	11 24       	eor	r1, r1
     afa:	e6 59       	subi	r30, 0x96	; 150
     afc:	fe 4f       	sbci	r31, 0xFE	; 254
     afe:	24 81       	ldd	r18, Z+4	; 0x04
     b00:	35 81       	ldd	r19, Z+5	; 0x05
     b02:	24 0f       	add	r18, r20
     b04:	35 1f       	adc	r19, r21
     b06:	25 31       	cpi	r18, 0x15	; 21
     b08:	31 05       	cpc	r19, r1
     b0a:	4c f0       	brlt	.+18     	; 0xb1e <update_vehicles+0xb8>
                vehicles[i].active = false;
     b0c:	25 e1       	ldi	r18, 0x15	; 21
     b0e:	28 9f       	mul	r18, r24
     b10:	f0 01       	movw	r30, r0
     b12:	29 9f       	mul	r18, r25
     b14:	f0 0d       	add	r31, r0
     b16:	11 24       	eor	r1, r1
     b18:	e6 59       	subi	r30, 0x96	; 150
     b1a:	fe 4f       	sbci	r31, 0xFE	; 254
     b1c:	12 8a       	std	Z+18, r1	; 0x12
        }
    }
}

void update_vehicles() {
    for (int i = 0; i < MAX_VEHICLES; i++) {
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	85 30       	cpi	r24, 0x05	; 5
     b22:	91 05       	cpc	r25, r1
     b24:	0c f4       	brge	.+2      	; 0xb28 <update_vehicles+0xc2>
     b26:	a2 cf       	rjmp	.-188    	; 0xa6c <update_vehicles+0x6>
            if (vehicles[i].x < 0 || vehicles[i].x + vehicles[i].length > GRID_WIDTH) {
                vehicles[i].active = false;
            }
        }
    }
}
     b28:	08 95       	ret

00000b2a <render_vehicles>:

void render_vehicles() {
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
	for (int i = 0; i < MAX_VEHICLES; i++) {
     b32:	40 e0       	ldi	r20, 0x00	; 0
     b34:	50 e0       	ldi	r21, 0x00	; 0
     b36:	56 c0       	rjmp	.+172    	; 0xbe4 <render_vehicles+0xba>
		if (vehicles[i].active) {
     b38:	85 e1       	ldi	r24, 0x15	; 21
     b3a:	84 9f       	mul	r24, r20
     b3c:	f0 01       	movw	r30, r0
     b3e:	85 9f       	mul	r24, r21
     b40:	f0 0d       	add	r31, r0
     b42:	11 24       	eor	r1, r1
     b44:	e6 59       	subi	r30, 0x96	; 150
     b46:	fe 4f       	sbci	r31, 0xFE	; 254
     b48:	82 89       	ldd	r24, Z+18	; 0x12
     b4a:	88 23       	and	r24, r24
     b4c:	09 f4       	brne	.+2      	; 0xb50 <render_vehicles+0x26>
     b4e:	48 c0       	rjmp	.+144    	; 0xbe0 <render_vehicles+0xb6>
			int x = vehicles[i].x;
     b50:	85 e1       	ldi	r24, 0x15	; 21
     b52:	84 9f       	mul	r24, r20
     b54:	f0 01       	movw	r30, r0
     b56:	85 9f       	mul	r24, r21
     b58:	f0 0d       	add	r31, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	e6 59       	subi	r30, 0x96	; 150
     b5e:	fe 4f       	sbci	r31, 0xFE	; 254
     b60:	60 81       	ld	r22, Z
     b62:	71 81       	ldd	r23, Z+1	; 0x01
			int y = vehicles[i].y;
     b64:	a2 81       	ldd	r26, Z+2	; 0x02
     b66:	b3 81       	ldd	r27, Z+3	; 0x03
			char* representation = vehicles[i].y == 1 ? vehicles[i].representation : vehicles[i].reversed_representation;
     b68:	a1 30       	cpi	r26, 0x01	; 1
     b6a:	b1 05       	cpc	r27, r1
     b6c:	41 f4       	brne	.+16     	; 0xb7e <render_vehicles+0x54>
     b6e:	84 9f       	mul	r24, r20
     b70:	e0 01       	movw	r28, r0
     b72:	85 9f       	mul	r24, r21
     b74:	d0 0d       	add	r29, r0
     b76:	11 24       	eor	r1, r1
     b78:	c0 59       	subi	r28, 0x90	; 144
     b7a:	de 4f       	sbci	r29, 0xFE	; 254
     b7c:	08 c0       	rjmp	.+16     	; 0xb8e <render_vehicles+0x64>
     b7e:	85 e1       	ldi	r24, 0x15	; 21
     b80:	84 9f       	mul	r24, r20
     b82:	e0 01       	movw	r28, r0
     b84:	85 9f       	mul	r24, r21
     b86:	d0 0d       	add	r29, r0
     b88:	11 24       	eor	r1, r1
     b8a:	ca 58       	subi	r28, 0x8A	; 138
     b8c:	de 4f       	sbci	r29, 0xFE	; 254
			for (int j = 0; j < vehicles[i].length; j++) {
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	19 c0       	rjmp	.+50     	; 0xbc6 <render_vehicles+0x9c>
				if (x + j < GRID_WIDTH && y < GRID_HEIGHT) {
     b94:	9c 01       	movw	r18, r24
     b96:	26 0f       	add	r18, r22
     b98:	37 1f       	adc	r19, r23
     b9a:	24 31       	cpi	r18, 0x14	; 20
     b9c:	31 05       	cpc	r19, r1
     b9e:	94 f4       	brge	.+36     	; 0xbc4 <render_vehicles+0x9a>
     ba0:	a4 30       	cpi	r26, 0x04	; 4
     ba2:	b1 05       	cpc	r27, r1
     ba4:	7c f4       	brge	.+30     	; 0xbc4 <render_vehicles+0x9a>
					grid[y][x + j] = representation[j];
     ba6:	fe 01       	movw	r30, r28
     ba8:	e8 0f       	add	r30, r24
     baa:	f9 1f       	adc	r31, r25
     bac:	10 81       	ld	r17, Z
     bae:	04 e1       	ldi	r16, 0x14	; 20
     bb0:	0a 9f       	mul	r16, r26
     bb2:	f0 01       	movw	r30, r0
     bb4:	0b 9f       	mul	r16, r27
     bb6:	f0 0d       	add	r31, r0
     bb8:	11 24       	eor	r1, r1
     bba:	e8 5e       	subi	r30, 0xE8	; 232
     bbc:	fe 4f       	sbci	r31, 0xFE	; 254
     bbe:	e2 0f       	add	r30, r18
     bc0:	f3 1f       	adc	r31, r19
     bc2:	10 83       	st	Z, r17
	for (int i = 0; i < MAX_VEHICLES; i++) {
		if (vehicles[i].active) {
			int x = vehicles[i].x;
			int y = vehicles[i].y;
			char* representation = vehicles[i].y == 1 ? vehicles[i].representation : vehicles[i].reversed_representation;
			for (int j = 0; j < vehicles[i].length; j++) {
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	25 e1       	ldi	r18, 0x15	; 21
     bc8:	24 9f       	mul	r18, r20
     bca:	f0 01       	movw	r30, r0
     bcc:	25 9f       	mul	r18, r21
     bce:	f0 0d       	add	r31, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	e6 59       	subi	r30, 0x96	; 150
     bd4:	fe 4f       	sbci	r31, 0xFE	; 254
     bd6:	24 81       	ldd	r18, Z+4	; 0x04
     bd8:	35 81       	ldd	r19, Z+5	; 0x05
     bda:	82 17       	cp	r24, r18
     bdc:	93 07       	cpc	r25, r19
     bde:	d4 f2       	brlt	.-76     	; 0xb94 <render_vehicles+0x6a>
        }
    }
}

void render_vehicles() {
	for (int i = 0; i < MAX_VEHICLES; i++) {
     be0:	4f 5f       	subi	r20, 0xFF	; 255
     be2:	5f 4f       	sbci	r21, 0xFF	; 255
     be4:	45 30       	cpi	r20, 0x05	; 5
     be6:	51 05       	cpc	r21, r1
     be8:	0c f4       	brge	.+2      	; 0xbec <render_vehicles+0xc2>
     bea:	a6 cf       	rjmp	.-180    	; 0xb38 <render_vehicles+0xe>
					grid[y][x + j] = representation[j];
				}
			}
		}
	}
}
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	08 95       	ret

00000bf6 <reset_vehicles>:

void reset_vehicles() {
	for (int i = 0; i < MAX_VEHICLES; i++) {
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0a c0       	rjmp	.+20     	; 0xc10 <reset_vehicles+0x1a>
		vehicles[i].active = false;
     bfc:	25 e1       	ldi	r18, 0x15	; 21
     bfe:	28 9f       	mul	r18, r24
     c00:	f0 01       	movw	r30, r0
     c02:	29 9f       	mul	r18, r25
     c04:	f0 0d       	add	r31, r0
     c06:	11 24       	eor	r1, r1
     c08:	e6 59       	subi	r30, 0x96	; 150
     c0a:	fe 4f       	sbci	r31, 0xFE	; 254
     c0c:	12 8a       	std	Z+18, r1	; 0x12
		}
	}
}

void reset_vehicles() {
	for (int i = 0; i < MAX_VEHICLES; i++) {
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	85 30       	cpi	r24, 0x05	; 5
     c12:	91 05       	cpc	r25, r1
     c14:	9c f3       	brlt	.-26     	; 0xbfc <reset_vehicles+0x6>
		vehicles[i].active = false;
	}
}
     c16:	08 95       	ret

00000c18 <reset_game>:

//Game State

void reset_game() {
	// Reset the frog position
	frogX = GRID_WIDTH / 2;
     c18:	8a e0       	ldi	r24, 0x0A	; 10
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <frogX+0x1>
     c20:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <frogX>
	frogY = GRID_HEIGHT - 1;
     c24:	83 e0       	ldi	r24, 0x03	; 3
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <frogY+0x1>
     c2c:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <frogY>
	previousFrogY = frogY;
     c30:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <previousFrogY+0x1>
     c34:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <previousFrogY>

	// Reset the score, timer, and frogs at home count
	score = 0;
     c38:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <score+0x1>
     c3c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <score>
	timer = 20;
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a0 ea       	ldi	r26, 0xA0	; 160
     c46:	b1 e4       	ldi	r27, 0x41	; 65
     c48:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <timer>
     c4c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timer+0x1>
     c50:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <timer+0x2>
     c54:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <timer+0x3>
	
	if (frogsAtHome == 3){
     c58:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     c5c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
     c60:	03 97       	sbiw	r24, 0x03	; 3
     c62:	21 f4       	brne	.+8      	; 0xc6c <reset_game+0x54>
		frogsAtHome = 0;
     c64:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
     c68:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
	}

	reset_vehicles();
     c6c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <reset_vehicles>

	// Clear the game grid
	for (int y = 0; y < GRID_HEIGHT; y++) {
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	50 e0       	ldi	r21, 0x00	; 0
     c74:	15 c0       	rjmp	.+42     	; 0xca0 <reset_game+0x88>
		for (int x = 0; x < GRID_WIDTH; x++) {
			grid[y][x] = ' ';
     c76:	24 e1       	ldi	r18, 0x14	; 20
     c78:	24 9f       	mul	r18, r20
     c7a:	f0 01       	movw	r30, r0
     c7c:	25 9f       	mul	r18, r21
     c7e:	f0 0d       	add	r31, r0
     c80:	11 24       	eor	r1, r1
     c82:	e8 5e       	subi	r30, 0xE8	; 232
     c84:	fe 4f       	sbci	r31, 0xFE	; 254
     c86:	e8 0f       	add	r30, r24
     c88:	f9 1f       	adc	r31, r25
     c8a:	20 e2       	ldi	r18, 0x20	; 32
     c8c:	20 83       	st	Z, r18

	reset_vehicles();

	// Clear the game grid
	for (int y = 0; y < GRID_HEIGHT; y++) {
		for (int x = 0; x < GRID_WIDTH; x++) {
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <reset_game+0x7e>
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	84 31       	cpi	r24, 0x14	; 20
     c98:	91 05       	cpc	r25, r1
     c9a:	6c f3       	brlt	.-38     	; 0xc76 <reset_game+0x5e>
	}

	reset_vehicles();

	// Clear the game grid
	for (int y = 0; y < GRID_HEIGHT; y++) {
     c9c:	4f 5f       	subi	r20, 0xFF	; 255
     c9e:	5f 4f       	sbci	r21, 0xFF	; 255
     ca0:	44 30       	cpi	r20, 0x04	; 4
     ca2:	51 05       	cpc	r21, r1
     ca4:	b4 f3       	brlt	.-20     	; 0xc92 <reset_game+0x7a>
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	3a c0       	rjmp	.+116    	; 0xd20 <reset_game+0x108>
		}
	}

	// Re-initialize home positions
	for (int x = 0; x < GRID_WIDTH; x++) {
		if (x == 7) {
     cac:	27 30       	cpi	r18, 0x07	; 7
     cae:	31 05       	cpc	r19, r1
     cb0:	31 f4       	brne	.+12     	; 0xcbe <reset_game+0xa6>
			grid[0][x] = 'G';
     cb2:	87 e4       	ldi	r24, 0x47	; 71
     cb4:	f9 01       	movw	r30, r18
     cb6:	e8 5e       	subi	r30, 0xE8	; 232
     cb8:	fe 4f       	sbci	r31, 0xFE	; 254
     cba:	80 83       	st	Z, r24
     cbc:	2f c0       	rjmp	.+94     	; 0xd1c <reset_game+0x104>
			} else if (x == 9) {
     cbe:	29 30       	cpi	r18, 0x09	; 9
     cc0:	31 05       	cpc	r19, r1
     cc2:	31 f4       	brne	.+12     	; 0xcd0 <reset_game+0xb8>
			grid[0][x] = 'O';
     cc4:	8f e4       	ldi	r24, 0x4F	; 79
     cc6:	f9 01       	movw	r30, r18
     cc8:	e8 5e       	subi	r30, 0xE8	; 232
     cca:	fe 4f       	sbci	r31, 0xFE	; 254
     ccc:	80 83       	st	Z, r24
     cce:	26 c0       	rjmp	.+76     	; 0xd1c <reset_game+0x104>
			} else if (x == 11) {
     cd0:	2b 30       	cpi	r18, 0x0B	; 11
     cd2:	31 05       	cpc	r19, r1
     cd4:	31 f4       	brne	.+12     	; 0xce2 <reset_game+0xca>
			grid[0][x] = 'A';
     cd6:	81 e4       	ldi	r24, 0x41	; 65
     cd8:	f9 01       	movw	r30, r18
     cda:	e8 5e       	subi	r30, 0xE8	; 232
     cdc:	fe 4f       	sbci	r31, 0xFE	; 254
     cde:	80 83       	st	Z, r24
     ce0:	1d c0       	rjmp	.+58     	; 0xd1c <reset_game+0x104>
			} else if (x == 13) {
     ce2:	2d 30       	cpi	r18, 0x0D	; 13
     ce4:	31 05       	cpc	r19, r1
     ce6:	31 f4       	brne	.+12     	; 0xcf4 <reset_game+0xdc>
			grid[0][x] = 'L';
     ce8:	8c e4       	ldi	r24, 0x4C	; 76
     cea:	f9 01       	movw	r30, r18
     cec:	e8 5e       	subi	r30, 0xE8	; 232
     cee:	fe 4f       	sbci	r31, 0xFE	; 254
     cf0:	80 83       	st	Z, r24
     cf2:	14 c0       	rjmp	.+40     	; 0xd1c <reset_game+0x104>
			} else if (x % 2 == 0 || x % 3 == 0) {
     cf4:	20 ff       	sbrs	r18, 0
     cf6:	07 c0       	rjmp	.+14     	; 0xd06 <reset_game+0xee>
     cf8:	c9 01       	movw	r24, r18
     cfa:	63 e0       	ldi	r22, 0x03	; 3
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	0e 94 1d 12 	call	0x243a	; 0x243a <__divmodhi4>
     d02:	89 2b       	or	r24, r25
     d04:	31 f4       	brne	.+12     	; 0xd12 <reset_game+0xfa>
			grid[0][x] = '?';
     d06:	8f e3       	ldi	r24, 0x3F	; 63
     d08:	f9 01       	movw	r30, r18
     d0a:	e8 5e       	subi	r30, 0xE8	; 232
     d0c:	fe 4f       	sbci	r31, 0xFE	; 254
     d0e:	80 83       	st	Z, r24
     d10:	05 c0       	rjmp	.+10     	; 0xd1c <reset_game+0x104>
			} else {
			grid[0][x] = ' ';
     d12:	80 e2       	ldi	r24, 0x20	; 32
     d14:	f9 01       	movw	r30, r18
     d16:	e8 5e       	subi	r30, 0xE8	; 232
     d18:	fe 4f       	sbci	r31, 0xFE	; 254
     d1a:	80 83       	st	Z, r24
			grid[y][x] = ' ';
		}
	}

	// Re-initialize home positions
	for (int x = 0; x < GRID_WIDTH; x++) {
     d1c:	2f 5f       	subi	r18, 0xFF	; 255
     d1e:	3f 4f       	sbci	r19, 0xFF	; 255
     d20:	24 31       	cpi	r18, 0x14	; 20
     d22:	31 05       	cpc	r19, r1
     d24:	1c f2       	brlt	.-122    	; 0xcac <reset_game+0x94>
			grid[0][x] = '?';
			} else {
			grid[0][x] = ' ';
		}
	}
}
     d26:	08 95       	ret

00000d28 <game_init>:

void game_init() {
	reset_game();
     d28:	0e 94 0c 06 	call	0xc18	; 0xc18 <reset_game>
	// Clear grid
	for (int y = 1; y < GRID_HEIGHT; y++) {
     d2c:	41 e0       	ldi	r20, 0x01	; 1
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	15 c0       	rjmp	.+42     	; 0xd5c <game_init+0x34>
		for (int x = 0; x < GRID_WIDTH; x++) {
			grid[y][x] = ' ';
     d32:	24 e1       	ldi	r18, 0x14	; 20
     d34:	24 9f       	mul	r18, r20
     d36:	f0 01       	movw	r30, r0
     d38:	25 9f       	mul	r18, r21
     d3a:	f0 0d       	add	r31, r0
     d3c:	11 24       	eor	r1, r1
     d3e:	e8 5e       	subi	r30, 0xE8	; 232
     d40:	fe 4f       	sbci	r31, 0xFE	; 254
     d42:	e8 0f       	add	r30, r24
     d44:	f9 1f       	adc	r31, r25
     d46:	20 e2       	ldi	r18, 0x20	; 32
     d48:	20 83       	st	Z, r18

void game_init() {
	reset_game();
	// Clear grid
	for (int y = 1; y < GRID_HEIGHT; y++) {
		for (int x = 0; x < GRID_WIDTH; x++) {
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <game_init+0x2a>
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	84 31       	cpi	r24, 0x14	; 20
     d54:	91 05       	cpc	r25, r1
     d56:	6c f3       	brlt	.-38     	; 0xd32 <game_init+0xa>
}

void game_init() {
	reset_game();
	// Clear grid
	for (int y = 1; y < GRID_HEIGHT; y++) {
     d58:	4f 5f       	subi	r20, 0xFF	; 255
     d5a:	5f 4f       	sbci	r21, 0xFF	; 255
     d5c:	44 30       	cpi	r20, 0x04	; 4
     d5e:	51 05       	cpc	r21, r1
     d60:	b4 f3       	brlt	.-20     	; 0xd4e <game_init+0x26>
		for (int x = 0; x < GRID_WIDTH; x++) {
			grid[y][x] = ' ';
		}
	}
}
     d62:	08 95       	ret

00000d64 <display_live_score>:

//Scoring

void display_live_score(int score) {
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	ec 01       	movw	r28, r24
	lcd_goto_position(3, 0);
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	83 e0       	ldi	r24, 0x03	; 3
     d6e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
	lcd_write_int16(score); 
     d72:	ce 01       	movw	r24, r28
     d74:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_write_int16>
     d78:	2f ef       	ldi	r18, 0xFF	; 255
     d7a:	81 ee       	ldi	r24, 0xE1	; 225
     d7c:	94 e0       	ldi	r25, 0x04	; 4
     d7e:	21 50       	subi	r18, 0x01	; 1
     d80:	80 40       	sbci	r24, 0x00	; 0
     d82:	90 40       	sbci	r25, 0x00	; 0
     d84:	e1 f7       	brne	.-8      	; 0xd7e <display_live_score+0x1a>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <display_live_score+0x24>
     d88:	00 00       	nop
	_delay_ms(100);
}
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	08 95       	ret

00000d90 <display_final_score>:

void display_final_score(int score) {
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	ec 01       	movw	r28, r24
	lcd_clear_and_home();  
     d96:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_clear_and_home>
	lcd_goto_position(1, 4);
     d9a:	64 e0       	ldi	r22, 0x04	; 4
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
	lcd_write_string(PSTR("Score: "));
     da2:	8e ee       	ldi	r24, 0xEE	; 238
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_write_string>
	lcd_write_int16(score);  
     daa:	ce 01       	movw	r24, r28
     dac:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_write_int16>
     db0:	2f ef       	ldi	r18, 0xFF	; 255
     db2:	87 ea       	ldi	r24, 0xA7	; 167
     db4:	91 e6       	ldi	r25, 0x61	; 97
     db6:	21 50       	subi	r18, 0x01	; 1
     db8:	80 40       	sbci	r24, 0x00	; 0
     dba:	90 40       	sbci	r25, 0x00	; 0
     dbc:	e1 f7       	brne	.-8      	; 0xdb6 <display_final_score+0x26>
     dbe:	00 c0       	rjmp	.+0      	; 0xdc0 <display_final_score+0x30>
     dc0:	00 00       	nop
	_delay_ms(2000);
}
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <display_time>:

void display_time(int timer) {
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	ec 01       	movw	r28, r24
	lcd_goto_position(3, 17);
     dce:	61 e1       	ldi	r22, 0x11	; 17
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
	lcd_write_int16(timer);
     dd6:	ce 01       	movw	r24, r28
     dd8:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_write_int16>
     ddc:	2f ef       	ldi	r18, 0xFF	; 255
     dde:	81 ee       	ldi	r24, 0xE1	; 225
     de0:	94 e0       	ldi	r25, 0x04	; 4
     de2:	21 50       	subi	r18, 0x01	; 1
     de4:	80 40       	sbci	r24, 0x00	; 0
     de6:	90 40       	sbci	r25, 0x00	; 0
     de8:	e1 f7       	brne	.-8      	; 0xde2 <display_time+0x1a>
     dea:	00 c0       	rjmp	.+0      	; 0xdec <display_time+0x24>
     dec:	00 00       	nop
	_delay_ms(100);
}
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	08 95       	ret

00000df4 <handle_collision>:

//Collisions

void handle_collision() {
	lives -= 1;
     df4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lives>
     df8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lives+0x1>
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lives+0x1>
     e02:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lives>
	lcd_clear_and_home();
     e06:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_clear_and_home>
	lcd_goto_position(1, 5);
     e0a:	65 e0       	ldi	r22, 0x05	; 5
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
	lcd_write_string(PSTR("SPLAT!"));
     e12:	87 ee       	ldi	r24, 0xE7	; 231
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_write_string>
	play_tone(freq_E4);
     e1a:	8a e4       	ldi	r24, 0x4A	; 74
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
	play_tone(freq_C4);
     e22:	85 e0       	ldi	r24, 0x05	; 5
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
     e2a:	2f ef       	ldi	r18, 0xFF	; 255
     e2c:	83 ed       	ldi	r24, 0xD3	; 211
     e2e:	90 e3       	ldi	r25, 0x30	; 48
     e30:	21 50       	subi	r18, 0x01	; 1
     e32:	80 40       	sbci	r24, 0x00	; 0
     e34:	90 40       	sbci	r25, 0x00	; 0
     e36:	e1 f7       	brne	.-8      	; 0xe30 <handle_collision+0x3c>
     e38:	00 c0       	rjmp	.+0      	; 0xe3a <handle_collision+0x46>
     e3a:	00 00       	nop
	_delay_ms(1000); 
	game_init();  
     e3c:	0e 94 94 06 	call	0xd28	; 0xd28 <game_init>
     e40:	08 95       	ret

00000e42 <check_collisions>:
}

void check_collisions() {
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
	for (int i = 0; i < MAX_VEHICLES; i++) {
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	3e c0       	rjmp	.+124    	; 0xec8 <check_collisions+0x86>
		if (vehicles[i].active) {
     e4c:	85 e1       	ldi	r24, 0x15	; 21
     e4e:	86 9f       	mul	r24, r22
     e50:	f0 01       	movw	r30, r0
     e52:	87 9f       	mul	r24, r23
     e54:	f0 0d       	add	r31, r0
     e56:	11 24       	eor	r1, r1
     e58:	e6 59       	subi	r30, 0x96	; 150
     e5a:	fe 4f       	sbci	r31, 0xFE	; 254
     e5c:	82 89       	ldd	r24, Z+18	; 0x12
     e5e:	88 23       	and	r24, r24
     e60:	89 f1       	breq	.+98     	; 0xec4 <check_collisions+0x82>
			int x = vehicles[i].x;
     e62:	85 e1       	ldi	r24, 0x15	; 21
     e64:	86 9f       	mul	r24, r22
     e66:	f0 01       	movw	r30, r0
     e68:	87 9f       	mul	r24, r23
     e6a:	f0 0d       	add	r31, r0
     e6c:	11 24       	eor	r1, r1
     e6e:	e6 59       	subi	r30, 0x96	; 150
     e70:	fe 4f       	sbci	r31, 0xFE	; 254
     e72:	a0 81       	ld	r26, Z
     e74:	b1 81       	ldd	r27, Z+1	; 0x01
			int y = vehicles[i].y;
     e76:	c2 81       	ldd	r28, Z+2	; 0x02
     e78:	d3 81       	ldd	r29, Z+3	; 0x03
			for (int j = 0; j < vehicles[i].length; j++) {
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	15 c0       	rjmp	.+42     	; 0xeaa <check_collisions+0x68>
				if (frogX == x + j && frogY == y) {
     e80:	40 91 d9 01 	lds	r20, 0x01D9	; 0x8001d9 <frogX>
     e84:	50 91 da 01 	lds	r21, 0x01DA	; 0x8001da <frogX+0x1>
     e88:	9c 01       	movw	r18, r24
     e8a:	2a 0f       	add	r18, r26
     e8c:	3b 1f       	adc	r19, r27
     e8e:	24 17       	cp	r18, r20
     e90:	35 07       	cpc	r19, r21
     e92:	51 f4       	brne	.+20     	; 0xea8 <check_collisions+0x66>
     e94:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <frogY>
     e98:	30 91 d8 01 	lds	r19, 0x01D8	; 0x8001d8 <frogY+0x1>
     e9c:	c2 17       	cp	r28, r18
     e9e:	d3 07       	cpc	r29, r19
     ea0:	19 f4       	brne	.+6      	; 0xea8 <check_collisions+0x66>
					handle_collision();  
     ea2:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <handle_collision>
					return;  
     ea6:	4b c0       	rjmp	.+150    	; 0xf3e <check_collisions+0xfc>
void check_collisions() {
	for (int i = 0; i < MAX_VEHICLES; i++) {
		if (vehicles[i].active) {
			int x = vehicles[i].x;
			int y = vehicles[i].y;
			for (int j = 0; j < vehicles[i].length; j++) {
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	25 e1       	ldi	r18, 0x15	; 21
     eac:	26 9f       	mul	r18, r22
     eae:	f0 01       	movw	r30, r0
     eb0:	27 9f       	mul	r18, r23
     eb2:	f0 0d       	add	r31, r0
     eb4:	11 24       	eor	r1, r1
     eb6:	e6 59       	subi	r30, 0x96	; 150
     eb8:	fe 4f       	sbci	r31, 0xFE	; 254
     eba:	24 81       	ldd	r18, Z+4	; 0x04
     ebc:	35 81       	ldd	r19, Z+5	; 0x05
     ebe:	82 17       	cp	r24, r18
     ec0:	93 07       	cpc	r25, r19
     ec2:	f4 f2       	brlt	.-68     	; 0xe80 <check_collisions+0x3e>
	_delay_ms(1000); 
	game_init();  
}

void check_collisions() {
	for (int i = 0; i < MAX_VEHICLES; i++) {
     ec4:	6f 5f       	subi	r22, 0xFF	; 255
     ec6:	7f 4f       	sbci	r23, 0xFF	; 255
     ec8:	65 30       	cpi	r22, 0x05	; 5
     eca:	71 05       	cpc	r23, r1
     ecc:	0c f4       	brge	.+2      	; 0xed0 <check_collisions+0x8e>
     ece:	be cf       	rjmp	.-132    	; 0xe4c <check_collisions+0xa>
			}
		}
	}

	// Check for victory
	if (frogY == 0 && grid[frogY][frogX] == ' ') {
     ed0:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <frogY>
     ed4:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <frogY+0x1>
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	89 f5       	brne	.+98     	; 0xf3e <check_collisions+0xfc>
     edc:	20 91 d9 01 	lds	r18, 0x01D9	; 0x8001d9 <frogX>
     ee0:	30 91 da 01 	lds	r19, 0x01DA	; 0x8001da <frogX+0x1>
     ee4:	44 e1       	ldi	r20, 0x14	; 20
     ee6:	48 9f       	mul	r20, r24
     ee8:	f0 01       	movw	r30, r0
     eea:	49 9f       	mul	r20, r25
     eec:	f0 0d       	add	r31, r0
     eee:	11 24       	eor	r1, r1
     ef0:	e8 5e       	subi	r30, 0xE8	; 232
     ef2:	fe 4f       	sbci	r31, 0xFE	; 254
     ef4:	e2 0f       	add	r30, r18
     ef6:	f3 1f       	adc	r31, r19
     ef8:	80 81       	ld	r24, Z
     efa:	80 32       	cpi	r24, 0x20	; 32
     efc:	01 f5       	brne	.+64     	; 0xf3e <check_collisions+0xfc>
		// Victory
		lcd_clear_and_home();
     efe:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_clear_and_home>
		lcd_goto_position(1, 6);
     f02:	66 e0       	ldi	r22, 0x06	; 6
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
		lcd_write_string(PSTR("Victory!"));
     f0a:	8e ed       	ldi	r24, 0xDE	; 222
     f0c:	91 e0       	ldi	r25, 0x01	; 1
     f0e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_write_string>
		play_tone(freq_C4);
     f12:	85 e0       	ldi	r24, 0x05	; 5
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
		play_tone(freq_C4);
     f1a:	85 e0       	ldi	r24, 0x05	; 5
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
		play_tone(freq_C4);
     f22:	85 e0       	ldi	r24, 0x05	; 5
     f24:	91 e0       	ldi	r25, 0x01	; 1
     f26:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
		play_tone(freq_E4);
     f2a:	8a e4       	ldi	r24, 0x4A	; 74
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
		play_tone(freq_C4);
     f32:	85 e0       	ldi	r24, 0x05	; 5
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
		game_init();  // Reset the game
     f3a:	0e 94 94 06 	call	0xd28	; 0xd28 <game_init>
		return;
	}
}
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <update_game_state>:

//********************************************************************************************************
//*					Task 1 - Function 2 - Indefinite Frogger											 *
//********************************************************************************************************

void update_game_state(char input) {
     f44:	ef 92       	push	r14
     f46:	ff 92       	push	r15
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	cf 93       	push	r28
     f4e:	c8 2f       	mov	r28, r24
    // Spawn vehicles and update their positions
    if (rand() % 3 == 0) {
     f50:	0e 94 0a 13 	call	0x2614	; 0x2614 <rand>
     f54:	63 e0       	ldi	r22, 0x03	; 3
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	0e 94 1d 12 	call	0x243a	; 0x243a <__divmodhi4>
     f5c:	89 2b       	or	r24, r25
     f5e:	11 f4       	brne	.+4      	; 0xf64 <update_game_state+0x20>
        spawn_vehicle();
     f60:	0e 94 80 04 	call	0x900	; 0x900 <spawn_vehicle>
    }
    update_vehicles();
     f64:	0e 94 33 05 	call	0xa66	; 0xa66 <update_vehicles>

    // Clear grid
    for (int y = 0; y < GRID_HEIGHT; y++) {
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	15 c0       	rjmp	.+42     	; 0xf98 <update_game_state+0x54>
        for (int x = 0; x < GRID_WIDTH; x++) {
            grid[y][x] = ' ';
     f6e:	24 e1       	ldi	r18, 0x14	; 20
     f70:	24 9f       	mul	r18, r20
     f72:	f0 01       	movw	r30, r0
     f74:	25 9f       	mul	r18, r21
     f76:	f0 0d       	add	r31, r0
     f78:	11 24       	eor	r1, r1
     f7a:	e8 5e       	subi	r30, 0xE8	; 232
     f7c:	fe 4f       	sbci	r31, 0xFE	; 254
     f7e:	e8 0f       	add	r30, r24
     f80:	f9 1f       	adc	r31, r25
     f82:	20 e2       	ldi	r18, 0x20	; 32
     f84:	20 83       	st	Z, r18
    }
    update_vehicles();

    // Clear grid
    for (int y = 0; y < GRID_HEIGHT; y++) {
        for (int x = 0; x < GRID_WIDTH; x++) {
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <update_game_state+0x4a>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	84 31       	cpi	r24, 0x14	; 20
     f90:	91 05       	cpc	r25, r1
     f92:	6c f3       	brlt	.-38     	; 0xf6e <update_game_state+0x2a>
        spawn_vehicle();
    }
    update_vehicles();

    // Clear grid
    for (int y = 0; y < GRID_HEIGHT; y++) {
     f94:	4f 5f       	subi	r20, 0xFF	; 255
     f96:	5f 4f       	sbci	r21, 0xFF	; 255
     f98:	44 30       	cpi	r20, 0x04	; 4
     f9a:	51 05       	cpc	r21, r1
     f9c:	b4 f3       	brlt	.-20     	; 0xf8a <update_game_state+0x46>
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	10 c0       	rjmp	.+32     	; 0xfc4 <update_game_state+0x80>
        }
    }
    
    // Re-initialize home positions
    for (int x = 0; x < GRID_WIDTH; x++) {
        if (x % 2 == 0 || x % 3 == 0) {
     fa4:	20 ff       	sbrs	r18, 0
     fa6:	07 c0       	rjmp	.+14     	; 0xfb6 <update_game_state+0x72>
     fa8:	c9 01       	movw	r24, r18
     faa:	63 e0       	ldi	r22, 0x03	; 3
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	0e 94 1d 12 	call	0x243a	; 0x243a <__divmodhi4>
     fb2:	89 2b       	or	r24, r25
     fb4:	29 f4       	brne	.+10     	; 0xfc0 <update_game_state+0x7c>
            grid[0][x] = '?';
     fb6:	8f e3       	ldi	r24, 0x3F	; 63
     fb8:	f9 01       	movw	r30, r18
     fba:	e8 5e       	subi	r30, 0xE8	; 232
     fbc:	fe 4f       	sbci	r31, 0xFE	; 254
     fbe:	80 83       	st	Z, r24
            grid[y][x] = ' ';
        }
    }
    
    // Re-initialize home positions
    for (int x = 0; x < GRID_WIDTH; x++) {
     fc0:	2f 5f       	subi	r18, 0xFF	; 255
     fc2:	3f 4f       	sbci	r19, 0xFF	; 255
     fc4:	24 31       	cpi	r18, 0x14	; 20
     fc6:	31 05       	cpc	r19, r1
     fc8:	6c f3       	brlt	.-38     	; 0xfa4 <update_game_state+0x60>
            grid[0][x] = '?';
        } 
    }
    
    // Update frog position based on input
    int newFrogX = frogX;
     fca:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <frogX>
     fce:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <frogX+0x1>
    int newFrogY = frogY;
     fd2:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <frogY>
     fd6:	30 91 d8 01 	lds	r19, 0x01D8	; 0x8001d8 <frogY+0x1>
    if (input == '8' && frogY > 0) newFrogY--;  // Up
     fda:	c8 33       	cpi	r28, 0x38	; 56
     fdc:	39 f4       	brne	.+14     	; 0xfec <update_game_state+0xa8>
     fde:	12 16       	cp	r1, r18
     fe0:	13 06       	cpc	r1, r19
     fe2:	34 f4       	brge	.+12     	; 0xff0 <update_game_state+0xac>
     fe4:	89 01       	movw	r16, r18
     fe6:	01 50       	subi	r16, 0x01	; 1
     fe8:	11 09       	sbc	r17, r1
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <update_game_state+0xae>
        } 
    }
    
    // Update frog position based on input
    int newFrogX = frogX;
    int newFrogY = frogY;
     fec:	89 01       	movw	r16, r18
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <update_game_state+0xae>
     ff0:	89 01       	movw	r16, r18
    if (input == '8' && frogY > 0) newFrogY--;  // Up
    if (input == '0' && frogY < GRID_HEIGHT - 1) newFrogY++;  // Down
     ff2:	c0 33       	cpi	r28, 0x30	; 48
     ff4:	29 f4       	brne	.+10     	; 0x1000 <update_game_state+0xbc>
     ff6:	23 30       	cpi	r18, 0x03	; 3
     ff8:	31 05       	cpc	r19, r1
     ffa:	14 f4       	brge	.+4      	; 0x1000 <update_game_state+0xbc>
     ffc:	0f 5f       	subi	r16, 0xFF	; 255
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    if (input == '*' && frogX > 0) newFrogX--; // Left
    1000:	ca 32       	cpi	r28, 0x2A	; 42
    1002:	41 f4       	brne	.+16     	; 0x1014 <update_game_state+0xd0>
    1004:	18 16       	cp	r1, r24
    1006:	19 06       	cpc	r1, r25
    1008:	3c f4       	brge	.+14     	; 0x1018 <update_game_state+0xd4>
    100a:	7c 01       	movw	r14, r24
    100c:	21 e0       	ldi	r18, 0x01	; 1
    100e:	e2 1a       	sub	r14, r18
    1010:	f1 08       	sbc	r15, r1
    1012:	03 c0       	rjmp	.+6      	; 0x101a <update_game_state+0xd6>
            grid[0][x] = '?';
        } 
    }
    
    // Update frog position based on input
    int newFrogX = frogX;
    1014:	7c 01       	movw	r14, r24
    1016:	01 c0       	rjmp	.+2      	; 0x101a <update_game_state+0xd6>
    1018:	7c 01       	movw	r14, r24
    int newFrogY = frogY;
    if (input == '8' && frogY > 0) newFrogY--;  // Up
    if (input == '0' && frogY < GRID_HEIGHT - 1) newFrogY++;  // Down
    if (input == '*' && frogX > 0) newFrogX--; // Left
    if (input == '#' && frogX < GRID_WIDTH - 1) newFrogX++;  // Right
    101a:	c3 32       	cpi	r28, 0x23	; 35
    101c:	29 f4       	brne	.+10     	; 0x1028 <update_game_state+0xe4>
    101e:	43 97       	sbiw	r24, 0x13	; 19
    1020:	1c f4       	brge	.+6      	; 0x1028 <update_game_state+0xe4>
    1022:	8f ef       	ldi	r24, 0xFF	; 255
    1024:	e8 1a       	sub	r14, r24
    1026:	f8 0a       	sbc	r15, r24
    
    if(keypressed()) play_tone(freq_F4);
    1028:	0e 94 66 02 	call	0x4cc	; 0x4cc <keypressed>
    102c:	88 23       	and	r24, r24
    102e:	21 f0       	breq	.+8      	; 0x1038 <update_game_state+0xf4>
    1030:	8d e5       	ldi	r24, 0x5D	; 93
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
    
    // Check if the new position is a wall
    if (grid[newFrogY][newFrogX] == '?') {
    1038:	84 e1       	ldi	r24, 0x14	; 20
    103a:	80 9f       	mul	r24, r16
    103c:	f0 01       	movw	r30, r0
    103e:	81 9f       	mul	r24, r17
    1040:	f0 0d       	add	r31, r0
    1042:	11 24       	eor	r1, r1
    1044:	e8 5e       	subi	r30, 0xE8	; 232
    1046:	fe 4f       	sbci	r31, 0xFE	; 254
    1048:	ee 0d       	add	r30, r14
    104a:	ff 1d       	adc	r31, r15
    104c:	80 81       	ld	r24, Z
    104e:	8f 33       	cpi	r24, 0x3F	; 63
    1050:	19 f4       	brne	.+6      	; 0x1058 <update_game_state+0x114>
        handle_collision();  // Call the function if a wall is hit
    1052:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <handle_collision>
        return;  // Exit early from update_game_state
    1056:	20 c0       	rjmp	.+64     	; 0x1098 <update_game_state+0x154>
    }

    // If not, update the frog's position
    frogX = newFrogX;
    1058:	f0 92 da 01 	sts	0x01DA, r15	; 0x8001da <frogX+0x1>
    105c:	e0 92 d9 01 	sts	0x01D9, r14	; 0x8001d9 <frogX>
    frogY = newFrogY;
    1060:	10 93 d8 01 	sts	0x01D8, r17	; 0x8001d8 <frogY+0x1>
    1064:	00 93 d7 01 	sts	0x01D7, r16	; 0x8001d7 <frogY>
    
    // Check for collisions
    check_collisions();  
    1068:	0e 94 21 07 	call	0xe42	; 0xe42 <check_collisions>

    render_vehicles();
    106c:	0e 94 95 05 	call	0xb2a	; 0xb2a <render_vehicles>
    
    // Update grid with new positions
    grid[frogY][frogX] = '&';
    1070:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <frogY>
    1074:	30 91 d8 01 	lds	r19, 0x01D8	; 0x8001d8 <frogY+0x1>
    1078:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <frogX>
    107c:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <frogX+0x1>
    1080:	44 e1       	ldi	r20, 0x14	; 20
    1082:	42 9f       	mul	r20, r18
    1084:	f0 01       	movw	r30, r0
    1086:	43 9f       	mul	r20, r19
    1088:	f0 0d       	add	r31, r0
    108a:	11 24       	eor	r1, r1
    108c:	e8 5e       	subi	r30, 0xE8	; 232
    108e:	fe 4f       	sbci	r31, 0xFE	; 254
    1090:	e8 0f       	add	r30, r24
    1092:	f9 1f       	adc	r31, r25
    1094:	86 e2       	ldi	r24, 0x26	; 38
    1096:	80 83       	st	Z, r24
}
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	ff 90       	pop	r15
    10a0:	ef 90       	pop	r14
    10a2:	08 95       	ret

000010a4 <render_game>:

void render_game() {
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    lcd_home();
    10ac:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_home>
    // Render home row
    lcd_goto_position(0, 0);  // Set the cursor position at the beginning of the first row
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
    for (int x = 0; x < GRID_WIDTH; x++) {
    10b8:	c0 e0       	ldi	r28, 0x00	; 0
    10ba:	d0 e0       	ldi	r29, 0x00	; 0
    10bc:	11 c0       	rjmp	.+34     	; 0x10e0 <render_game+0x3c>
        if (x % 2 == 0 || x % 3 == 0) {
    10be:	c0 ff       	sbrs	r28, 0
    10c0:	07 c0       	rjmp	.+14     	; 0x10d0 <render_game+0x2c>
    10c2:	ce 01       	movw	r24, r28
    10c4:	63 e0       	ldi	r22, 0x03	; 3
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	0e 94 1d 12 	call	0x243a	; 0x243a <__divmodhi4>
    10cc:	89 2b       	or	r24, r25
    10ce:	21 f4       	brne	.+8      	; 0x10d8 <render_game+0x34>
            lcd_write_data(0xFF);  // Write block character to LCD
    10d0:	8f ef       	ldi	r24, 0xFF	; 255
    10d2:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <render_game+0x3a>
        } else {
            lcd_write_data(' ');  // Write space to LCD
    10d8:	80 e2       	ldi	r24, 0x20	; 32
    10da:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>

void render_game() {
    lcd_home();
    // Render home row
    lcd_goto_position(0, 0);  // Set the cursor position at the beginning of the first row
    for (int x = 0; x < GRID_WIDTH; x++) {
    10de:	21 96       	adiw	r28, 0x01	; 1
    10e0:	c4 31       	cpi	r28, 0x14	; 20
    10e2:	d1 05       	cpc	r29, r1
    10e4:	64 f3       	brlt	.-40     	; 0x10be <render_game+0x1a>
    10e6:	01 e0       	ldi	r16, 0x01	; 1
    10e8:	10 e0       	ldi	r17, 0x00	; 0
    10ea:	1a c0       	rjmp	.+52     	; 0x1120 <render_game+0x7c>
            lcd_write_data(' ');  // Write space to LCD
        }
    }
    // Render the rest of the grid
    for (int y = 1; y < GRID_HEIGHT; y++) {
        lcd_goto_position(y, 0);  
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	80 2f       	mov	r24, r16
    10f0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
        for (int x = 0; x < GRID_WIDTH; x++) {
    10f4:	c0 e0       	ldi	r28, 0x00	; 0
    10f6:	d0 e0       	ldi	r29, 0x00	; 0
    10f8:	0e c0       	rjmp	.+28     	; 0x1116 <render_game+0x72>
            lcd_write_data(grid[y][x]);
    10fa:	84 e1       	ldi	r24, 0x14	; 20
    10fc:	80 9f       	mul	r24, r16
    10fe:	f0 01       	movw	r30, r0
    1100:	81 9f       	mul	r24, r17
    1102:	f0 0d       	add	r31, r0
    1104:	11 24       	eor	r1, r1
    1106:	e8 5e       	subi	r30, 0xE8	; 232
    1108:	fe 4f       	sbci	r31, 0xFE	; 254
    110a:	ec 0f       	add	r30, r28
    110c:	fd 1f       	adc	r31, r29
    110e:	80 81       	ld	r24, Z
    1110:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
        }
    }
    // Render the rest of the grid
    for (int y = 1; y < GRID_HEIGHT; y++) {
        lcd_goto_position(y, 0);  
        for (int x = 0; x < GRID_WIDTH; x++) {
    1114:	21 96       	adiw	r28, 0x01	; 1
    1116:	c4 31       	cpi	r28, 0x14	; 20
    1118:	d1 05       	cpc	r29, r1
    111a:	7c f3       	brlt	.-34     	; 0x10fa <render_game+0x56>
        } else {
            lcd_write_data(' ');  // Write space to LCD
        }
    }
    // Render the rest of the grid
    for (int y = 1; y < GRID_HEIGHT; y++) {
    111c:	0f 5f       	subi	r16, 0xFF	; 255
    111e:	1f 4f       	sbci	r17, 0xFF	; 255
    1120:	04 30       	cpi	r16, 0x04	; 4
    1122:	11 05       	cpc	r17, r1
    1124:	1c f3       	brlt	.-58     	; 0x10ec <render_game+0x48>
        for (int x = 0; x < GRID_WIDTH; x++) {
            lcd_write_data(grid[y][x]);
        }
    }
	// Render the frog last, so it appears on top of other elements
    lcd_goto_position(frogY, frogX);
    1126:	60 91 d9 01 	lds	r22, 0x01D9	; 0x8001d9 <frogX>
    112a:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <frogY>
    112e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
    lcd_write_data('&'); 
    1132:	86 e2       	ldi	r24, 0x26	; 38
    1134:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
}
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	08 95       	ret

00001142 <play_frogger>:

void play_frogger(void) {
    1142:	cf 93       	push	r28
    seed += 9;
    1144:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <seed>
    1148:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <seed+0x1>
    114c:	09 96       	adiw	r24, 0x09	; 9
    114e:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <seed+0x1>
    1152:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <seed>
    game_init();
    1156:	0e 94 94 06 	call	0xd28	; 0xd28 <game_init>
    while(1) {
        char input = get_keypad_input();
    115a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <get_keypad_input>
    115e:	c8 2f       	mov	r28, r24
        update_game_state(input);
    1160:	0e 94 a2 07 	call	0xf44	; 0xf44 <update_game_state>
        render_game();
    1164:	0e 94 52 08 	call	0x10a4	; 0x10a4 <render_game>
    1168:	2f ef       	ldi	r18, 0xFF	; 255
    116a:	81 ee       	ldi	r24, 0xE1	; 225
    116c:	94 e0       	ldi	r25, 0x04	; 4
    116e:	21 50       	subi	r18, 0x01	; 1
    1170:	80 40       	sbci	r24, 0x00	; 0
    1172:	90 40       	sbci	r25, 0x00	; 0
    1174:	e1 f7       	brne	.-8      	; 0x116e <play_frogger+0x2c>
    1176:	00 c0       	rjmp	.+0      	; 0x1178 <play_frogger+0x36>
    1178:	00 00       	nop
        _delay_ms(100);
        if (input == '1') {  // '1' is the key to exit back to the menu
    117a:	c1 33       	cpi	r28, 0x31	; 49
    117c:	71 f7       	brne	.-36     	; 0x115a <play_frogger+0x18>
            seed -= 3;
    117e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <seed>
    1182:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <seed+0x1>
    1186:	03 97       	sbiw	r24, 0x03	; 3
    1188:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <seed+0x1>
    118c:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <seed>
            lives = 3;
    1190:	83 e0       	ldi	r24, 0x03	; 3
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lives+0x1>
    1198:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lives>
            display_menu();
    119c:	0e 94 ed 02 	call	0x5da	; 0x5da <display_menu>
            return; 
        }
    }
}
    11a0:	cf 91       	pop	r28
    11a2:	08 95       	ret

000011a4 <update_game_state_scored>:
//********************************************************************************************************
//*					Task 2 - Function 2 - Scored Frogger					  						     *
//********************************************************************************************************

// Spawn vehicles and update their positions
void update_game_state_scored(char input, int* score) {
    11a4:	cf 92       	push	r12
    11a6:	df 92       	push	r13
    11a8:	ef 92       	push	r14
    11aa:	ff 92       	push	r15
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	18 2f       	mov	r17, r24
    11b4:	eb 01       	movw	r28, r22
    if (rand() % 2 == 0) {  // 10% chance to spawn a new vehicle each frame
    11b6:	0e 94 0a 13 	call	0x2614	; 0x2614 <rand>
    11ba:	80 ff       	sbrs	r24, 0
        spawn_vehicle();
    11bc:	0e 94 80 04 	call	0x900	; 0x900 <spawn_vehicle>
    }
    update_vehicles();
    11c0:	0e 94 33 05 	call	0xa66	; 0xa66 <update_vehicles>

    // Clear grid but preserve 'X' characters in the scoring row (row 0)
    for (int y = 0; y < GRID_HEIGHT; y++) {
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	32 c0       	rjmp	.+100    	; 0x122e <update_game_state_scored+0x8a>
        for (int x = 0; x < GRID_WIDTH; x++) {
            if (y != 0) {  
    11ca:	21 15       	cp	r18, r1
    11cc:	31 05       	cpc	r19, r1
    11ce:	69 f0       	breq	.+26     	; 0x11ea <update_game_state_scored+0x46>
                grid[y][x] = ' ';  
    11d0:	44 e1       	ldi	r20, 0x14	; 20
    11d2:	42 9f       	mul	r20, r18
    11d4:	f0 01       	movw	r30, r0
    11d6:	43 9f       	mul	r20, r19
    11d8:	f0 0d       	add	r31, r0
    11da:	11 24       	eor	r1, r1
    11dc:	e8 5e       	subi	r30, 0xE8	; 232
    11de:	fe 4f       	sbci	r31, 0xFE	; 254
    11e0:	e8 0f       	add	r30, r24
    11e2:	f9 1f       	adc	r31, r25
    11e4:	40 e2       	ldi	r20, 0x20	; 32
    11e6:	40 83       	st	Z, r20
    11e8:	19 c0       	rjmp	.+50     	; 0x121c <update_game_state_scored+0x78>
            } else {
                if (grid[y][x] != 'X') {
    11ea:	44 e1       	ldi	r20, 0x14	; 20
    11ec:	42 9f       	mul	r20, r18
    11ee:	f0 01       	movw	r30, r0
    11f0:	43 9f       	mul	r20, r19
    11f2:	f0 0d       	add	r31, r0
    11f4:	11 24       	eor	r1, r1
    11f6:	e8 5e       	subi	r30, 0xE8	; 232
    11f8:	fe 4f       	sbci	r31, 0xFE	; 254
    11fa:	e8 0f       	add	r30, r24
    11fc:	f9 1f       	adc	r31, r25
    11fe:	40 81       	ld	r20, Z
    1200:	48 35       	cpi	r20, 0x58	; 88
    1202:	61 f0       	breq	.+24     	; 0x121c <update_game_state_scored+0x78>
                    grid[y][x] = ' ';
    1204:	44 e1       	ldi	r20, 0x14	; 20
    1206:	42 9f       	mul	r20, r18
    1208:	f0 01       	movw	r30, r0
    120a:	43 9f       	mul	r20, r19
    120c:	f0 0d       	add	r31, r0
    120e:	11 24       	eor	r1, r1
    1210:	e8 5e       	subi	r30, 0xE8	; 232
    1212:	fe 4f       	sbci	r31, 0xFE	; 254
    1214:	e8 0f       	add	r30, r24
    1216:	f9 1f       	adc	r31, r25
    1218:	40 e2       	ldi	r20, 0x20	; 32
    121a:	40 83       	st	Z, r20
    }
    update_vehicles();

    // Clear grid but preserve 'X' characters in the scoring row (row 0)
    for (int y = 0; y < GRID_HEIGHT; y++) {
        for (int x = 0; x < GRID_WIDTH; x++) {
    121c:	01 96       	adiw	r24, 0x01	; 1
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <update_game_state_scored+0x80>
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	84 31       	cpi	r24, 0x14	; 20
    1226:	91 05       	cpc	r25, r1
    1228:	84 f2       	brlt	.-96     	; 0x11ca <update_game_state_scored+0x26>
        spawn_vehicle();
    }
    update_vehicles();

    // Clear grid but preserve 'X' characters in the scoring row (row 0)
    for (int y = 0; y < GRID_HEIGHT; y++) {
    122a:	2f 5f       	subi	r18, 0xFF	; 255
    122c:	3f 4f       	sbci	r19, 0xFF	; 255
    122e:	24 30       	cpi	r18, 0x04	; 4
    1230:	31 05       	cpc	r19, r1
    1232:	b4 f3       	brlt	.-20     	; 0x1220 <update_game_state_scored+0x7c>
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	16 c0       	rjmp	.+44     	; 0x1266 <update_game_state_scored+0xc2>
        }
    }

    // Re-initialize home positions
    for (int x = 0; x < GRID_WIDTH; x++) {
        if (x % 2 == 0 || x % 3 == 0) {
    123a:	20 ff       	sbrs	r18, 0
    123c:	07 c0       	rjmp	.+14     	; 0x124c <update_game_state_scored+0xa8>
    123e:	c9 01       	movw	r24, r18
    1240:	63 e0       	ldi	r22, 0x03	; 3
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	0e 94 1d 12 	call	0x243a	; 0x243a <__divmodhi4>
    1248:	89 2b       	or	r24, r25
    124a:	31 f4       	brne	.+12     	; 0x1258 <update_game_state_scored+0xb4>
            grid[0][x] = '?';
    124c:	8f e3       	ldi	r24, 0x3F	; 63
    124e:	f9 01       	movw	r30, r18
    1250:	e8 5e       	subi	r30, 0xE8	; 232
    1252:	fe 4f       	sbci	r31, 0xFE	; 254
    1254:	80 83       	st	Z, r24
    1256:	05 c0       	rjmp	.+10     	; 0x1262 <update_game_state_scored+0xbe>
        } else {
            grid[3][x] = ' ';
    1258:	80 e2       	ldi	r24, 0x20	; 32
    125a:	f9 01       	movw	r30, r18
    125c:	e8 5e       	subi	r30, 0xE8	; 232
    125e:	fe 4f       	sbci	r31, 0xFE	; 254
    1260:	84 af       	std	Z+60, r24	; 0x3c
            }
        }
    }

    // Re-initialize home positions
    for (int x = 0; x < GRID_WIDTH; x++) {
    1262:	2f 5f       	subi	r18, 0xFF	; 255
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    1266:	24 31       	cpi	r18, 0x14	; 20
    1268:	31 05       	cpc	r19, r1
    126a:	3c f3       	brlt	.-50     	; 0x123a <update_game_state_scored+0x96>
            grid[3][x] = ' ';
        }
    }

    // Update frog position based on input and play sound
    int newFrogX = frogX;
    126c:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <frogX>
    1270:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <frogX+0x1>
    int newFrogY = frogY;
    1274:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <frogY>
    1278:	30 91 d8 01 	lds	r19, 0x01D8	; 0x8001d8 <frogY+0x1>
    if (input == '8' && frogY > 0) newFrogY--;  
    127c:	18 33       	cpi	r17, 0x38	; 56
    127e:	41 f4       	brne	.+16     	; 0x1290 <update_game_state_scored+0xec>
    1280:	12 16       	cp	r1, r18
    1282:	13 06       	cpc	r1, r19
    1284:	3c f4       	brge	.+14     	; 0x1294 <update_game_state_scored+0xf0>
    1286:	79 01       	movw	r14, r18
    1288:	41 e0       	ldi	r20, 0x01	; 1
    128a:	e4 1a       	sub	r14, r20
    128c:	f1 08       	sbc	r15, r1
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <update_game_state_scored+0xf2>
        }
    }

    // Update frog position based on input and play sound
    int newFrogX = frogX;
    int newFrogY = frogY;
    1290:	79 01       	movw	r14, r18
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <update_game_state_scored+0xf2>
    1294:	79 01       	movw	r14, r18
    if (input == '8' && frogY > 0) newFrogY--;  
    if (input == '0' && frogY < GRID_HEIGHT - 1) newFrogY++;  
    1296:	10 33       	cpi	r17, 0x30	; 48
    1298:	31 f4       	brne	.+12     	; 0x12a6 <update_game_state_scored+0x102>
    129a:	23 30       	cpi	r18, 0x03	; 3
    129c:	31 05       	cpc	r19, r1
    129e:	1c f4       	brge	.+6      	; 0x12a6 <update_game_state_scored+0x102>
    12a0:	2f ef       	ldi	r18, 0xFF	; 255
    12a2:	e2 1a       	sub	r14, r18
    12a4:	f2 0a       	sbc	r15, r18
    if (input == '*' && frogX > 0) newFrogX--;  
    12a6:	1a 32       	cpi	r17, 0x2A	; 42
    12a8:	41 f4       	brne	.+16     	; 0x12ba <update_game_state_scored+0x116>
    12aa:	18 16       	cp	r1, r24
    12ac:	19 06       	cpc	r1, r25
    12ae:	3c f4       	brge	.+14     	; 0x12be <update_game_state_scored+0x11a>
    12b0:	6c 01       	movw	r12, r24
    12b2:	41 e0       	ldi	r20, 0x01	; 1
    12b4:	c4 1a       	sub	r12, r20
    12b6:	d1 08       	sbc	r13, r1
    12b8:	03 c0       	rjmp	.+6      	; 0x12c0 <update_game_state_scored+0x11c>
            grid[3][x] = ' ';
        }
    }

    // Update frog position based on input and play sound
    int newFrogX = frogX;
    12ba:	6c 01       	movw	r12, r24
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <update_game_state_scored+0x11c>
    12be:	6c 01       	movw	r12, r24
    int newFrogY = frogY;
    if (input == '8' && frogY > 0) newFrogY--;  
    if (input == '0' && frogY < GRID_HEIGHT - 1) newFrogY++;  
    if (input == '*' && frogX > 0) newFrogX--;  
    if (input == '#' && frogX < GRID_WIDTH - 1) newFrogX++;  
    12c0:	13 32       	cpi	r17, 0x23	; 35
    12c2:	29 f4       	brne	.+10     	; 0x12ce <update_game_state_scored+0x12a>
    12c4:	43 97       	sbiw	r24, 0x13	; 19
    12c6:	1c f4       	brge	.+6      	; 0x12ce <update_game_state_scored+0x12a>
    12c8:	8f ef       	ldi	r24, 0xFF	; 255
    12ca:	c8 1a       	sub	r12, r24
    12cc:	d8 0a       	sbc	r13, r24
    if(keypressed()) play_tone(freq_F4);
    12ce:	0e 94 66 02 	call	0x4cc	; 0x4cc <keypressed>
    12d2:	88 23       	and	r24, r24
    12d4:	21 f0       	breq	.+8      	; 0x12de <update_game_state_scored+0x13a>
    12d6:	8d e5       	ldi	r24, 0x5D	; 93
    12d8:	91 e0       	ldi	r25, 0x01	; 1
    12da:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>

    // Check if the frog has entered a new row
    if (newFrogY != previousFrogY) {
    12de:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <previousFrogY>
    12e2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <previousFrogY+0x1>
    12e6:	e8 16       	cp	r14, r24
    12e8:	f9 06       	cpc	r15, r25
    12ea:	61 f0       	breq	.+24     	; 0x1304 <update_game_state_scored+0x160>
        if (newFrogY != 0) {
    12ec:	e1 14       	cp	r14, r1
    12ee:	f1 04       	cpc	r15, r1
    12f0:	29 f0       	breq	.+10     	; 0x12fc <update_game_state_scored+0x158>
            *score += 20;  
    12f2:	88 81       	ld	r24, Y
    12f4:	99 81       	ldd	r25, Y+1	; 0x01
    12f6:	44 96       	adiw	r24, 0x14	; 20
    12f8:	99 83       	std	Y+1, r25	; 0x01
    12fa:	88 83       	st	Y, r24
        }
        previousFrogY = newFrogY;  
    12fc:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <previousFrogY+0x1>
    1300:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <previousFrogY>
    }

    // Check if the new position is a wall or X on home row
    if (grid[newFrogY][newFrogX] == '?' || (grid[newFrogY][newFrogX] == 'X' && newFrogY == 0)) {
    1304:	84 e1       	ldi	r24, 0x14	; 20
    1306:	8e 9d       	mul	r24, r14
    1308:	f0 01       	movw	r30, r0
    130a:	8f 9d       	mul	r24, r15
    130c:	f0 0d       	add	r31, r0
    130e:	11 24       	eor	r1, r1
    1310:	e8 5e       	subi	r30, 0xE8	; 232
    1312:	fe 4f       	sbci	r31, 0xFE	; 254
    1314:	ec 0d       	add	r30, r12
    1316:	fd 1d       	adc	r31, r13
    1318:	80 81       	ld	r24, Z
    131a:	8f 33       	cpi	r24, 0x3F	; 63
    131c:	29 f0       	breq	.+10     	; 0x1328 <update_game_state_scored+0x184>
    131e:	88 35       	cpi	r24, 0x58	; 88
    1320:	31 f4       	brne	.+12     	; 0x132e <update_game_state_scored+0x18a>
    1322:	e1 14       	cp	r14, r1
    1324:	f1 04       	cpc	r15, r1
    1326:	19 f4       	brne	.+6      	; 0x132e <update_game_state_scored+0x18a>
        handle_collision();  
    1328:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <handle_collision>
        return;  
    132c:	d7 c0       	rjmp	.+430    	; 0x14dc <update_game_state_scored+0x338>
    }

    frogX = newFrogX;
    132e:	d0 92 da 01 	sts	0x01DA, r13	; 0x8001da <frogX+0x1>
    1332:	c0 92 d9 01 	sts	0x01D9, r12	; 0x8001d9 <frogX>
    frogY = newFrogY;
    1336:	f0 92 d8 01 	sts	0x01D8, r15	; 0x8001d8 <frogY+0x1>
    133a:	e0 92 d7 01 	sts	0x01D7, r14	; 0x8001d7 <frogY>

    // Check if the frog has reached a goal
    if (frogY == 0 && grid[frogY][frogX] == ' ' ) {
    133e:	ef 28       	or	r14, r15
    1340:	09 f0       	breq	.+2      	; 0x1344 <update_game_state_scored+0x1a0>
    1342:	8d c0       	rjmp	.+282    	; 0x145e <update_game_state_scored+0x2ba>
    1344:	80 32       	cpi	r24, 0x20	; 32
    1346:	09 f0       	breq	.+2      	; 0x134a <update_game_state_scored+0x1a6>
    1348:	8a c0       	rjmp	.+276    	; 0x145e <update_game_state_scored+0x2ba>
        play_tone(freq_C4);
    134a:	85 e0       	ldi	r24, 0x05	; 5
    134c:	91 e0       	ldi	r25, 0x01	; 1
    134e:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
        play_tone(freq_E4);
    1352:	8a e4       	ldi	r24, 0x4A	; 74
    1354:	91 e0       	ldi	r25, 0x01	; 1
    1356:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
        frogsAtHome += 1;
    135a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
    135e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
    1368:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
        lives -= 1;
    136c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lives>
    1370:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lives+0x1>
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lives+0x1>
    137a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lives>
        *score += 10 * (timer + 1); 
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e8       	ldi	r20, 0x80	; 128
    1384:	5f e3       	ldi	r21, 0x3F	; 63
    1386:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <timer>
    138a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <timer+0x1>
    138e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timer+0x2>
    1392:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <timer+0x3>
    1396:	0e 94 c6 0c 	call	0x198c	; 0x198c <__addsf3>
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e2       	ldi	r20, 0x20	; 32
    13a0:	51 e4       	ldi	r21, 0x41	; 65
    13a2:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsf3>
    13a6:	6b 01       	movw	r12, r22
    13a8:	7c 01       	movw	r14, r24
    13aa:	68 81       	ld	r22, Y
    13ac:	79 81       	ldd	r23, Y+1	; 0x01
    13ae:	07 2e       	mov	r0, r23
    13b0:	00 0c       	add	r0, r0
    13b2:	88 0b       	sbc	r24, r24
    13b4:	99 0b       	sbc	r25, r25
    13b6:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatsisf>
    13ba:	a7 01       	movw	r20, r14
    13bc:	96 01       	movw	r18, r12
    13be:	0e 94 c6 0c 	call	0x198c	; 0x198c <__addsf3>
    13c2:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__fixsfsi>
    13c6:	79 83       	std	Y+1, r23	; 0x01
    13c8:	68 83       	st	Y, r22

		//Update Frog Position if at home
        if(frogsAtHome > 0 && frogsAtHome < 2) {
    13ca:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
    13ce:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	91 05       	cpc	r25, r1
    13d6:	81 f4       	brne	.+32     	; 0x13f8 <update_game_state_scored+0x254>
            frogMarkY = frogY;
    13d8:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <frogY>
    13dc:	30 91 d8 01 	lds	r19, 0x01D8	; 0x8001d8 <frogY+0x1>
    13e0:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <frogMarkY+0x1>
    13e4:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <frogMarkY>
            frogMarkX = frogX;		
    13e8:	20 91 d9 01 	lds	r18, 0x01D9	; 0x8001d9 <frogX>
    13ec:	30 91 da 01 	lds	r19, 0x01DA	; 0x8001da <frogX+0x1>
    13f0:	30 93 d6 01 	sts	0x01D6, r19	; 0x8001d6 <frogMarkX+0x1>
    13f4:	20 93 d5 01 	sts	0x01D5, r18	; 0x8001d5 <frogMarkX>
        }

        if(frogsAtHome > 1) {
    13f8:	82 30       	cpi	r24, 0x02	; 2
    13fa:	91 05       	cpc	r25, r1
    13fc:	84 f0       	brlt	.+32     	; 0x141e <update_game_state_scored+0x27a>
            frogMarkY2 = frogY;
    13fe:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <frogY>
    1402:	30 91 d8 01 	lds	r19, 0x01D8	; 0x8001d8 <frogY+0x1>
    1406:	30 93 dc 01 	sts	0x01DC, r19	; 0x8001dc <frogMarkY2+0x1>
    140a:	20 93 db 01 	sts	0x01DB, r18	; 0x8001db <frogMarkY2>
            frogMarkX2 = frogX;
    140e:	20 91 d9 01 	lds	r18, 0x01D9	; 0x8001d9 <frogX>
    1412:	30 91 da 01 	lds	r19, 0x01DA	; 0x8001da <frogX+0x1>
    1416:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <frogMarkX2+0x1>
    141a:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <frogMarkX2>
        }

        frogX = GRID_WIDTH / 2;
    141e:	2a e0       	ldi	r18, 0x0A	; 10
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	30 93 da 01 	sts	0x01DA, r19	; 0x8001da <frogX+0x1>
    1426:	20 93 d9 01 	sts	0x01D9, r18	; 0x8001d9 <frogX>
        frogY = GRID_HEIGHT - 1;
    142a:	23 e0       	ldi	r18, 0x03	; 3
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	30 93 d8 01 	sts	0x01D8, r19	; 0x8001d8 <frogY+0x1>
    1432:	20 93 d7 01 	sts	0x01D7, r18	; 0x8001d7 <frogY>
        timer = 20;
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	60 ea       	ldi	r22, 0xA0	; 160
    143c:	71 e4       	ldi	r23, 0x41	; 65
    143e:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <timer>
    1442:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <timer+0x1>
    1446:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <timer+0x2>
    144a:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <timer+0x3>

        if (frogsAtHome == 3) {
    144e:	03 97       	sbiw	r24, 0x03	; 3
    1450:	31 f4       	brne	.+12     	; 0x145e <update_game_state_scored+0x2ba>
            *score += 500;
    1452:	88 81       	ld	r24, Y
    1454:	99 81       	ldd	r25, Y+1	; 0x01
    1456:	8c 50       	subi	r24, 0x0C	; 12
    1458:	9e 4f       	sbci	r25, 0xFE	; 254
    145a:	99 83       	std	Y+1, r25	; 0x01
    145c:	88 83       	st	Y, r24
        }
    }

    check_collisions();  
    145e:	0e 94 21 07 	call	0xe42	; 0xe42 <check_collisions>
    render_vehicles();
    1462:	0e 94 95 05 	call	0xb2a	; 0xb2a <render_vehicles>
    display_live_score(*score);
    1466:	88 81       	ld	r24, Y
    1468:	99 81       	ldd	r25, Y+1	; 0x01
    146a:	0e 94 b2 06 	call	0xd64	; 0xd64 <display_live_score>
	display_time(timer);
    146e:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <timer>
    1472:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <timer+0x1>
    1476:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timer+0x2>
    147a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <timer+0x3>
    147e:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__fixsfsi>
    1482:	cb 01       	movw	r24, r22
    1484:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <display_time>
	timer -= 0.33;
    1488:	23 ec       	ldi	r18, 0xC3	; 195
    148a:	35 ef       	ldi	r19, 0xF5	; 245
    148c:	48 ea       	ldi	r20, 0xA8	; 168
    148e:	5e e3       	ldi	r21, 0x3E	; 62
    1490:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <timer>
    1494:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <timer+0x1>
    1498:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timer+0x2>
    149c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <timer+0x3>
    14a0:	0e 94 c5 0c 	call	0x198a	; 0x198a <__subsf3>
    14a4:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <timer>
    14a8:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <timer+0x1>
    14ac:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <timer+0x2>
    14b0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <timer+0x3>
    grid[frogY][frogX] = '&';
    14b4:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <frogY>
    14b8:	30 91 d8 01 	lds	r19, 0x01D8	; 0x8001d8 <frogY+0x1>
    14bc:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <frogX>
    14c0:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <frogX+0x1>
    14c4:	44 e1       	ldi	r20, 0x14	; 20
    14c6:	42 9f       	mul	r20, r18
    14c8:	f0 01       	movw	r30, r0
    14ca:	43 9f       	mul	r20, r19
    14cc:	f0 0d       	add	r31, r0
    14ce:	11 24       	eor	r1, r1
    14d0:	e8 5e       	subi	r30, 0xE8	; 232
    14d2:	fe 4f       	sbci	r31, 0xFE	; 254
    14d4:	e8 0f       	add	r30, r24
    14d6:	f9 1f       	adc	r31, r25
    14d8:	86 e2       	ldi	r24, 0x26	; 38
    14da:	80 83       	st	Z, r24
}
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	ff 90       	pop	r15
    14e4:	ef 90       	pop	r14
    14e6:	df 90       	pop	r13
    14e8:	cf 90       	pop	r12
    14ea:	08 95       	ret

000014ec <render_game_scored>:

void render_game_scored(int score) {
    14ec:	ef 92       	push	r14
    14ee:	ff 92       	push	r15
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	8c 01       	movw	r16, r24
    lcd_home();					
    14fa:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_home>
    lcd_goto_position(0, 0);  
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
    for (int x = 0; x < GRID_WIDTH; x++) {
    1506:	c0 e0       	ldi	r28, 0x00	; 0
    1508:	d0 e0       	ldi	r29, 0x00	; 0
    150a:	11 c0       	rjmp	.+34     	; 0x152e <render_game_scored+0x42>
        if (x % 2 == 0 || x % 3 == 0) {
    150c:	c0 ff       	sbrs	r28, 0
    150e:	07 c0       	rjmp	.+14     	; 0x151e <render_game_scored+0x32>
    1510:	ce 01       	movw	r24, r28
    1512:	63 e0       	ldi	r22, 0x03	; 3
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	0e 94 1d 12 	call	0x243a	; 0x243a <__divmodhi4>
    151a:	89 2b       	or	r24, r25
    151c:	21 f4       	brne	.+8      	; 0x1526 <render_game_scored+0x3a>
            lcd_write_data(0xFF);  
    151e:	8f ef       	ldi	r24, 0xFF	; 255
    1520:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
    1524:	03 c0       	rjmp	.+6      	; 0x152c <render_game_scored+0x40>
        } else {
            lcd_write_data(' ');  
    1526:	80 e2       	ldi	r24, 0x20	; 32
    1528:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
}

void render_game_scored(int score) {
    lcd_home();					
    lcd_goto_position(0, 0);  
    for (int x = 0; x < GRID_WIDTH; x++) {
    152c:	21 96       	adiw	r28, 0x01	; 1
    152e:	c4 31       	cpi	r28, 0x14	; 20
    1530:	d1 05       	cpc	r29, r1
    1532:	64 f3       	brlt	.-40     	; 0x150c <render_game_scored+0x20>
    1534:	c1 e0       	ldi	r28, 0x01	; 1
    1536:	d0 e0       	ldi	r29, 0x00	; 0
    1538:	1c c0       	rjmp	.+56     	; 0x1572 <render_game_scored+0x86>
            lcd_write_data(' ');  
        }
    }

    for (int y = 1; y < GRID_HEIGHT; y++) {
        lcd_goto_position(y, 0);  
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	8c 2f       	mov	r24, r28
    153e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
        for (int x = 0; x < GRID_WIDTH; x++) {
    1542:	e1 2c       	mov	r14, r1
    1544:	f1 2c       	mov	r15, r1
    1546:	10 c0       	rjmp	.+32     	; 0x1568 <render_game_scored+0x7c>
            lcd_write_data(grid[y][x]);
    1548:	84 e1       	ldi	r24, 0x14	; 20
    154a:	8c 9f       	mul	r24, r28
    154c:	f0 01       	movw	r30, r0
    154e:	8d 9f       	mul	r24, r29
    1550:	f0 0d       	add	r31, r0
    1552:	11 24       	eor	r1, r1
    1554:	e8 5e       	subi	r30, 0xE8	; 232
    1556:	fe 4f       	sbci	r31, 0xFE	; 254
    1558:	ee 0d       	add	r30, r14
    155a:	ff 1d       	adc	r31, r15
    155c:	80 81       	ld	r24, Z
    155e:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
        }
    }

    for (int y = 1; y < GRID_HEIGHT; y++) {
        lcd_goto_position(y, 0);  
        for (int x = 0; x < GRID_WIDTH; x++) {
    1562:	8f ef       	ldi	r24, 0xFF	; 255
    1564:	e8 1a       	sub	r14, r24
    1566:	f8 0a       	sbc	r15, r24
    1568:	84 e1       	ldi	r24, 0x14	; 20
    156a:	e8 16       	cp	r14, r24
    156c:	f1 04       	cpc	r15, r1
    156e:	64 f3       	brlt	.-40     	; 0x1548 <render_game_scored+0x5c>
        } else {
            lcd_write_data(' ');  
        }
    }

    for (int y = 1; y < GRID_HEIGHT; y++) {
    1570:	21 96       	adiw	r28, 0x01	; 1
    1572:	c4 30       	cpi	r28, 0x04	; 4
    1574:	d1 05       	cpc	r29, r1
    1576:	0c f3       	brlt	.-62     	; 0x153a <render_game_scored+0x4e>
        for (int x = 0; x < GRID_WIDTH; x++) {
            lcd_write_data(grid[y][x]);
        }
    }

    display_live_score(score);
    1578:	c8 01       	movw	r24, r16
    157a:	0e 94 b2 06 	call	0xd64	; 0xd64 <display_live_score>
    
	
	//if Frog at home remove Life/Frogs left to get home
    if(frogsAtHome > 0 ) {
    157e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
    1582:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
    1586:	18 16       	cp	r1, r24
    1588:	19 06       	cpc	r1, r25
    158a:	cc f4       	brge	.+50     	; 0x15be <render_game_scored+0xd2>
        grid[frogMarkY][frogMarkX] = 'X';
    158c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <frogMarkY>
    1590:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <frogMarkY+0x1>
    1594:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <frogMarkX>
    1598:	70 91 d6 01 	lds	r23, 0x01D6	; 0x8001d6 <frogMarkX+0x1>
    159c:	24 e1       	ldi	r18, 0x14	; 20
    159e:	28 9f       	mul	r18, r24
    15a0:	f0 01       	movw	r30, r0
    15a2:	29 9f       	mul	r18, r25
    15a4:	f0 0d       	add	r31, r0
    15a6:	11 24       	eor	r1, r1
    15a8:	e8 5e       	subi	r30, 0xE8	; 232
    15aa:	fe 4f       	sbci	r31, 0xFE	; 254
    15ac:	e6 0f       	add	r30, r22
    15ae:	f7 1f       	adc	r31, r23
    15b0:	98 e5       	ldi	r25, 0x58	; 88
    15b2:	90 83       	st	Z, r25
        lcd_goto_position(frogMarkY, frogMarkX);
    15b4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
        lcd_write_data('X');
    15b8:	88 e5       	ldi	r24, 0x58	; 88
    15ba:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
    }

    if(frogsAtHome == 2) {
    15be:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
    15c2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
    15c6:	02 97       	sbiw	r24, 0x02	; 2
    15c8:	c9 f4       	brne	.+50     	; 0x15fc <render_game_scored+0x110>
        grid[frogMarkY2][frogMarkX2] = 'X';
    15ca:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <frogMarkY2>
    15ce:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <frogMarkY2+0x1>
    15d2:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <frogMarkX2>
    15d6:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <frogMarkX2+0x1>
    15da:	24 e1       	ldi	r18, 0x14	; 20
    15dc:	28 9f       	mul	r18, r24
    15de:	f0 01       	movw	r30, r0
    15e0:	29 9f       	mul	r18, r25
    15e2:	f0 0d       	add	r31, r0
    15e4:	11 24       	eor	r1, r1
    15e6:	e8 5e       	subi	r30, 0xE8	; 232
    15e8:	fe 4f       	sbci	r31, 0xFE	; 254
    15ea:	e6 0f       	add	r30, r22
    15ec:	f7 1f       	adc	r31, r23
    15ee:	98 e5       	ldi	r25, 0x58	; 88
    15f0:	90 83       	st	Z, r25
        lcd_goto_position(frogMarkY2, frogMarkX2);
    15f2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
        lcd_write_data('X');
    15f6:	88 e5       	ldi	r24, 0x58	; 88
    15f8:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
    }

    if(lives > 2) {
    15fc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lives>
    1600:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lives+0x1>
    1604:	03 97       	sbiw	r24, 0x03	; 3
    1606:	44 f0       	brlt	.+16     	; 0x1618 <render_game_scored+0x12c>
        lcd_goto_position(0,19);
    1608:	63 e1       	ldi	r22, 0x13	; 19
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
        lcd_write_data('X');
    1610:	88 e5       	ldi	r24, 0x58	; 88
    1612:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <render_game_scored+0x13a>
    } else {
        lcd_goto_position(0,19);
    1618:	63 e1       	ldi	r22, 0x13	; 19
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
        lcd_write_data(' ');
    1620:	80 e2       	ldi	r24, 0x20	; 32
    1622:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
    }

    if(lives > 1) {
    1626:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lives>
    162a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lives+0x1>
    162e:	02 97       	sbiw	r24, 0x02	; 2
    1630:	44 f0       	brlt	.+16     	; 0x1642 <render_game_scored+0x156>
        lcd_goto_position(1,19);
    1632:	63 e1       	ldi	r22, 0x13	; 19
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
        lcd_write_data('X');
    163a:	88 e5       	ldi	r24, 0x58	; 88
    163c:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
    1640:	07 c0       	rjmp	.+14     	; 0x1650 <render_game_scored+0x164>
    } else {
        lcd_goto_position(1,19);
    1642:	63 e1       	ldi	r22, 0x13	; 19
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
        lcd_write_data(' ');
    164a:	80 e2       	ldi	r24, 0x20	; 32
    164c:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
    }

    if(lives > 0) {
    1650:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lives>
    1654:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lives+0x1>
    1658:	18 16       	cp	r1, r24
    165a:	19 06       	cpc	r1, r25
    165c:	44 f4       	brge	.+16     	; 0x166e <render_game_scored+0x182>
        lcd_goto_position(2,19);
    165e:	63 e1       	ldi	r22, 0x13	; 19
    1660:	82 e0       	ldi	r24, 0x02	; 2
    1662:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
        lcd_write_data('X');
    1666:	88 e5       	ldi	r24, 0x58	; 88
    1668:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
    166c:	07 c0       	rjmp	.+14     	; 0x167c <render_game_scored+0x190>
    } else {
        lcd_goto_position(2,19);
    166e:	63 e1       	ldi	r22, 0x13	; 19
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
        lcd_write_data(' ');
    1676:	80 e2       	ldi	r24, 0x20	; 32
    1678:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
    }

    lcd_goto_position(frogY, frogX);
    167c:	60 91 d9 01 	lds	r22, 0x01D9	; 0x8001d9 <frogX>
    1680:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <frogY>
    1684:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
    lcd_write_data('&');
    1688:	86 e2       	ldi	r24, 0x26	; 38
    168a:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_write_data>
}
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	08 95       	ret

0000169c <check_game_over>:

int check_game_over() {
    if (timer <= 0 || lives <= 0) {
    169c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <timer>
    16a0:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <timer+0x1>
    16a4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timer+0x2>
    16a8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <timer+0x3>
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	a9 01       	movw	r20, r18
    16b2:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__cmpsf2>
    16b6:	18 16       	cp	r1, r24
    16b8:	84 f4       	brge	.+32     	; 0x16da <check_game_over+0x3e>
    16ba:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lives>
    16be:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lives+0x1>
    16c2:	18 16       	cp	r1, r24
    16c4:	19 06       	cpc	r1, r25
    16c6:	64 f4       	brge	.+24     	; 0x16e0 <check_game_over+0x44>
        return 1;  
    }
    if (frogsAtHome == 3) {
    16c8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
    16cc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
    16d0:	03 97       	sbiw	r24, 0x03	; 3
    16d2:	49 f4       	brne	.+18     	; 0x16e6 <check_game_over+0x4a>
        return 2;  
    16d4:	82 e0       	ldi	r24, 0x02	; 2
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	08 95       	ret
    lcd_write_data('&');
}

int check_game_over() {
    if (timer <= 0 || lives <= 0) {
        return 1;  
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	08 95       	ret
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	08 95       	ret
    }
    if (frogsAtHome == 3) {
        return 2;  
    }
    return 0;  
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
}
    16ea:	08 95       	ret

000016ec <play_scored_frogger>:

void play_scored_frogger(int score) {
    16ec:	0f 93       	push	r16
    16ee:	1f 93       	push	r17
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <play_scored_frogger+0xa>
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	9a 83       	std	Y+2, r25	; 0x02
    16fc:	89 83       	std	Y+1, r24	; 0x01
    seed += 5;
    16fe:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <seed>
    1702:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <seed+0x1>
    1706:	05 96       	adiw	r24, 0x05	; 5
    1708:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <seed+0x1>
    170c:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <seed>

    for (int i = 3; i > 0; i--) {
    1710:	03 e0       	ldi	r16, 0x03	; 3
    1712:	10 e0       	ldi	r17, 0x00	; 0
    1714:	18 c0       	rjmp	.+48     	; 0x1746 <play_scored_frogger+0x5a>
        lcd_clear_and_home();
    1716:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_clear_and_home>
        lcd_goto_position(1, 8);  
    171a:	68 e0       	ldi	r22, 0x08	; 8
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
        lcd_write_int16(i);
    1722:	c8 01       	movw	r24, r16
    1724:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_write_int16>
        play_tone(freq_C4);
    1728:	85 e0       	ldi	r24, 0x05	; 5
    172a:	91 e0       	ldi	r25, 0x01	; 1
    172c:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
    1730:	2f ef       	ldi	r18, 0xFF	; 255
    1732:	89 e6       	ldi	r24, 0x69	; 105
    1734:	98 e1       	ldi	r25, 0x18	; 24
    1736:	21 50       	subi	r18, 0x01	; 1
    1738:	80 40       	sbci	r24, 0x00	; 0
    173a:	90 40       	sbci	r25, 0x00	; 0
    173c:	e1 f7       	brne	.-8      	; 0x1736 <play_scored_frogger+0x4a>
    173e:	00 c0       	rjmp	.+0      	; 0x1740 <play_scored_frogger+0x54>
    1740:	00 00       	nop
}

void play_scored_frogger(int score) {
    seed += 5;

    for (int i = 3; i > 0; i--) {
    1742:	01 50       	subi	r16, 0x01	; 1
    1744:	11 09       	sbc	r17, r1
    1746:	10 16       	cp	r1, r16
    1748:	11 06       	cpc	r1, r17
    174a:	2c f3       	brlt	.-54     	; 0x1716 <play_scored_frogger+0x2a>
        lcd_goto_position(1, 8);  
        lcd_write_int16(i);
        play_tone(freq_C4);
        _delay_ms(500);
    }
    lcd_clear_and_home();
    174c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_clear_and_home>
    lcd_goto_position(1, 8);
    1750:	68 e0       	ldi	r22, 0x08	; 8
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
    lcd_write_string(PSTR("Go!"));
    1758:	8a ed       	ldi	r24, 0xDA	; 218
    175a:	91 e0       	ldi	r25, 0x01	; 1
    175c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_write_string>
    play_tone(freq_C5);
    1760:	8b e0       	ldi	r24, 0x0B	; 11
    1762:	92 e0       	ldi	r25, 0x02	; 2
    1764:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
    1768:	2f ef       	ldi	r18, 0xFF	; 255
    176a:	83 ed       	ldi	r24, 0xD3	; 211
    176c:	90 e3       	ldi	r25, 0x30	; 48
    176e:	21 50       	subi	r18, 0x01	; 1
    1770:	80 40       	sbci	r24, 0x00	; 0
    1772:	90 40       	sbci	r25, 0x00	; 0
    1774:	e1 f7       	brne	.-8      	; 0x176e <play_scored_frogger+0x82>
    1776:	00 c0       	rjmp	.+0      	; 0x1778 <play_scored_frogger+0x8c>
    1778:	00 00       	nop
    _delay_ms(1000);

    game_init();
    177a:	0e 94 94 06 	call	0xd28	; 0xd28 <game_init>

    while(1) {
        char input = get_keypad_input();
    177e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <get_keypad_input>
    1782:	18 2f       	mov	r17, r24
        update_game_state_scored(input, &score);
    1784:	be 01       	movw	r22, r28
    1786:	6f 5f       	subi	r22, 0xFF	; 255
    1788:	7f 4f       	sbci	r23, 0xFF	; 255
    178a:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <update_game_state_scored>
        render_game_scored(score);
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	9a 81       	ldd	r25, Y+2	; 0x02
    1792:	0e 94 76 0a 	call	0x14ec	; 0x14ec <render_game_scored>
        int gameStatus = check_game_over();
    1796:	0e 94 4e 0b 	call	0x169c	; 0x169c <check_game_over>

        if (gameStatus == 1 || input == '1') {
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	91 05       	cpc	r25, r1
    179e:	11 f0       	breq	.+4      	; 0x17a4 <play_scored_frogger+0xb8>
    17a0:	11 33       	cpi	r17, 0x31	; 49
    17a2:	e1 f5       	brne	.+120    	; 0x181c <play_scored_frogger+0x130>
            seed -= 2;
    17a4:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <seed>
    17a8:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <seed+0x1>
    17ac:	02 97       	sbiw	r24, 0x02	; 2
    17ae:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <seed+0x1>
    17b2:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <seed>
            lcd_clear_and_home();
    17b6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_clear_and_home>
            lcd_goto_position(1, 6);
    17ba:	66 e0       	ldi	r22, 0x06	; 6
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
            lcd_write_string(PSTR("Game Over!"));
    17c2:	8f ec       	ldi	r24, 0xCF	; 207
    17c4:	91 e0       	ldi	r25, 0x01	; 1
    17c6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_write_string>
            play_tone(freq_E4);
    17ca:	8a e4       	ldi	r24, 0x4A	; 74
    17cc:	91 e0       	ldi	r25, 0x01	; 1
    17ce:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
            play_tone(freq_E4);
    17d2:	8a e4       	ldi	r24, 0x4A	; 74
    17d4:	91 e0       	ldi	r25, 0x01	; 1
    17d6:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
            play_tone(freq_D4);
    17da:	86 e2       	ldi	r24, 0x26	; 38
    17dc:	91 e0       	ldi	r25, 0x01	; 1
    17de:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
            play_tone(freq_D4);
    17e2:	86 e2       	ldi	r24, 0x26	; 38
    17e4:	91 e0       	ldi	r25, 0x01	; 1
    17e6:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
            play_tone(freq_C4);
    17ea:	85 e0       	ldi	r24, 0x05	; 5
    17ec:	91 e0       	ldi	r25, 0x01	; 1
    17ee:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
            play_tone(freq_C4);
    17f2:	85 e0       	ldi	r24, 0x05	; 5
    17f4:	91 e0       	ldi	r25, 0x01	; 1
    17f6:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
            display_final_score(score);
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	9a 81       	ldd	r25, Y+2	; 0x02
    17fe:	0e 94 c8 06 	call	0xd90	; 0xd90 <display_final_score>
            lives = 3;
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lives+0x1>
    180a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lives>
            frogsAtHome = 0;
    180e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
    1812:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
			display_menu();
    1816:	0e 94 ed 02 	call	0x5da	; 0x5da <display_menu>
            break;
    181a:	46 c0       	rjmp	.+140    	; 0x18a8 <play_scored_frogger+0x1bc>
        }
        if (gameStatus == 2) {
    181c:	02 97       	sbiw	r24, 0x02	; 2
    181e:	09 f0       	breq	.+2      	; 0x1822 <play_scored_frogger+0x136>
    1820:	ae cf       	rjmp	.-164    	; 0x177e <play_scored_frogger+0x92>
            seed += 10;
    1822:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <seed>
    1826:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <seed+0x1>
    182a:	0a 96       	adiw	r24, 0x0a	; 10
    182c:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <seed+0x1>
    1830:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <seed>
            lcd_clear_and_home();
    1834:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_clear_and_home>
            lcd_goto_position(1, 6);
    1838:	66 e0       	ldi	r22, 0x06	; 6
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_goto_position>
            lcd_write_string(PSTR("You Win!"));
    1840:	86 ec       	ldi	r24, 0xC6	; 198
    1842:	91 e0       	ldi	r25, 0x01	; 1
    1844:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_write_string>
            play_tone(freq_E4);
    1848:	8a e4       	ldi	r24, 0x4A	; 74
    184a:	91 e0       	ldi	r25, 0x01	; 1
    184c:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
            play_tone(freq_G4);
    1850:	88 e8       	ldi	r24, 0x88	; 136
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
            play_tone(freq_A4);
    1858:	88 eb       	ldi	r24, 0xB8	; 184
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
            play_tone(freq_G4);
    1860:	88 e8       	ldi	r24, 0x88	; 136
    1862:	91 e0       	ldi	r25, 0x01	; 1
    1864:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
            play_tone(freq_F4);
    1868:	8d e5       	ldi	r24, 0x5D	; 93
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
            play_tone(freq_E4);
    1870:	8a e4       	ldi	r24, 0x4A	; 74
    1872:	91 e0       	ldi	r25, 0x01	; 1
    1874:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
            play_tone(freq_D4);
    1878:	86 e2       	ldi	r24, 0x26	; 38
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
            play_tone(freq_C4);
    1880:	85 e0       	ldi	r24, 0x05	; 5
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	0e 94 3b 03 	call	0x676	; 0x676 <play_tone>
            display_final_score(score);
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	9a 81       	ldd	r25, Y+2	; 0x02
    188c:	0e 94 c8 06 	call	0xd90	; 0xd90 <display_final_score>
            lives = 3;
    1890:	83 e0       	ldi	r24, 0x03	; 3
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lives+0x1>
    1898:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lives>
            frogsAtHome = 0;
    189c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
    18a0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
			display_menu();
    18a4:	0e 94 ed 02 	call	0x5da	; 0x5da <display_menu>
            break;
        }
    }
}
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	08 95       	ret

000018b6 <main>:
//*					Main																				 *
//********************************************************************************************************

int main(void) {
    // initialise MCU, drivers and middleware
    atmel_start_init();
    18b6:	0e 94 40 01 	call	0x280	; 0x280 <atmel_start_init>
  
    // Initialise the LCD
    lcd_init();
    18ba:	0e 94 12 02 	call	0x424	; 0x424 <lcd_init>
    lcd_home();
    18be:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_home>
 
    // Initialise keypad, and the SPST switch port
    keypad_init();
    18c2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <keypad_init>
    18c6:	8f e9       	ldi	r24, 0x9F	; 159
    18c8:	9f e0       	ldi	r25, 0x0F	; 15
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <main+0x14>
    18ce:	00 c0       	rjmp	.+0      	; 0x18d0 <main+0x1a>
    18d0:	00 00       	nop

    // Wait a moment, then initialise interrupts
    _delay_ms(1);
    init_interrupts();
    18d2:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <init_interrupts>
    cli();  // Disable interrupts again initially
    18d6:	f8 94       	cli
    display_menu();
    18d8:	0e 94 ed 02 	call	0x5da	; 0x5da <display_menu>

    while (1) {
        char choice = get_keypad_input();  // Get user selection from keypad
    18dc:	0e 94 d6 02 	call	0x5ac	; 0x5ac <get_keypad_input>
    18e0:	c8 2f       	mov	r28, r24
        srand(seed);
    18e2:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <seed>
    18e6:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <seed+0x1>
    18ea:	0e 94 0f 13 	call	0x261e	; 0x261e <srand>
    18ee:	9f ef       	ldi	r25, 0xFF	; 255
    18f0:	29 e6       	ldi	r18, 0x69	; 105
    18f2:	88 e1       	ldi	r24, 0x18	; 24
    18f4:	91 50       	subi	r25, 0x01	; 1
    18f6:	20 40       	sbci	r18, 0x00	; 0
    18f8:	80 40       	sbci	r24, 0x00	; 0
    18fa:	e1 f7       	brne	.-8      	; 0x18f4 <main+0x3e>
    18fc:	00 c0       	rjmp	.+0      	; 0x18fe <main+0x48>
    18fe:	00 00       	nop
        _delay_ms(500);  // Add a small delay to ensure any previous keypad input has been cleared

        switch (choice) {
    1900:	c2 33       	cpi	r28, 0x32	; 50
    1902:	61 f0       	breq	.+24     	; 0x191c <main+0x66>
    1904:	18 f4       	brcc	.+6      	; 0x190c <main+0x56>
    1906:	c1 33       	cpi	r28, 0x31	; 49
    1908:	31 f0       	breq	.+12     	; 0x1916 <main+0x60>
    190a:	e8 cf       	rjmp	.-48     	; 0x18dc <main+0x26>
    190c:	c3 33       	cpi	r28, 0x33	; 51
    190e:	49 f0       	breq	.+18     	; 0x1922 <main+0x6c>
    1910:	c4 33       	cpi	r28, 0x34	; 52
    1912:	71 f0       	breq	.+28     	; 0x1930 <main+0x7a>
    1914:	e3 cf       	rjmp	.-58     	; 0x18dc <main+0x26>
            case '1':
                play_tones();
    1916:	0e 94 9a 03 	call	0x734	; 0x734 <play_tones>
                break;
    191a:	e0 cf       	rjmp	.-64     	; 0x18dc <main+0x26>
            case '2':
                play_frogger();
    191c:	0e 94 a1 08 	call	0x1142	; 0x1142 <play_frogger>
                break;
    1920:	dd cf       	rjmp	.-70     	; 0x18dc <main+0x26>
            case '3':
                play_scored_frogger(score);
    1922:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <score>
    1926:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <score+0x1>
    192a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <play_scored_frogger>
                break;
    192e:	d6 cf       	rjmp	.-84     	; 0x18dc <main+0x26>
            case '4':
                c_scale();
    1930:	0e 94 d5 03 	call	0x7aa	; 0x7aa <c_scale>
                break;
    1934:	d3 cf       	rjmp	.-90     	; 0x18dc <main+0x26>

00001936 <system_init>:
    1936:	8d e3       	ldi	r24, 0x3D	; 61
    1938:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f8065>
    193c:	8f ef       	ldi	r24, 0xFF	; 255
    193e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
    1942:	94 b1       	in	r25, 0x04	; 4
    1944:	14 b8       	out	0x04, r1	; 4
    1946:	95 b1       	in	r25, 0x05	; 5
    1948:	85 b9       	out	0x05, r24	; 5
    194a:	97 b1       	in	r25, 0x07	; 7
    194c:	90 78       	andi	r25, 0x80	; 128
    194e:	97 b9       	out	0x07, r25	; 7
    1950:	98 b1       	in	r25, 0x08	; 8
    1952:	9f 67       	ori	r25, 0x7F	; 127
    1954:	98 b9       	out	0x08, r25	; 8
    1956:	9a b1       	in	r25, 0x0a	; 10
    1958:	1a b8       	out	0x0a, r1	; 10
    195a:	9b b1       	in	r25, 0x0b	; 11
    195c:	8b b9       	out	0x0b, r24	; 11
    195e:	8d b1       	in	r24, 0x0d	; 13
    1960:	80 7f       	andi	r24, 0xF0	; 240
    1962:	8d b9       	out	0x0d, r24	; 13
    1964:	8e b1       	in	r24, 0x0e	; 14
    1966:	8f 60       	ori	r24, 0x0F	; 15
    1968:	8e b9       	out	0x0e, r24	; 14
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	60 e8       	ldi	r22, 0x80	; 128
    196e:	81 e6       	ldi	r24, 0x61	; 97
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 be 0c 	call	0x197c	; 0x197c <protected_write_io>
    1976:	13 be       	out	0x33, r1	; 51
    1978:	15 be       	out	0x35, r1	; 53
    197a:	08 95       	ret

0000197c <protected_write_io>:
    197c:	2f b7       	in	r18, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	fc 01       	movw	r30, r24
    1982:	60 83       	st	Z, r22
    1984:	40 83       	st	Z, r20
    1986:	2f bf       	out	0x3f, r18	; 63
    1988:	08 95       	ret

0000198a <__subsf3>:
    198a:	50 58       	subi	r21, 0x80	; 128

0000198c <__addsf3>:
    198c:	bb 27       	eor	r27, r27
    198e:	aa 27       	eor	r26, r26
    1990:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__addsf3x>
    1994:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__fp_round>
    1998:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__fp_pscA>
    199c:	38 f0       	brcs	.+14     	; 0x19ac <__addsf3+0x20>
    199e:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__fp_pscB>
    19a2:	20 f0       	brcs	.+8      	; 0x19ac <__addsf3+0x20>
    19a4:	39 f4       	brne	.+14     	; 0x19b4 <__addsf3+0x28>
    19a6:	9f 3f       	cpi	r25, 0xFF	; 255
    19a8:	19 f4       	brne	.+6      	; 0x19b0 <__addsf3+0x24>
    19aa:	26 f4       	brtc	.+8      	; 0x19b4 <__addsf3+0x28>
    19ac:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__fp_nan>
    19b0:	0e f4       	brtc	.+2      	; 0x19b4 <__addsf3+0x28>
    19b2:	e0 95       	com	r30
    19b4:	e7 fb       	bst	r30, 7
    19b6:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__fp_inf>

000019ba <__addsf3x>:
    19ba:	e9 2f       	mov	r30, r25
    19bc:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__fp_split3>
    19c0:	58 f3       	brcs	.-42     	; 0x1998 <__addsf3+0xc>
    19c2:	ba 17       	cp	r27, r26
    19c4:	62 07       	cpc	r22, r18
    19c6:	73 07       	cpc	r23, r19
    19c8:	84 07       	cpc	r24, r20
    19ca:	95 07       	cpc	r25, r21
    19cc:	20 f0       	brcs	.+8      	; 0x19d6 <__addsf3x+0x1c>
    19ce:	79 f4       	brne	.+30     	; 0x19ee <__addsf3x+0x34>
    19d0:	a6 f5       	brtc	.+104    	; 0x1a3a <__addsf3x+0x80>
    19d2:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__fp_zero>
    19d6:	0e f4       	brtc	.+2      	; 0x19da <__addsf3x+0x20>
    19d8:	e0 95       	com	r30
    19da:	0b 2e       	mov	r0, r27
    19dc:	ba 2f       	mov	r27, r26
    19de:	a0 2d       	mov	r26, r0
    19e0:	0b 01       	movw	r0, r22
    19e2:	b9 01       	movw	r22, r18
    19e4:	90 01       	movw	r18, r0
    19e6:	0c 01       	movw	r0, r24
    19e8:	ca 01       	movw	r24, r20
    19ea:	a0 01       	movw	r20, r0
    19ec:	11 24       	eor	r1, r1
    19ee:	ff 27       	eor	r31, r31
    19f0:	59 1b       	sub	r21, r25
    19f2:	99 f0       	breq	.+38     	; 0x1a1a <__addsf3x+0x60>
    19f4:	59 3f       	cpi	r21, 0xF9	; 249
    19f6:	50 f4       	brcc	.+20     	; 0x1a0c <__addsf3x+0x52>
    19f8:	50 3e       	cpi	r21, 0xE0	; 224
    19fa:	68 f1       	brcs	.+90     	; 0x1a56 <__addsf3x+0x9c>
    19fc:	1a 16       	cp	r1, r26
    19fe:	f0 40       	sbci	r31, 0x00	; 0
    1a00:	a2 2f       	mov	r26, r18
    1a02:	23 2f       	mov	r18, r19
    1a04:	34 2f       	mov	r19, r20
    1a06:	44 27       	eor	r20, r20
    1a08:	58 5f       	subi	r21, 0xF8	; 248
    1a0a:	f3 cf       	rjmp	.-26     	; 0x19f2 <__addsf3x+0x38>
    1a0c:	46 95       	lsr	r20
    1a0e:	37 95       	ror	r19
    1a10:	27 95       	ror	r18
    1a12:	a7 95       	ror	r26
    1a14:	f0 40       	sbci	r31, 0x00	; 0
    1a16:	53 95       	inc	r21
    1a18:	c9 f7       	brne	.-14     	; 0x1a0c <__addsf3x+0x52>
    1a1a:	7e f4       	brtc	.+30     	; 0x1a3a <__addsf3x+0x80>
    1a1c:	1f 16       	cp	r1, r31
    1a1e:	ba 0b       	sbc	r27, r26
    1a20:	62 0b       	sbc	r22, r18
    1a22:	73 0b       	sbc	r23, r19
    1a24:	84 0b       	sbc	r24, r20
    1a26:	ba f0       	brmi	.+46     	; 0x1a56 <__addsf3x+0x9c>
    1a28:	91 50       	subi	r25, 0x01	; 1
    1a2a:	a1 f0       	breq	.+40     	; 0x1a54 <__addsf3x+0x9a>
    1a2c:	ff 0f       	add	r31, r31
    1a2e:	bb 1f       	adc	r27, r27
    1a30:	66 1f       	adc	r22, r22
    1a32:	77 1f       	adc	r23, r23
    1a34:	88 1f       	adc	r24, r24
    1a36:	c2 f7       	brpl	.-16     	; 0x1a28 <__addsf3x+0x6e>
    1a38:	0e c0       	rjmp	.+28     	; 0x1a56 <__addsf3x+0x9c>
    1a3a:	ba 0f       	add	r27, r26
    1a3c:	62 1f       	adc	r22, r18
    1a3e:	73 1f       	adc	r23, r19
    1a40:	84 1f       	adc	r24, r20
    1a42:	48 f4       	brcc	.+18     	; 0x1a56 <__addsf3x+0x9c>
    1a44:	87 95       	ror	r24
    1a46:	77 95       	ror	r23
    1a48:	67 95       	ror	r22
    1a4a:	b7 95       	ror	r27
    1a4c:	f7 95       	ror	r31
    1a4e:	9e 3f       	cpi	r25, 0xFE	; 254
    1a50:	08 f0       	brcs	.+2      	; 0x1a54 <__addsf3x+0x9a>
    1a52:	b0 cf       	rjmp	.-160    	; 0x19b4 <__addsf3+0x28>
    1a54:	93 95       	inc	r25
    1a56:	88 0f       	add	r24, r24
    1a58:	08 f0       	brcs	.+2      	; 0x1a5c <__addsf3x+0xa2>
    1a5a:	99 27       	eor	r25, r25
    1a5c:	ee 0f       	add	r30, r30
    1a5e:	97 95       	ror	r25
    1a60:	87 95       	ror	r24
    1a62:	08 95       	ret

00001a64 <__cmpsf2>:
    1a64:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__fp_cmp>
    1a68:	08 f4       	brcc	.+2      	; 0x1a6c <__cmpsf2+0x8>
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	08 95       	ret

00001a6e <__fixsfsi>:
    1a6e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__fixunssfsi>
    1a72:	68 94       	set
    1a74:	b1 11       	cpse	r27, r1
    1a76:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__fp_szero>
    1a7a:	08 95       	ret

00001a7c <__fixunssfsi>:
    1a7c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__fp_splitA>
    1a80:	88 f0       	brcs	.+34     	; 0x1aa4 <__fixunssfsi+0x28>
    1a82:	9f 57       	subi	r25, 0x7F	; 127
    1a84:	98 f0       	brcs	.+38     	; 0x1aac <__fixunssfsi+0x30>
    1a86:	b9 2f       	mov	r27, r25
    1a88:	99 27       	eor	r25, r25
    1a8a:	b7 51       	subi	r27, 0x17	; 23
    1a8c:	b0 f0       	brcs	.+44     	; 0x1aba <__fixunssfsi+0x3e>
    1a8e:	e1 f0       	breq	.+56     	; 0x1ac8 <__fixunssfsi+0x4c>
    1a90:	66 0f       	add	r22, r22
    1a92:	77 1f       	adc	r23, r23
    1a94:	88 1f       	adc	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	1a f0       	brmi	.+6      	; 0x1aa0 <__fixunssfsi+0x24>
    1a9a:	ba 95       	dec	r27
    1a9c:	c9 f7       	brne	.-14     	; 0x1a90 <__fixunssfsi+0x14>
    1a9e:	14 c0       	rjmp	.+40     	; 0x1ac8 <__fixunssfsi+0x4c>
    1aa0:	b1 30       	cpi	r27, 0x01	; 1
    1aa2:	91 f0       	breq	.+36     	; 0x1ac8 <__fixunssfsi+0x4c>
    1aa4:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__fp_zero>
    1aa8:	b1 e0       	ldi	r27, 0x01	; 1
    1aaa:	08 95       	ret
    1aac:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__fp_zero>
    1ab0:	67 2f       	mov	r22, r23
    1ab2:	78 2f       	mov	r23, r24
    1ab4:	88 27       	eor	r24, r24
    1ab6:	b8 5f       	subi	r27, 0xF8	; 248
    1ab8:	39 f0       	breq	.+14     	; 0x1ac8 <__fixunssfsi+0x4c>
    1aba:	b9 3f       	cpi	r27, 0xF9	; 249
    1abc:	cc f3       	brlt	.-14     	; 0x1ab0 <__fixunssfsi+0x34>
    1abe:	86 95       	lsr	r24
    1ac0:	77 95       	ror	r23
    1ac2:	67 95       	ror	r22
    1ac4:	b3 95       	inc	r27
    1ac6:	d9 f7       	brne	.-10     	; 0x1abe <__fixunssfsi+0x42>
    1ac8:	3e f4       	brtc	.+14     	; 0x1ad8 <__fixunssfsi+0x5c>
    1aca:	90 95       	com	r25
    1acc:	80 95       	com	r24
    1ace:	70 95       	com	r23
    1ad0:	61 95       	neg	r22
    1ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad8:	08 95       	ret

00001ada <__floatunsisf>:
    1ada:	e8 94       	clt
    1adc:	09 c0       	rjmp	.+18     	; 0x1af0 <__floatsisf+0x12>

00001ade <__floatsisf>:
    1ade:	97 fb       	bst	r25, 7
    1ae0:	3e f4       	brtc	.+14     	; 0x1af0 <__floatsisf+0x12>
    1ae2:	90 95       	com	r25
    1ae4:	80 95       	com	r24
    1ae6:	70 95       	com	r23
    1ae8:	61 95       	neg	r22
    1aea:	7f 4f       	sbci	r23, 0xFF	; 255
    1aec:	8f 4f       	sbci	r24, 0xFF	; 255
    1aee:	9f 4f       	sbci	r25, 0xFF	; 255
    1af0:	99 23       	and	r25, r25
    1af2:	a9 f0       	breq	.+42     	; 0x1b1e <__floatsisf+0x40>
    1af4:	f9 2f       	mov	r31, r25
    1af6:	96 e9       	ldi	r25, 0x96	; 150
    1af8:	bb 27       	eor	r27, r27
    1afa:	93 95       	inc	r25
    1afc:	f6 95       	lsr	r31
    1afe:	87 95       	ror	r24
    1b00:	77 95       	ror	r23
    1b02:	67 95       	ror	r22
    1b04:	b7 95       	ror	r27
    1b06:	f1 11       	cpse	r31, r1
    1b08:	f8 cf       	rjmp	.-16     	; 0x1afa <__floatsisf+0x1c>
    1b0a:	fa f4       	brpl	.+62     	; 0x1b4a <__floatsisf+0x6c>
    1b0c:	bb 0f       	add	r27, r27
    1b0e:	11 f4       	brne	.+4      	; 0x1b14 <__floatsisf+0x36>
    1b10:	60 ff       	sbrs	r22, 0
    1b12:	1b c0       	rjmp	.+54     	; 0x1b4a <__floatsisf+0x6c>
    1b14:	6f 5f       	subi	r22, 0xFF	; 255
    1b16:	7f 4f       	sbci	r23, 0xFF	; 255
    1b18:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1c:	16 c0       	rjmp	.+44     	; 0x1b4a <__floatsisf+0x6c>
    1b1e:	88 23       	and	r24, r24
    1b20:	11 f0       	breq	.+4      	; 0x1b26 <__floatsisf+0x48>
    1b22:	96 e9       	ldi	r25, 0x96	; 150
    1b24:	11 c0       	rjmp	.+34     	; 0x1b48 <__floatsisf+0x6a>
    1b26:	77 23       	and	r23, r23
    1b28:	21 f0       	breq	.+8      	; 0x1b32 <__floatsisf+0x54>
    1b2a:	9e e8       	ldi	r25, 0x8E	; 142
    1b2c:	87 2f       	mov	r24, r23
    1b2e:	76 2f       	mov	r23, r22
    1b30:	05 c0       	rjmp	.+10     	; 0x1b3c <__floatsisf+0x5e>
    1b32:	66 23       	and	r22, r22
    1b34:	71 f0       	breq	.+28     	; 0x1b52 <__floatsisf+0x74>
    1b36:	96 e8       	ldi	r25, 0x86	; 134
    1b38:	86 2f       	mov	r24, r22
    1b3a:	70 e0       	ldi	r23, 0x00	; 0
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	2a f0       	brmi	.+10     	; 0x1b4a <__floatsisf+0x6c>
    1b40:	9a 95       	dec	r25
    1b42:	66 0f       	add	r22, r22
    1b44:	77 1f       	adc	r23, r23
    1b46:	88 1f       	adc	r24, r24
    1b48:	da f7       	brpl	.-10     	; 0x1b40 <__floatsisf+0x62>
    1b4a:	88 0f       	add	r24, r24
    1b4c:	96 95       	lsr	r25
    1b4e:	87 95       	ror	r24
    1b50:	97 f9       	bld	r25, 7
    1b52:	08 95       	ret

00001b54 <__fp_cmp>:
    1b54:	99 0f       	add	r25, r25
    1b56:	00 08       	sbc	r0, r0
    1b58:	55 0f       	add	r21, r21
    1b5a:	aa 0b       	sbc	r26, r26
    1b5c:	e0 e8       	ldi	r30, 0x80	; 128
    1b5e:	fe ef       	ldi	r31, 0xFE	; 254
    1b60:	16 16       	cp	r1, r22
    1b62:	17 06       	cpc	r1, r23
    1b64:	e8 07       	cpc	r30, r24
    1b66:	f9 07       	cpc	r31, r25
    1b68:	c0 f0       	brcs	.+48     	; 0x1b9a <__fp_cmp+0x46>
    1b6a:	12 16       	cp	r1, r18
    1b6c:	13 06       	cpc	r1, r19
    1b6e:	e4 07       	cpc	r30, r20
    1b70:	f5 07       	cpc	r31, r21
    1b72:	98 f0       	brcs	.+38     	; 0x1b9a <__fp_cmp+0x46>
    1b74:	62 1b       	sub	r22, r18
    1b76:	73 0b       	sbc	r23, r19
    1b78:	84 0b       	sbc	r24, r20
    1b7a:	95 0b       	sbc	r25, r21
    1b7c:	39 f4       	brne	.+14     	; 0x1b8c <__fp_cmp+0x38>
    1b7e:	0a 26       	eor	r0, r26
    1b80:	61 f0       	breq	.+24     	; 0x1b9a <__fp_cmp+0x46>
    1b82:	23 2b       	or	r18, r19
    1b84:	24 2b       	or	r18, r20
    1b86:	25 2b       	or	r18, r21
    1b88:	21 f4       	brne	.+8      	; 0x1b92 <__fp_cmp+0x3e>
    1b8a:	08 95       	ret
    1b8c:	0a 26       	eor	r0, r26
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <__fp_cmp+0x3e>
    1b90:	a1 40       	sbci	r26, 0x01	; 1
    1b92:	a6 95       	lsr	r26
    1b94:	8f ef       	ldi	r24, 0xFF	; 255
    1b96:	81 1d       	adc	r24, r1
    1b98:	81 1d       	adc	r24, r1
    1b9a:	08 95       	ret

00001b9c <__fp_inf>:
    1b9c:	97 f9       	bld	r25, 7
    1b9e:	9f 67       	ori	r25, 0x7F	; 127
    1ba0:	80 e8       	ldi	r24, 0x80	; 128
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	08 95       	ret

00001ba8 <__fp_nan>:
    1ba8:	9f ef       	ldi	r25, 0xFF	; 255
    1baa:	80 ec       	ldi	r24, 0xC0	; 192
    1bac:	08 95       	ret

00001bae <__fp_pscA>:
    1bae:	00 24       	eor	r0, r0
    1bb0:	0a 94       	dec	r0
    1bb2:	16 16       	cp	r1, r22
    1bb4:	17 06       	cpc	r1, r23
    1bb6:	18 06       	cpc	r1, r24
    1bb8:	09 06       	cpc	r0, r25
    1bba:	08 95       	ret

00001bbc <__fp_pscB>:
    1bbc:	00 24       	eor	r0, r0
    1bbe:	0a 94       	dec	r0
    1bc0:	12 16       	cp	r1, r18
    1bc2:	13 06       	cpc	r1, r19
    1bc4:	14 06       	cpc	r1, r20
    1bc6:	05 06       	cpc	r0, r21
    1bc8:	08 95       	ret

00001bca <__fp_round>:
    1bca:	09 2e       	mov	r0, r25
    1bcc:	03 94       	inc	r0
    1bce:	00 0c       	add	r0, r0
    1bd0:	11 f4       	brne	.+4      	; 0x1bd6 <__fp_round+0xc>
    1bd2:	88 23       	and	r24, r24
    1bd4:	52 f0       	brmi	.+20     	; 0x1bea <__fp_round+0x20>
    1bd6:	bb 0f       	add	r27, r27
    1bd8:	40 f4       	brcc	.+16     	; 0x1bea <__fp_round+0x20>
    1bda:	bf 2b       	or	r27, r31
    1bdc:	11 f4       	brne	.+4      	; 0x1be2 <__fp_round+0x18>
    1bde:	60 ff       	sbrs	r22, 0
    1be0:	04 c0       	rjmp	.+8      	; 0x1bea <__fp_round+0x20>
    1be2:	6f 5f       	subi	r22, 0xFF	; 255
    1be4:	7f 4f       	sbci	r23, 0xFF	; 255
    1be6:	8f 4f       	sbci	r24, 0xFF	; 255
    1be8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bea:	08 95       	ret

00001bec <__fp_split3>:
    1bec:	57 fd       	sbrc	r21, 7
    1bee:	90 58       	subi	r25, 0x80	; 128
    1bf0:	44 0f       	add	r20, r20
    1bf2:	55 1f       	adc	r21, r21
    1bf4:	59 f0       	breq	.+22     	; 0x1c0c <__fp_splitA+0x10>
    1bf6:	5f 3f       	cpi	r21, 0xFF	; 255
    1bf8:	71 f0       	breq	.+28     	; 0x1c16 <__fp_splitA+0x1a>
    1bfa:	47 95       	ror	r20

00001bfc <__fp_splitA>:
    1bfc:	88 0f       	add	r24, r24
    1bfe:	97 fb       	bst	r25, 7
    1c00:	99 1f       	adc	r25, r25
    1c02:	61 f0       	breq	.+24     	; 0x1c1c <__fp_splitA+0x20>
    1c04:	9f 3f       	cpi	r25, 0xFF	; 255
    1c06:	79 f0       	breq	.+30     	; 0x1c26 <__fp_splitA+0x2a>
    1c08:	87 95       	ror	r24
    1c0a:	08 95       	ret
    1c0c:	12 16       	cp	r1, r18
    1c0e:	13 06       	cpc	r1, r19
    1c10:	14 06       	cpc	r1, r20
    1c12:	55 1f       	adc	r21, r21
    1c14:	f2 cf       	rjmp	.-28     	; 0x1bfa <__fp_split3+0xe>
    1c16:	46 95       	lsr	r20
    1c18:	f1 df       	rcall	.-30     	; 0x1bfc <__fp_splitA>
    1c1a:	08 c0       	rjmp	.+16     	; 0x1c2c <__fp_splitA+0x30>
    1c1c:	16 16       	cp	r1, r22
    1c1e:	17 06       	cpc	r1, r23
    1c20:	18 06       	cpc	r1, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	f1 cf       	rjmp	.-30     	; 0x1c08 <__fp_splitA+0xc>
    1c26:	86 95       	lsr	r24
    1c28:	71 05       	cpc	r23, r1
    1c2a:	61 05       	cpc	r22, r1
    1c2c:	08 94       	sec
    1c2e:	08 95       	ret

00001c30 <__fp_zero>:
    1c30:	e8 94       	clt

00001c32 <__fp_szero>:
    1c32:	bb 27       	eor	r27, r27
    1c34:	66 27       	eor	r22, r22
    1c36:	77 27       	eor	r23, r23
    1c38:	cb 01       	movw	r24, r22
    1c3a:	97 f9       	bld	r25, 7
    1c3c:	08 95       	ret

00001c3e <__mulsf3>:
    1c3e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__mulsf3x>
    1c42:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__fp_round>
    1c46:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__fp_pscA>
    1c4a:	38 f0       	brcs	.+14     	; 0x1c5a <__mulsf3+0x1c>
    1c4c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__fp_pscB>
    1c50:	20 f0       	brcs	.+8      	; 0x1c5a <__mulsf3+0x1c>
    1c52:	95 23       	and	r25, r21
    1c54:	11 f0       	breq	.+4      	; 0x1c5a <__mulsf3+0x1c>
    1c56:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__fp_inf>
    1c5a:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__fp_nan>
    1c5e:	11 24       	eor	r1, r1
    1c60:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__fp_szero>

00001c64 <__mulsf3x>:
    1c64:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__fp_split3>
    1c68:	70 f3       	brcs	.-36     	; 0x1c46 <__mulsf3+0x8>

00001c6a <__mulsf3_pse>:
    1c6a:	95 9f       	mul	r25, r21
    1c6c:	c1 f3       	breq	.-16     	; 0x1c5e <__mulsf3+0x20>
    1c6e:	95 0f       	add	r25, r21
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	55 1f       	adc	r21, r21
    1c74:	62 9f       	mul	r22, r18
    1c76:	f0 01       	movw	r30, r0
    1c78:	72 9f       	mul	r23, r18
    1c7a:	bb 27       	eor	r27, r27
    1c7c:	f0 0d       	add	r31, r0
    1c7e:	b1 1d       	adc	r27, r1
    1c80:	63 9f       	mul	r22, r19
    1c82:	aa 27       	eor	r26, r26
    1c84:	f0 0d       	add	r31, r0
    1c86:	b1 1d       	adc	r27, r1
    1c88:	aa 1f       	adc	r26, r26
    1c8a:	64 9f       	mul	r22, r20
    1c8c:	66 27       	eor	r22, r22
    1c8e:	b0 0d       	add	r27, r0
    1c90:	a1 1d       	adc	r26, r1
    1c92:	66 1f       	adc	r22, r22
    1c94:	82 9f       	mul	r24, r18
    1c96:	22 27       	eor	r18, r18
    1c98:	b0 0d       	add	r27, r0
    1c9a:	a1 1d       	adc	r26, r1
    1c9c:	62 1f       	adc	r22, r18
    1c9e:	73 9f       	mul	r23, r19
    1ca0:	b0 0d       	add	r27, r0
    1ca2:	a1 1d       	adc	r26, r1
    1ca4:	62 1f       	adc	r22, r18
    1ca6:	83 9f       	mul	r24, r19
    1ca8:	a0 0d       	add	r26, r0
    1caa:	61 1d       	adc	r22, r1
    1cac:	22 1f       	adc	r18, r18
    1cae:	74 9f       	mul	r23, r20
    1cb0:	33 27       	eor	r19, r19
    1cb2:	a0 0d       	add	r26, r0
    1cb4:	61 1d       	adc	r22, r1
    1cb6:	23 1f       	adc	r18, r19
    1cb8:	84 9f       	mul	r24, r20
    1cba:	60 0d       	add	r22, r0
    1cbc:	21 1d       	adc	r18, r1
    1cbe:	82 2f       	mov	r24, r18
    1cc0:	76 2f       	mov	r23, r22
    1cc2:	6a 2f       	mov	r22, r26
    1cc4:	11 24       	eor	r1, r1
    1cc6:	9f 57       	subi	r25, 0x7F	; 127
    1cc8:	50 40       	sbci	r21, 0x00	; 0
    1cca:	9a f0       	brmi	.+38     	; 0x1cf2 <__mulsf3_pse+0x88>
    1ccc:	f1 f0       	breq	.+60     	; 0x1d0a <__mulsf3_pse+0xa0>
    1cce:	88 23       	and	r24, r24
    1cd0:	4a f0       	brmi	.+18     	; 0x1ce4 <__mulsf3_pse+0x7a>
    1cd2:	ee 0f       	add	r30, r30
    1cd4:	ff 1f       	adc	r31, r31
    1cd6:	bb 1f       	adc	r27, r27
    1cd8:	66 1f       	adc	r22, r22
    1cda:	77 1f       	adc	r23, r23
    1cdc:	88 1f       	adc	r24, r24
    1cde:	91 50       	subi	r25, 0x01	; 1
    1ce0:	50 40       	sbci	r21, 0x00	; 0
    1ce2:	a9 f7       	brne	.-22     	; 0x1cce <__mulsf3_pse+0x64>
    1ce4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ce6:	51 05       	cpc	r21, r1
    1ce8:	80 f0       	brcs	.+32     	; 0x1d0a <__mulsf3_pse+0xa0>
    1cea:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__fp_inf>
    1cee:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__fp_szero>
    1cf2:	5f 3f       	cpi	r21, 0xFF	; 255
    1cf4:	e4 f3       	brlt	.-8      	; 0x1cee <__mulsf3_pse+0x84>
    1cf6:	98 3e       	cpi	r25, 0xE8	; 232
    1cf8:	d4 f3       	brlt	.-12     	; 0x1cee <__mulsf3_pse+0x84>
    1cfa:	86 95       	lsr	r24
    1cfc:	77 95       	ror	r23
    1cfe:	67 95       	ror	r22
    1d00:	b7 95       	ror	r27
    1d02:	f7 95       	ror	r31
    1d04:	e7 95       	ror	r30
    1d06:	9f 5f       	subi	r25, 0xFF	; 255
    1d08:	c1 f7       	brne	.-16     	; 0x1cfa <__mulsf3_pse+0x90>
    1d0a:	fe 2b       	or	r31, r30
    1d0c:	88 0f       	add	r24, r24
    1d0e:	91 1d       	adc	r25, r1
    1d10:	96 95       	lsr	r25
    1d12:	87 95       	ror	r24
    1d14:	97 f9       	bld	r25, 7
    1d16:	08 95       	ret

00001d18 <vfprintf>:
    1d18:	a0 e1       	ldi	r26, 0x10	; 16
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	e2 e9       	ldi	r30, 0x92	; 146
    1d1e:	fe e0       	ldi	r31, 0x0E	; 14
    1d20:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__prologue_saves__>
    1d24:	7c 01       	movw	r14, r24
    1d26:	1b 01       	movw	r2, r22
    1d28:	6a 01       	movw	r12, r20
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	17 82       	std	Z+7, r1	; 0x07
    1d2e:	16 82       	std	Z+6, r1	; 0x06
    1d30:	83 81       	ldd	r24, Z+3	; 0x03
    1d32:	81 ff       	sbrs	r24, 1
    1d34:	44 c3       	rjmp	.+1672   	; 0x23be <vfprintf+0x6a6>
    1d36:	9e 01       	movw	r18, r28
    1d38:	2f 5f       	subi	r18, 0xFF	; 255
    1d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3c:	39 01       	movw	r6, r18
    1d3e:	f7 01       	movw	r30, r14
    1d40:	93 81       	ldd	r25, Z+3	; 0x03
    1d42:	f1 01       	movw	r30, r2
    1d44:	93 fd       	sbrc	r25, 3
    1d46:	85 91       	lpm	r24, Z+
    1d48:	93 ff       	sbrs	r25, 3
    1d4a:	81 91       	ld	r24, Z+
    1d4c:	1f 01       	movw	r2, r30
    1d4e:	88 23       	and	r24, r24
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <vfprintf+0x3c>
    1d52:	31 c3       	rjmp	.+1634   	; 0x23b6 <vfprintf+0x69e>
    1d54:	85 32       	cpi	r24, 0x25	; 37
    1d56:	39 f4       	brne	.+14     	; 0x1d66 <vfprintf+0x4e>
    1d58:	93 fd       	sbrc	r25, 3
    1d5a:	85 91       	lpm	r24, Z+
    1d5c:	93 ff       	sbrs	r25, 3
    1d5e:	81 91       	ld	r24, Z+
    1d60:	1f 01       	movw	r2, r30
    1d62:	85 32       	cpi	r24, 0x25	; 37
    1d64:	39 f4       	brne	.+14     	; 0x1d74 <vfprintf+0x5c>
    1d66:	b7 01       	movw	r22, r14
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    1d6e:	56 01       	movw	r10, r12
    1d70:	65 01       	movw	r12, r10
    1d72:	e5 cf       	rjmp	.-54     	; 0x1d3e <vfprintf+0x26>
    1d74:	10 e0       	ldi	r17, 0x00	; 0
    1d76:	51 2c       	mov	r5, r1
    1d78:	91 2c       	mov	r9, r1
    1d7a:	ff e1       	ldi	r31, 0x1F	; 31
    1d7c:	f9 15       	cp	r31, r9
    1d7e:	d8 f0       	brcs	.+54     	; 0x1db6 <vfprintf+0x9e>
    1d80:	8b 32       	cpi	r24, 0x2B	; 43
    1d82:	79 f0       	breq	.+30     	; 0x1da2 <vfprintf+0x8a>
    1d84:	38 f4       	brcc	.+14     	; 0x1d94 <vfprintf+0x7c>
    1d86:	80 32       	cpi	r24, 0x20	; 32
    1d88:	79 f0       	breq	.+30     	; 0x1da8 <vfprintf+0x90>
    1d8a:	83 32       	cpi	r24, 0x23	; 35
    1d8c:	a1 f4       	brne	.+40     	; 0x1db6 <vfprintf+0x9e>
    1d8e:	f9 2d       	mov	r31, r9
    1d90:	f0 61       	ori	r31, 0x10	; 16
    1d92:	2e c0       	rjmp	.+92     	; 0x1df0 <vfprintf+0xd8>
    1d94:	8d 32       	cpi	r24, 0x2D	; 45
    1d96:	61 f0       	breq	.+24     	; 0x1db0 <vfprintf+0x98>
    1d98:	80 33       	cpi	r24, 0x30	; 48
    1d9a:	69 f4       	brne	.+26     	; 0x1db6 <vfprintf+0x9e>
    1d9c:	29 2d       	mov	r18, r9
    1d9e:	21 60       	ori	r18, 0x01	; 1
    1da0:	2d c0       	rjmp	.+90     	; 0x1dfc <vfprintf+0xe4>
    1da2:	39 2d       	mov	r19, r9
    1da4:	32 60       	ori	r19, 0x02	; 2
    1da6:	93 2e       	mov	r9, r19
    1da8:	89 2d       	mov	r24, r9
    1daa:	84 60       	ori	r24, 0x04	; 4
    1dac:	98 2e       	mov	r9, r24
    1dae:	2a c0       	rjmp	.+84     	; 0x1e04 <vfprintf+0xec>
    1db0:	e9 2d       	mov	r30, r9
    1db2:	e8 60       	ori	r30, 0x08	; 8
    1db4:	15 c0       	rjmp	.+42     	; 0x1de0 <vfprintf+0xc8>
    1db6:	97 fc       	sbrc	r9, 7
    1db8:	2d c0       	rjmp	.+90     	; 0x1e14 <vfprintf+0xfc>
    1dba:	20 ed       	ldi	r18, 0xD0	; 208
    1dbc:	28 0f       	add	r18, r24
    1dbe:	2a 30       	cpi	r18, 0x0A	; 10
    1dc0:	88 f4       	brcc	.+34     	; 0x1de4 <vfprintf+0xcc>
    1dc2:	96 fe       	sbrs	r9, 6
    1dc4:	06 c0       	rjmp	.+12     	; 0x1dd2 <vfprintf+0xba>
    1dc6:	3a e0       	ldi	r19, 0x0A	; 10
    1dc8:	13 9f       	mul	r17, r19
    1dca:	20 0d       	add	r18, r0
    1dcc:	11 24       	eor	r1, r1
    1dce:	12 2f       	mov	r17, r18
    1dd0:	19 c0       	rjmp	.+50     	; 0x1e04 <vfprintf+0xec>
    1dd2:	8a e0       	ldi	r24, 0x0A	; 10
    1dd4:	58 9e       	mul	r5, r24
    1dd6:	20 0d       	add	r18, r0
    1dd8:	11 24       	eor	r1, r1
    1dda:	52 2e       	mov	r5, r18
    1ddc:	e9 2d       	mov	r30, r9
    1dde:	e0 62       	ori	r30, 0x20	; 32
    1de0:	9e 2e       	mov	r9, r30
    1de2:	10 c0       	rjmp	.+32     	; 0x1e04 <vfprintf+0xec>
    1de4:	8e 32       	cpi	r24, 0x2E	; 46
    1de6:	31 f4       	brne	.+12     	; 0x1df4 <vfprintf+0xdc>
    1de8:	96 fc       	sbrc	r9, 6
    1dea:	e5 c2       	rjmp	.+1482   	; 0x23b6 <vfprintf+0x69e>
    1dec:	f9 2d       	mov	r31, r9
    1dee:	f0 64       	ori	r31, 0x40	; 64
    1df0:	9f 2e       	mov	r9, r31
    1df2:	08 c0       	rjmp	.+16     	; 0x1e04 <vfprintf+0xec>
    1df4:	8c 36       	cpi	r24, 0x6C	; 108
    1df6:	21 f4       	brne	.+8      	; 0x1e00 <vfprintf+0xe8>
    1df8:	29 2d       	mov	r18, r9
    1dfa:	20 68       	ori	r18, 0x80	; 128
    1dfc:	92 2e       	mov	r9, r18
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <vfprintf+0xec>
    1e00:	88 36       	cpi	r24, 0x68	; 104
    1e02:	41 f4       	brne	.+16     	; 0x1e14 <vfprintf+0xfc>
    1e04:	f1 01       	movw	r30, r2
    1e06:	93 fd       	sbrc	r25, 3
    1e08:	85 91       	lpm	r24, Z+
    1e0a:	93 ff       	sbrs	r25, 3
    1e0c:	81 91       	ld	r24, Z+
    1e0e:	1f 01       	movw	r2, r30
    1e10:	81 11       	cpse	r24, r1
    1e12:	b3 cf       	rjmp	.-154    	; 0x1d7a <vfprintf+0x62>
    1e14:	9b eb       	ldi	r25, 0xBB	; 187
    1e16:	98 0f       	add	r25, r24
    1e18:	93 30       	cpi	r25, 0x03	; 3
    1e1a:	20 f4       	brcc	.+8      	; 0x1e24 <vfprintf+0x10c>
    1e1c:	99 2d       	mov	r25, r9
    1e1e:	90 61       	ori	r25, 0x10	; 16
    1e20:	80 5e       	subi	r24, 0xE0	; 224
    1e22:	07 c0       	rjmp	.+14     	; 0x1e32 <vfprintf+0x11a>
    1e24:	9b e9       	ldi	r25, 0x9B	; 155
    1e26:	98 0f       	add	r25, r24
    1e28:	93 30       	cpi	r25, 0x03	; 3
    1e2a:	08 f0       	brcs	.+2      	; 0x1e2e <vfprintf+0x116>
    1e2c:	66 c1       	rjmp	.+716    	; 0x20fa <vfprintf+0x3e2>
    1e2e:	99 2d       	mov	r25, r9
    1e30:	9f 7e       	andi	r25, 0xEF	; 239
    1e32:	96 ff       	sbrs	r25, 6
    1e34:	16 e0       	ldi	r17, 0x06	; 6
    1e36:	9f 73       	andi	r25, 0x3F	; 63
    1e38:	99 2e       	mov	r9, r25
    1e3a:	85 36       	cpi	r24, 0x65	; 101
    1e3c:	19 f4       	brne	.+6      	; 0x1e44 <vfprintf+0x12c>
    1e3e:	90 64       	ori	r25, 0x40	; 64
    1e40:	99 2e       	mov	r9, r25
    1e42:	08 c0       	rjmp	.+16     	; 0x1e54 <vfprintf+0x13c>
    1e44:	86 36       	cpi	r24, 0x66	; 102
    1e46:	21 f4       	brne	.+8      	; 0x1e50 <vfprintf+0x138>
    1e48:	39 2f       	mov	r19, r25
    1e4a:	30 68       	ori	r19, 0x80	; 128
    1e4c:	93 2e       	mov	r9, r19
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <vfprintf+0x13c>
    1e50:	11 11       	cpse	r17, r1
    1e52:	11 50       	subi	r17, 0x01	; 1
    1e54:	97 fe       	sbrs	r9, 7
    1e56:	07 c0       	rjmp	.+14     	; 0x1e66 <vfprintf+0x14e>
    1e58:	1c 33       	cpi	r17, 0x3C	; 60
    1e5a:	50 f4       	brcc	.+20     	; 0x1e70 <vfprintf+0x158>
    1e5c:	44 24       	eor	r4, r4
    1e5e:	43 94       	inc	r4
    1e60:	41 0e       	add	r4, r17
    1e62:	27 e0       	ldi	r18, 0x07	; 7
    1e64:	0b c0       	rjmp	.+22     	; 0x1e7c <vfprintf+0x164>
    1e66:	18 30       	cpi	r17, 0x08	; 8
    1e68:	38 f0       	brcs	.+14     	; 0x1e78 <vfprintf+0x160>
    1e6a:	27 e0       	ldi	r18, 0x07	; 7
    1e6c:	17 e0       	ldi	r17, 0x07	; 7
    1e6e:	05 c0       	rjmp	.+10     	; 0x1e7a <vfprintf+0x162>
    1e70:	27 e0       	ldi	r18, 0x07	; 7
    1e72:	9c e3       	ldi	r25, 0x3C	; 60
    1e74:	49 2e       	mov	r4, r25
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <vfprintf+0x164>
    1e78:	21 2f       	mov	r18, r17
    1e7a:	41 2c       	mov	r4, r1
    1e7c:	56 01       	movw	r10, r12
    1e7e:	84 e0       	ldi	r24, 0x04	; 4
    1e80:	a8 0e       	add	r10, r24
    1e82:	b1 1c       	adc	r11, r1
    1e84:	f6 01       	movw	r30, r12
    1e86:	60 81       	ld	r22, Z
    1e88:	71 81       	ldd	r23, Z+1	; 0x01
    1e8a:	82 81       	ldd	r24, Z+2	; 0x02
    1e8c:	93 81       	ldd	r25, Z+3	; 0x03
    1e8e:	04 2d       	mov	r16, r4
    1e90:	a3 01       	movw	r20, r6
    1e92:	0e 94 1a 13 	call	0x2634	; 0x2634 <__ftoa_engine>
    1e96:	6c 01       	movw	r12, r24
    1e98:	f9 81       	ldd	r31, Y+1	; 0x01
    1e9a:	fc 87       	std	Y+12, r31	; 0x0c
    1e9c:	f0 ff       	sbrs	r31, 0
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <vfprintf+0x18c>
    1ea0:	f3 ff       	sbrs	r31, 3
    1ea2:	06 c0       	rjmp	.+12     	; 0x1eb0 <vfprintf+0x198>
    1ea4:	91 fc       	sbrc	r9, 1
    1ea6:	06 c0       	rjmp	.+12     	; 0x1eb4 <vfprintf+0x19c>
    1ea8:	92 fe       	sbrs	r9, 2
    1eaa:	06 c0       	rjmp	.+12     	; 0x1eb8 <vfprintf+0x1a0>
    1eac:	00 e2       	ldi	r16, 0x20	; 32
    1eae:	05 c0       	rjmp	.+10     	; 0x1eba <vfprintf+0x1a2>
    1eb0:	0d e2       	ldi	r16, 0x2D	; 45
    1eb2:	03 c0       	rjmp	.+6      	; 0x1eba <vfprintf+0x1a2>
    1eb4:	0b e2       	ldi	r16, 0x2B	; 43
    1eb6:	01 c0       	rjmp	.+2      	; 0x1eba <vfprintf+0x1a2>
    1eb8:	00 e0       	ldi	r16, 0x00	; 0
    1eba:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ebc:	8c 70       	andi	r24, 0x0C	; 12
    1ebe:	19 f0       	breq	.+6      	; 0x1ec6 <vfprintf+0x1ae>
    1ec0:	01 11       	cpse	r16, r1
    1ec2:	5a c2       	rjmp	.+1204   	; 0x2378 <vfprintf+0x660>
    1ec4:	9b c2       	rjmp	.+1334   	; 0x23fc <vfprintf+0x6e4>
    1ec6:	97 fe       	sbrs	r9, 7
    1ec8:	10 c0       	rjmp	.+32     	; 0x1eea <vfprintf+0x1d2>
    1eca:	4c 0c       	add	r4, r12
    1ecc:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ece:	f4 ff       	sbrs	r31, 4
    1ed0:	04 c0       	rjmp	.+8      	; 0x1eda <vfprintf+0x1c2>
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	81 33       	cpi	r24, 0x31	; 49
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <vfprintf+0x1c2>
    1ed8:	4a 94       	dec	r4
    1eda:	14 14       	cp	r1, r4
    1edc:	74 f5       	brge	.+92     	; 0x1f3a <vfprintf+0x222>
    1ede:	28 e0       	ldi	r18, 0x08	; 8
    1ee0:	24 15       	cp	r18, r4
    1ee2:	78 f5       	brcc	.+94     	; 0x1f42 <vfprintf+0x22a>
    1ee4:	88 e0       	ldi	r24, 0x08	; 8
    1ee6:	48 2e       	mov	r4, r24
    1ee8:	2c c0       	rjmp	.+88     	; 0x1f42 <vfprintf+0x22a>
    1eea:	96 fc       	sbrc	r9, 6
    1eec:	2a c0       	rjmp	.+84     	; 0x1f42 <vfprintf+0x22a>
    1eee:	81 2f       	mov	r24, r17
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	8c 15       	cp	r24, r12
    1ef4:	9d 05       	cpc	r25, r13
    1ef6:	9c f0       	brlt	.+38     	; 0x1f1e <vfprintf+0x206>
    1ef8:	3c ef       	ldi	r19, 0xFC	; 252
    1efa:	c3 16       	cp	r12, r19
    1efc:	3f ef       	ldi	r19, 0xFF	; 255
    1efe:	d3 06       	cpc	r13, r19
    1f00:	74 f0       	brlt	.+28     	; 0x1f1e <vfprintf+0x206>
    1f02:	89 2d       	mov	r24, r9
    1f04:	80 68       	ori	r24, 0x80	; 128
    1f06:	98 2e       	mov	r9, r24
    1f08:	0a c0       	rjmp	.+20     	; 0x1f1e <vfprintf+0x206>
    1f0a:	e2 e0       	ldi	r30, 0x02	; 2
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	ec 0f       	add	r30, r28
    1f10:	fd 1f       	adc	r31, r29
    1f12:	e1 0f       	add	r30, r17
    1f14:	f1 1d       	adc	r31, r1
    1f16:	80 81       	ld	r24, Z
    1f18:	80 33       	cpi	r24, 0x30	; 48
    1f1a:	19 f4       	brne	.+6      	; 0x1f22 <vfprintf+0x20a>
    1f1c:	11 50       	subi	r17, 0x01	; 1
    1f1e:	11 11       	cpse	r17, r1
    1f20:	f4 cf       	rjmp	.-24     	; 0x1f0a <vfprintf+0x1f2>
    1f22:	97 fe       	sbrs	r9, 7
    1f24:	0e c0       	rjmp	.+28     	; 0x1f42 <vfprintf+0x22a>
    1f26:	44 24       	eor	r4, r4
    1f28:	43 94       	inc	r4
    1f2a:	41 0e       	add	r4, r17
    1f2c:	81 2f       	mov	r24, r17
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	c8 16       	cp	r12, r24
    1f32:	d9 06       	cpc	r13, r25
    1f34:	2c f4       	brge	.+10     	; 0x1f40 <vfprintf+0x228>
    1f36:	1c 19       	sub	r17, r12
    1f38:	04 c0       	rjmp	.+8      	; 0x1f42 <vfprintf+0x22a>
    1f3a:	44 24       	eor	r4, r4
    1f3c:	43 94       	inc	r4
    1f3e:	01 c0       	rjmp	.+2      	; 0x1f42 <vfprintf+0x22a>
    1f40:	10 e0       	ldi	r17, 0x00	; 0
    1f42:	97 fe       	sbrs	r9, 7
    1f44:	06 c0       	rjmp	.+12     	; 0x1f52 <vfprintf+0x23a>
    1f46:	1c 14       	cp	r1, r12
    1f48:	1d 04       	cpc	r1, r13
    1f4a:	34 f4       	brge	.+12     	; 0x1f58 <vfprintf+0x240>
    1f4c:	c6 01       	movw	r24, r12
    1f4e:	01 96       	adiw	r24, 0x01	; 1
    1f50:	05 c0       	rjmp	.+10     	; 0x1f5c <vfprintf+0x244>
    1f52:	85 e0       	ldi	r24, 0x05	; 5
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <vfprintf+0x244>
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	01 11       	cpse	r16, r1
    1f5e:	01 96       	adiw	r24, 0x01	; 1
    1f60:	11 23       	and	r17, r17
    1f62:	31 f0       	breq	.+12     	; 0x1f70 <vfprintf+0x258>
    1f64:	21 2f       	mov	r18, r17
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	2f 5f       	subi	r18, 0xFF	; 255
    1f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6c:	82 0f       	add	r24, r18
    1f6e:	93 1f       	adc	r25, r19
    1f70:	25 2d       	mov	r18, r5
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	82 17       	cp	r24, r18
    1f76:	93 07       	cpc	r25, r19
    1f78:	14 f4       	brge	.+4      	; 0x1f7e <vfprintf+0x266>
    1f7a:	58 1a       	sub	r5, r24
    1f7c:	01 c0       	rjmp	.+2      	; 0x1f80 <vfprintf+0x268>
    1f7e:	51 2c       	mov	r5, r1
    1f80:	89 2d       	mov	r24, r9
    1f82:	89 70       	andi	r24, 0x09	; 9
    1f84:	49 f4       	brne	.+18     	; 0x1f98 <vfprintf+0x280>
    1f86:	55 20       	and	r5, r5
    1f88:	39 f0       	breq	.+14     	; 0x1f98 <vfprintf+0x280>
    1f8a:	b7 01       	movw	r22, r14
    1f8c:	80 e2       	ldi	r24, 0x20	; 32
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    1f94:	5a 94       	dec	r5
    1f96:	f7 cf       	rjmp	.-18     	; 0x1f86 <vfprintf+0x26e>
    1f98:	00 23       	and	r16, r16
    1f9a:	29 f0       	breq	.+10     	; 0x1fa6 <vfprintf+0x28e>
    1f9c:	b7 01       	movw	r22, r14
    1f9e:	80 2f       	mov	r24, r16
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    1fa6:	93 fc       	sbrc	r9, 3
    1fa8:	09 c0       	rjmp	.+18     	; 0x1fbc <vfprintf+0x2a4>
    1faa:	55 20       	and	r5, r5
    1fac:	39 f0       	breq	.+14     	; 0x1fbc <vfprintf+0x2a4>
    1fae:	b7 01       	movw	r22, r14
    1fb0:	80 e3       	ldi	r24, 0x30	; 48
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    1fb8:	5a 94       	dec	r5
    1fba:	f7 cf       	rjmp	.-18     	; 0x1faa <vfprintf+0x292>
    1fbc:	97 fe       	sbrs	r9, 7
    1fbe:	4c c0       	rjmp	.+152    	; 0x2058 <vfprintf+0x340>
    1fc0:	46 01       	movw	r8, r12
    1fc2:	d7 fe       	sbrs	r13, 7
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <vfprintf+0x2b2>
    1fc6:	81 2c       	mov	r8, r1
    1fc8:	91 2c       	mov	r9, r1
    1fca:	c6 01       	movw	r24, r12
    1fcc:	88 19       	sub	r24, r8
    1fce:	99 09       	sbc	r25, r9
    1fd0:	f3 01       	movw	r30, r6
    1fd2:	e8 0f       	add	r30, r24
    1fd4:	f9 1f       	adc	r31, r25
    1fd6:	fe 87       	std	Y+14, r31	; 0x0e
    1fd8:	ed 87       	std	Y+13, r30	; 0x0d
    1fda:	96 01       	movw	r18, r12
    1fdc:	24 19       	sub	r18, r4
    1fde:	31 09       	sbc	r19, r1
    1fe0:	38 8b       	std	Y+16, r19	; 0x10
    1fe2:	2f 87       	std	Y+15, r18	; 0x0f
    1fe4:	01 2f       	mov	r16, r17
    1fe6:	10 e0       	ldi	r17, 0x00	; 0
    1fe8:	11 95       	neg	r17
    1fea:	01 95       	neg	r16
    1fec:	11 09       	sbc	r17, r1
    1fee:	3f ef       	ldi	r19, 0xFF	; 255
    1ff0:	83 16       	cp	r8, r19
    1ff2:	93 06       	cpc	r9, r19
    1ff4:	29 f4       	brne	.+10     	; 0x2000 <vfprintf+0x2e8>
    1ff6:	b7 01       	movw	r22, r14
    1ff8:	8e e2       	ldi	r24, 0x2E	; 46
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    2000:	c8 14       	cp	r12, r8
    2002:	d9 04       	cpc	r13, r9
    2004:	4c f0       	brlt	.+18     	; 0x2018 <vfprintf+0x300>
    2006:	8f 85       	ldd	r24, Y+15	; 0x0f
    2008:	98 89       	ldd	r25, Y+16	; 0x10
    200a:	88 15       	cp	r24, r8
    200c:	99 05       	cpc	r25, r9
    200e:	24 f4       	brge	.+8      	; 0x2018 <vfprintf+0x300>
    2010:	ed 85       	ldd	r30, Y+13	; 0x0d
    2012:	fe 85       	ldd	r31, Y+14	; 0x0e
    2014:	81 81       	ldd	r24, Z+1	; 0x01
    2016:	01 c0       	rjmp	.+2      	; 0x201a <vfprintf+0x302>
    2018:	80 e3       	ldi	r24, 0x30	; 48
    201a:	f1 e0       	ldi	r31, 0x01	; 1
    201c:	8f 1a       	sub	r8, r31
    201e:	91 08       	sbc	r9, r1
    2020:	2d 85       	ldd	r18, Y+13	; 0x0d
    2022:	3e 85       	ldd	r19, Y+14	; 0x0e
    2024:	2f 5f       	subi	r18, 0xFF	; 255
    2026:	3f 4f       	sbci	r19, 0xFF	; 255
    2028:	3e 87       	std	Y+14, r19	; 0x0e
    202a:	2d 87       	std	Y+13, r18	; 0x0d
    202c:	80 16       	cp	r8, r16
    202e:	91 06       	cpc	r9, r17
    2030:	2c f0       	brlt	.+10     	; 0x203c <vfprintf+0x324>
    2032:	b7 01       	movw	r22, r14
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    203a:	d9 cf       	rjmp	.-78     	; 0x1fee <vfprintf+0x2d6>
    203c:	c8 14       	cp	r12, r8
    203e:	d9 04       	cpc	r13, r9
    2040:	41 f4       	brne	.+16     	; 0x2052 <vfprintf+0x33a>
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	96 33       	cpi	r25, 0x36	; 54
    2046:	20 f4       	brcc	.+8      	; 0x2050 <vfprintf+0x338>
    2048:	95 33       	cpi	r25, 0x35	; 53
    204a:	19 f4       	brne	.+6      	; 0x2052 <vfprintf+0x33a>
    204c:	3c 85       	ldd	r19, Y+12	; 0x0c
    204e:	34 ff       	sbrs	r19, 4
    2050:	81 e3       	ldi	r24, 0x31	; 49
    2052:	b7 01       	movw	r22, r14
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	4e c0       	rjmp	.+156    	; 0x20f4 <vfprintf+0x3dc>
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	81 33       	cpi	r24, 0x31	; 49
    205c:	19 f0       	breq	.+6      	; 0x2064 <vfprintf+0x34c>
    205e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2060:	9f 7e       	andi	r25, 0xEF	; 239
    2062:	9c 87       	std	Y+12, r25	; 0x0c
    2064:	b7 01       	movw	r22, r14
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    206c:	11 11       	cpse	r17, r1
    206e:	05 c0       	rjmp	.+10     	; 0x207a <vfprintf+0x362>
    2070:	94 fc       	sbrc	r9, 4
    2072:	18 c0       	rjmp	.+48     	; 0x20a4 <vfprintf+0x38c>
    2074:	85 e6       	ldi	r24, 0x65	; 101
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	17 c0       	rjmp	.+46     	; 0x20a8 <vfprintf+0x390>
    207a:	b7 01       	movw	r22, r14
    207c:	8e e2       	ldi	r24, 0x2E	; 46
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    2084:	1e 5f       	subi	r17, 0xFE	; 254
    2086:	82 e0       	ldi	r24, 0x02	; 2
    2088:	01 e0       	ldi	r16, 0x01	; 1
    208a:	08 0f       	add	r16, r24
    208c:	f3 01       	movw	r30, r6
    208e:	e8 0f       	add	r30, r24
    2090:	f1 1d       	adc	r31, r1
    2092:	80 81       	ld	r24, Z
    2094:	b7 01       	movw	r22, r14
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    209c:	80 2f       	mov	r24, r16
    209e:	01 13       	cpse	r16, r17
    20a0:	f3 cf       	rjmp	.-26     	; 0x2088 <vfprintf+0x370>
    20a2:	e6 cf       	rjmp	.-52     	; 0x2070 <vfprintf+0x358>
    20a4:	85 e4       	ldi	r24, 0x45	; 69
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	b7 01       	movw	r22, r14
    20aa:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    20ae:	d7 fc       	sbrc	r13, 7
    20b0:	06 c0       	rjmp	.+12     	; 0x20be <vfprintf+0x3a6>
    20b2:	c1 14       	cp	r12, r1
    20b4:	d1 04       	cpc	r13, r1
    20b6:	41 f4       	brne	.+16     	; 0x20c8 <vfprintf+0x3b0>
    20b8:	ec 85       	ldd	r30, Y+12	; 0x0c
    20ba:	e4 ff       	sbrs	r30, 4
    20bc:	05 c0       	rjmp	.+10     	; 0x20c8 <vfprintf+0x3b0>
    20be:	d1 94       	neg	r13
    20c0:	c1 94       	neg	r12
    20c2:	d1 08       	sbc	r13, r1
    20c4:	8d e2       	ldi	r24, 0x2D	; 45
    20c6:	01 c0       	rjmp	.+2      	; 0x20ca <vfprintf+0x3b2>
    20c8:	8b e2       	ldi	r24, 0x2B	; 43
    20ca:	b7 01       	movw	r22, r14
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    20d2:	80 e3       	ldi	r24, 0x30	; 48
    20d4:	2a e0       	ldi	r18, 0x0A	; 10
    20d6:	c2 16       	cp	r12, r18
    20d8:	d1 04       	cpc	r13, r1
    20da:	2c f0       	brlt	.+10     	; 0x20e6 <vfprintf+0x3ce>
    20dc:	8f 5f       	subi	r24, 0xFF	; 255
    20de:	fa e0       	ldi	r31, 0x0A	; 10
    20e0:	cf 1a       	sub	r12, r31
    20e2:	d1 08       	sbc	r13, r1
    20e4:	f7 cf       	rjmp	.-18     	; 0x20d4 <vfprintf+0x3bc>
    20e6:	b7 01       	movw	r22, r14
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    20ee:	b7 01       	movw	r22, r14
    20f0:	c6 01       	movw	r24, r12
    20f2:	c0 96       	adiw	r24, 0x30	; 48
    20f4:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    20f8:	54 c1       	rjmp	.+680    	; 0x23a2 <vfprintf+0x68a>
    20fa:	83 36       	cpi	r24, 0x63	; 99
    20fc:	31 f0       	breq	.+12     	; 0x210a <vfprintf+0x3f2>
    20fe:	83 37       	cpi	r24, 0x73	; 115
    2100:	79 f0       	breq	.+30     	; 0x2120 <vfprintf+0x408>
    2102:	83 35       	cpi	r24, 0x53	; 83
    2104:	09 f0       	breq	.+2      	; 0x2108 <vfprintf+0x3f0>
    2106:	56 c0       	rjmp	.+172    	; 0x21b4 <vfprintf+0x49c>
    2108:	20 c0       	rjmp	.+64     	; 0x214a <vfprintf+0x432>
    210a:	56 01       	movw	r10, r12
    210c:	32 e0       	ldi	r19, 0x02	; 2
    210e:	a3 0e       	add	r10, r19
    2110:	b1 1c       	adc	r11, r1
    2112:	f6 01       	movw	r30, r12
    2114:	80 81       	ld	r24, Z
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	01 e0       	ldi	r16, 0x01	; 1
    211a:	10 e0       	ldi	r17, 0x00	; 0
    211c:	63 01       	movw	r12, r6
    211e:	12 c0       	rjmp	.+36     	; 0x2144 <vfprintf+0x42c>
    2120:	56 01       	movw	r10, r12
    2122:	f2 e0       	ldi	r31, 0x02	; 2
    2124:	af 0e       	add	r10, r31
    2126:	b1 1c       	adc	r11, r1
    2128:	f6 01       	movw	r30, r12
    212a:	c0 80       	ld	r12, Z
    212c:	d1 80       	ldd	r13, Z+1	; 0x01
    212e:	96 fe       	sbrs	r9, 6
    2130:	03 c0       	rjmp	.+6      	; 0x2138 <vfprintf+0x420>
    2132:	61 2f       	mov	r22, r17
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	02 c0       	rjmp	.+4      	; 0x213c <vfprintf+0x424>
    2138:	6f ef       	ldi	r22, 0xFF	; 255
    213a:	7f ef       	ldi	r23, 0xFF	; 255
    213c:	c6 01       	movw	r24, r12
    213e:	0e 94 fd 13 	call	0x27fa	; 0x27fa <strnlen>
    2142:	8c 01       	movw	r16, r24
    2144:	f9 2d       	mov	r31, r9
    2146:	ff 77       	andi	r31, 0x7F	; 127
    2148:	14 c0       	rjmp	.+40     	; 0x2172 <vfprintf+0x45a>
    214a:	56 01       	movw	r10, r12
    214c:	22 e0       	ldi	r18, 0x02	; 2
    214e:	a2 0e       	add	r10, r18
    2150:	b1 1c       	adc	r11, r1
    2152:	f6 01       	movw	r30, r12
    2154:	c0 80       	ld	r12, Z
    2156:	d1 80       	ldd	r13, Z+1	; 0x01
    2158:	96 fe       	sbrs	r9, 6
    215a:	03 c0       	rjmp	.+6      	; 0x2162 <vfprintf+0x44a>
    215c:	61 2f       	mov	r22, r17
    215e:	70 e0       	ldi	r23, 0x00	; 0
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <vfprintf+0x44e>
    2162:	6f ef       	ldi	r22, 0xFF	; 255
    2164:	7f ef       	ldi	r23, 0xFF	; 255
    2166:	c6 01       	movw	r24, r12
    2168:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <strnlen_P>
    216c:	8c 01       	movw	r16, r24
    216e:	f9 2d       	mov	r31, r9
    2170:	f0 68       	ori	r31, 0x80	; 128
    2172:	9f 2e       	mov	r9, r31
    2174:	f3 fd       	sbrc	r31, 3
    2176:	1a c0       	rjmp	.+52     	; 0x21ac <vfprintf+0x494>
    2178:	85 2d       	mov	r24, r5
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	08 17       	cp	r16, r24
    217e:	19 07       	cpc	r17, r25
    2180:	a8 f4       	brcc	.+42     	; 0x21ac <vfprintf+0x494>
    2182:	b7 01       	movw	r22, r14
    2184:	80 e2       	ldi	r24, 0x20	; 32
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    218c:	5a 94       	dec	r5
    218e:	f4 cf       	rjmp	.-24     	; 0x2178 <vfprintf+0x460>
    2190:	f6 01       	movw	r30, r12
    2192:	97 fc       	sbrc	r9, 7
    2194:	85 91       	lpm	r24, Z+
    2196:	97 fe       	sbrs	r9, 7
    2198:	81 91       	ld	r24, Z+
    219a:	6f 01       	movw	r12, r30
    219c:	b7 01       	movw	r22, r14
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    21a4:	51 10       	cpse	r5, r1
    21a6:	5a 94       	dec	r5
    21a8:	01 50       	subi	r16, 0x01	; 1
    21aa:	11 09       	sbc	r17, r1
    21ac:	01 15       	cp	r16, r1
    21ae:	11 05       	cpc	r17, r1
    21b0:	79 f7       	brne	.-34     	; 0x2190 <vfprintf+0x478>
    21b2:	f7 c0       	rjmp	.+494    	; 0x23a2 <vfprintf+0x68a>
    21b4:	84 36       	cpi	r24, 0x64	; 100
    21b6:	11 f0       	breq	.+4      	; 0x21bc <vfprintf+0x4a4>
    21b8:	89 36       	cpi	r24, 0x69	; 105
    21ba:	61 f5       	brne	.+88     	; 0x2214 <vfprintf+0x4fc>
    21bc:	56 01       	movw	r10, r12
    21be:	97 fe       	sbrs	r9, 7
    21c0:	09 c0       	rjmp	.+18     	; 0x21d4 <vfprintf+0x4bc>
    21c2:	24 e0       	ldi	r18, 0x04	; 4
    21c4:	a2 0e       	add	r10, r18
    21c6:	b1 1c       	adc	r11, r1
    21c8:	f6 01       	movw	r30, r12
    21ca:	60 81       	ld	r22, Z
    21cc:	71 81       	ldd	r23, Z+1	; 0x01
    21ce:	82 81       	ldd	r24, Z+2	; 0x02
    21d0:	93 81       	ldd	r25, Z+3	; 0x03
    21d2:	0a c0       	rjmp	.+20     	; 0x21e8 <vfprintf+0x4d0>
    21d4:	f2 e0       	ldi	r31, 0x02	; 2
    21d6:	af 0e       	add	r10, r31
    21d8:	b1 1c       	adc	r11, r1
    21da:	f6 01       	movw	r30, r12
    21dc:	60 81       	ld	r22, Z
    21de:	71 81       	ldd	r23, Z+1	; 0x01
    21e0:	07 2e       	mov	r0, r23
    21e2:	00 0c       	add	r0, r0
    21e4:	88 0b       	sbc	r24, r24
    21e6:	99 0b       	sbc	r25, r25
    21e8:	f9 2d       	mov	r31, r9
    21ea:	ff 76       	andi	r31, 0x6F	; 111
    21ec:	9f 2e       	mov	r9, r31
    21ee:	97 ff       	sbrs	r25, 7
    21f0:	09 c0       	rjmp	.+18     	; 0x2204 <vfprintf+0x4ec>
    21f2:	90 95       	com	r25
    21f4:	80 95       	com	r24
    21f6:	70 95       	com	r23
    21f8:	61 95       	neg	r22
    21fa:	7f 4f       	sbci	r23, 0xFF	; 255
    21fc:	8f 4f       	sbci	r24, 0xFF	; 255
    21fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2200:	f0 68       	ori	r31, 0x80	; 128
    2202:	9f 2e       	mov	r9, r31
    2204:	2a e0       	ldi	r18, 0x0A	; 10
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	a3 01       	movw	r20, r6
    220a:	0e 94 44 14 	call	0x2888	; 0x2888 <__ultoa_invert>
    220e:	c8 2e       	mov	r12, r24
    2210:	c6 18       	sub	r12, r6
    2212:	3f c0       	rjmp	.+126    	; 0x2292 <vfprintf+0x57a>
    2214:	09 2d       	mov	r16, r9
    2216:	85 37       	cpi	r24, 0x75	; 117
    2218:	21 f4       	brne	.+8      	; 0x2222 <vfprintf+0x50a>
    221a:	0f 7e       	andi	r16, 0xEF	; 239
    221c:	2a e0       	ldi	r18, 0x0A	; 10
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	1d c0       	rjmp	.+58     	; 0x225c <vfprintf+0x544>
    2222:	09 7f       	andi	r16, 0xF9	; 249
    2224:	8f 36       	cpi	r24, 0x6F	; 111
    2226:	91 f0       	breq	.+36     	; 0x224c <vfprintf+0x534>
    2228:	18 f4       	brcc	.+6      	; 0x2230 <vfprintf+0x518>
    222a:	88 35       	cpi	r24, 0x58	; 88
    222c:	59 f0       	breq	.+22     	; 0x2244 <vfprintf+0x52c>
    222e:	c3 c0       	rjmp	.+390    	; 0x23b6 <vfprintf+0x69e>
    2230:	80 37       	cpi	r24, 0x70	; 112
    2232:	19 f0       	breq	.+6      	; 0x223a <vfprintf+0x522>
    2234:	88 37       	cpi	r24, 0x78	; 120
    2236:	11 f0       	breq	.+4      	; 0x223c <vfprintf+0x524>
    2238:	be c0       	rjmp	.+380    	; 0x23b6 <vfprintf+0x69e>
    223a:	00 61       	ori	r16, 0x10	; 16
    223c:	04 ff       	sbrs	r16, 4
    223e:	09 c0       	rjmp	.+18     	; 0x2252 <vfprintf+0x53a>
    2240:	04 60       	ori	r16, 0x04	; 4
    2242:	07 c0       	rjmp	.+14     	; 0x2252 <vfprintf+0x53a>
    2244:	94 fe       	sbrs	r9, 4
    2246:	08 c0       	rjmp	.+16     	; 0x2258 <vfprintf+0x540>
    2248:	06 60       	ori	r16, 0x06	; 6
    224a:	06 c0       	rjmp	.+12     	; 0x2258 <vfprintf+0x540>
    224c:	28 e0       	ldi	r18, 0x08	; 8
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	05 c0       	rjmp	.+10     	; 0x225c <vfprintf+0x544>
    2252:	20 e1       	ldi	r18, 0x10	; 16
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	02 c0       	rjmp	.+4      	; 0x225c <vfprintf+0x544>
    2258:	20 e1       	ldi	r18, 0x10	; 16
    225a:	32 e0       	ldi	r19, 0x02	; 2
    225c:	56 01       	movw	r10, r12
    225e:	07 ff       	sbrs	r16, 7
    2260:	09 c0       	rjmp	.+18     	; 0x2274 <vfprintf+0x55c>
    2262:	84 e0       	ldi	r24, 0x04	; 4
    2264:	a8 0e       	add	r10, r24
    2266:	b1 1c       	adc	r11, r1
    2268:	f6 01       	movw	r30, r12
    226a:	60 81       	ld	r22, Z
    226c:	71 81       	ldd	r23, Z+1	; 0x01
    226e:	82 81       	ldd	r24, Z+2	; 0x02
    2270:	93 81       	ldd	r25, Z+3	; 0x03
    2272:	08 c0       	rjmp	.+16     	; 0x2284 <vfprintf+0x56c>
    2274:	f2 e0       	ldi	r31, 0x02	; 2
    2276:	af 0e       	add	r10, r31
    2278:	b1 1c       	adc	r11, r1
    227a:	f6 01       	movw	r30, r12
    227c:	60 81       	ld	r22, Z
    227e:	71 81       	ldd	r23, Z+1	; 0x01
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	a3 01       	movw	r20, r6
    2286:	0e 94 44 14 	call	0x2888	; 0x2888 <__ultoa_invert>
    228a:	c8 2e       	mov	r12, r24
    228c:	c6 18       	sub	r12, r6
    228e:	0f 77       	andi	r16, 0x7F	; 127
    2290:	90 2e       	mov	r9, r16
    2292:	96 fe       	sbrs	r9, 6
    2294:	0b c0       	rjmp	.+22     	; 0x22ac <vfprintf+0x594>
    2296:	09 2d       	mov	r16, r9
    2298:	0e 7f       	andi	r16, 0xFE	; 254
    229a:	c1 16       	cp	r12, r17
    229c:	50 f4       	brcc	.+20     	; 0x22b2 <vfprintf+0x59a>
    229e:	94 fe       	sbrs	r9, 4
    22a0:	0a c0       	rjmp	.+20     	; 0x22b6 <vfprintf+0x59e>
    22a2:	92 fc       	sbrc	r9, 2
    22a4:	08 c0       	rjmp	.+16     	; 0x22b6 <vfprintf+0x59e>
    22a6:	09 2d       	mov	r16, r9
    22a8:	0e 7e       	andi	r16, 0xEE	; 238
    22aa:	05 c0       	rjmp	.+10     	; 0x22b6 <vfprintf+0x59e>
    22ac:	dc 2c       	mov	r13, r12
    22ae:	09 2d       	mov	r16, r9
    22b0:	03 c0       	rjmp	.+6      	; 0x22b8 <vfprintf+0x5a0>
    22b2:	dc 2c       	mov	r13, r12
    22b4:	01 c0       	rjmp	.+2      	; 0x22b8 <vfprintf+0x5a0>
    22b6:	d1 2e       	mov	r13, r17
    22b8:	04 ff       	sbrs	r16, 4
    22ba:	0d c0       	rjmp	.+26     	; 0x22d6 <vfprintf+0x5be>
    22bc:	fe 01       	movw	r30, r28
    22be:	ec 0d       	add	r30, r12
    22c0:	f1 1d       	adc	r31, r1
    22c2:	80 81       	ld	r24, Z
    22c4:	80 33       	cpi	r24, 0x30	; 48
    22c6:	11 f4       	brne	.+4      	; 0x22cc <vfprintf+0x5b4>
    22c8:	09 7e       	andi	r16, 0xE9	; 233
    22ca:	09 c0       	rjmp	.+18     	; 0x22de <vfprintf+0x5c6>
    22cc:	02 ff       	sbrs	r16, 2
    22ce:	06 c0       	rjmp	.+12     	; 0x22dc <vfprintf+0x5c4>
    22d0:	d3 94       	inc	r13
    22d2:	d3 94       	inc	r13
    22d4:	04 c0       	rjmp	.+8      	; 0x22de <vfprintf+0x5c6>
    22d6:	80 2f       	mov	r24, r16
    22d8:	86 78       	andi	r24, 0x86	; 134
    22da:	09 f0       	breq	.+2      	; 0x22de <vfprintf+0x5c6>
    22dc:	d3 94       	inc	r13
    22de:	03 fd       	sbrc	r16, 3
    22e0:	11 c0       	rjmp	.+34     	; 0x2304 <vfprintf+0x5ec>
    22e2:	00 ff       	sbrs	r16, 0
    22e4:	06 c0       	rjmp	.+12     	; 0x22f2 <vfprintf+0x5da>
    22e6:	1c 2d       	mov	r17, r12
    22e8:	d5 14       	cp	r13, r5
    22ea:	80 f4       	brcc	.+32     	; 0x230c <vfprintf+0x5f4>
    22ec:	15 0d       	add	r17, r5
    22ee:	1d 19       	sub	r17, r13
    22f0:	0d c0       	rjmp	.+26     	; 0x230c <vfprintf+0x5f4>
    22f2:	d5 14       	cp	r13, r5
    22f4:	58 f4       	brcc	.+22     	; 0x230c <vfprintf+0x5f4>
    22f6:	b7 01       	movw	r22, r14
    22f8:	80 e2       	ldi	r24, 0x20	; 32
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    2300:	d3 94       	inc	r13
    2302:	f7 cf       	rjmp	.-18     	; 0x22f2 <vfprintf+0x5da>
    2304:	d5 14       	cp	r13, r5
    2306:	10 f4       	brcc	.+4      	; 0x230c <vfprintf+0x5f4>
    2308:	5d 18       	sub	r5, r13
    230a:	01 c0       	rjmp	.+2      	; 0x230e <vfprintf+0x5f6>
    230c:	51 2c       	mov	r5, r1
    230e:	04 ff       	sbrs	r16, 4
    2310:	10 c0       	rjmp	.+32     	; 0x2332 <vfprintf+0x61a>
    2312:	b7 01       	movw	r22, r14
    2314:	80 e3       	ldi	r24, 0x30	; 48
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    231c:	02 ff       	sbrs	r16, 2
    231e:	17 c0       	rjmp	.+46     	; 0x234e <vfprintf+0x636>
    2320:	01 fd       	sbrc	r16, 1
    2322:	03 c0       	rjmp	.+6      	; 0x232a <vfprintf+0x612>
    2324:	88 e7       	ldi	r24, 0x78	; 120
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	02 c0       	rjmp	.+4      	; 0x232e <vfprintf+0x616>
    232a:	88 e5       	ldi	r24, 0x58	; 88
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	b7 01       	movw	r22, r14
    2330:	0c c0       	rjmp	.+24     	; 0x234a <vfprintf+0x632>
    2332:	80 2f       	mov	r24, r16
    2334:	86 78       	andi	r24, 0x86	; 134
    2336:	59 f0       	breq	.+22     	; 0x234e <vfprintf+0x636>
    2338:	01 ff       	sbrs	r16, 1
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <vfprintf+0x628>
    233c:	8b e2       	ldi	r24, 0x2B	; 43
    233e:	01 c0       	rjmp	.+2      	; 0x2342 <vfprintf+0x62a>
    2340:	80 e2       	ldi	r24, 0x20	; 32
    2342:	07 fd       	sbrc	r16, 7
    2344:	8d e2       	ldi	r24, 0x2D	; 45
    2346:	b7 01       	movw	r22, r14
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    234e:	c1 16       	cp	r12, r17
    2350:	38 f4       	brcc	.+14     	; 0x2360 <vfprintf+0x648>
    2352:	b7 01       	movw	r22, r14
    2354:	80 e3       	ldi	r24, 0x30	; 48
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    235c:	11 50       	subi	r17, 0x01	; 1
    235e:	f7 cf       	rjmp	.-18     	; 0x234e <vfprintf+0x636>
    2360:	ca 94       	dec	r12
    2362:	f3 01       	movw	r30, r6
    2364:	ec 0d       	add	r30, r12
    2366:	f1 1d       	adc	r31, r1
    2368:	80 81       	ld	r24, Z
    236a:	b7 01       	movw	r22, r14
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    2372:	c1 10       	cpse	r12, r1
    2374:	f5 cf       	rjmp	.-22     	; 0x2360 <vfprintf+0x648>
    2376:	15 c0       	rjmp	.+42     	; 0x23a2 <vfprintf+0x68a>
    2378:	f4 e0       	ldi	r31, 0x04	; 4
    237a:	f5 15       	cp	r31, r5
    237c:	60 f5       	brcc	.+88     	; 0x23d6 <vfprintf+0x6be>
    237e:	84 e0       	ldi	r24, 0x04	; 4
    2380:	58 1a       	sub	r5, r24
    2382:	93 fe       	sbrs	r9, 3
    2384:	1f c0       	rjmp	.+62     	; 0x23c4 <vfprintf+0x6ac>
    2386:	01 11       	cpse	r16, r1
    2388:	27 c0       	rjmp	.+78     	; 0x23d8 <vfprintf+0x6c0>
    238a:	2c 85       	ldd	r18, Y+12	; 0x0c
    238c:	23 ff       	sbrs	r18, 3
    238e:	2a c0       	rjmp	.+84     	; 0x23e4 <vfprintf+0x6cc>
    2390:	04 ec       	ldi	r16, 0xC4	; 196
    2392:	10 e0       	ldi	r17, 0x00	; 0
    2394:	39 2d       	mov	r19, r9
    2396:	30 71       	andi	r19, 0x10	; 16
    2398:	93 2e       	mov	r9, r19
    239a:	f8 01       	movw	r30, r16
    239c:	84 91       	lpm	r24, Z
    239e:	81 11       	cpse	r24, r1
    23a0:	24 c0       	rjmp	.+72     	; 0x23ea <vfprintf+0x6d2>
    23a2:	55 20       	and	r5, r5
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <vfprintf+0x690>
    23a6:	e4 cc       	rjmp	.-1592   	; 0x1d70 <vfprintf+0x58>
    23a8:	b7 01       	movw	r22, r14
    23aa:	80 e2       	ldi	r24, 0x20	; 32
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    23b2:	5a 94       	dec	r5
    23b4:	f6 cf       	rjmp	.-20     	; 0x23a2 <vfprintf+0x68a>
    23b6:	f7 01       	movw	r30, r14
    23b8:	86 81       	ldd	r24, Z+6	; 0x06
    23ba:	97 81       	ldd	r25, Z+7	; 0x07
    23bc:	26 c0       	rjmp	.+76     	; 0x240a <vfprintf+0x6f2>
    23be:	8f ef       	ldi	r24, 0xFF	; 255
    23c0:	9f ef       	ldi	r25, 0xFF	; 255
    23c2:	23 c0       	rjmp	.+70     	; 0x240a <vfprintf+0x6f2>
    23c4:	b7 01       	movw	r22, r14
    23c6:	80 e2       	ldi	r24, 0x20	; 32
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    23ce:	5a 94       	dec	r5
    23d0:	51 10       	cpse	r5, r1
    23d2:	f8 cf       	rjmp	.-16     	; 0x23c4 <vfprintf+0x6ac>
    23d4:	d8 cf       	rjmp	.-80     	; 0x2386 <vfprintf+0x66e>
    23d6:	51 2c       	mov	r5, r1
    23d8:	b7 01       	movw	r22, r14
    23da:	80 2f       	mov	r24, r16
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    23e2:	d3 cf       	rjmp	.-90     	; 0x238a <vfprintf+0x672>
    23e4:	08 ec       	ldi	r16, 0xC8	; 200
    23e6:	10 e0       	ldi	r17, 0x00	; 0
    23e8:	d5 cf       	rjmp	.-86     	; 0x2394 <vfprintf+0x67c>
    23ea:	91 10       	cpse	r9, r1
    23ec:	80 52       	subi	r24, 0x20	; 32
    23ee:	b7 01       	movw	r22, r14
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    23f6:	0f 5f       	subi	r16, 0xFF	; 255
    23f8:	1f 4f       	sbci	r17, 0xFF	; 255
    23fa:	cf cf       	rjmp	.-98     	; 0x239a <vfprintf+0x682>
    23fc:	23 e0       	ldi	r18, 0x03	; 3
    23fe:	25 15       	cp	r18, r5
    2400:	10 f4       	brcc	.+4      	; 0x2406 <vfprintf+0x6ee>
    2402:	83 e0       	ldi	r24, 0x03	; 3
    2404:	bd cf       	rjmp	.-134    	; 0x2380 <vfprintf+0x668>
    2406:	51 2c       	mov	r5, r1
    2408:	c0 cf       	rjmp	.-128    	; 0x238a <vfprintf+0x672>
    240a:	60 96       	adiw	r28, 0x10	; 16
    240c:	e2 e1       	ldi	r30, 0x12	; 18
    240e:	0c 94 81 12 	jmp	0x2502	; 0x2502 <__epilogue_restores__>

00002412 <__udivmodhi4>:
    2412:	aa 1b       	sub	r26, r26
    2414:	bb 1b       	sub	r27, r27
    2416:	51 e1       	ldi	r21, 0x11	; 17
    2418:	07 c0       	rjmp	.+14     	; 0x2428 <__udivmodhi4_ep>

0000241a <__udivmodhi4_loop>:
    241a:	aa 1f       	adc	r26, r26
    241c:	bb 1f       	adc	r27, r27
    241e:	a6 17       	cp	r26, r22
    2420:	b7 07       	cpc	r27, r23
    2422:	10 f0       	brcs	.+4      	; 0x2428 <__udivmodhi4_ep>
    2424:	a6 1b       	sub	r26, r22
    2426:	b7 0b       	sbc	r27, r23

00002428 <__udivmodhi4_ep>:
    2428:	88 1f       	adc	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	5a 95       	dec	r21
    242e:	a9 f7       	brne	.-22     	; 0x241a <__udivmodhi4_loop>
    2430:	80 95       	com	r24
    2432:	90 95       	com	r25
    2434:	bc 01       	movw	r22, r24
    2436:	cd 01       	movw	r24, r26
    2438:	08 95       	ret

0000243a <__divmodhi4>:
    243a:	97 fb       	bst	r25, 7
    243c:	07 2e       	mov	r0, r23
    243e:	16 f4       	brtc	.+4      	; 0x2444 <__divmodhi4+0xa>
    2440:	00 94       	com	r0
    2442:	07 d0       	rcall	.+14     	; 0x2452 <__divmodhi4_neg1>
    2444:	77 fd       	sbrc	r23, 7
    2446:	09 d0       	rcall	.+18     	; 0x245a <__divmodhi4_neg2>
    2448:	0e 94 09 12 	call	0x2412	; 0x2412 <__udivmodhi4>
    244c:	07 fc       	sbrc	r0, 7
    244e:	05 d0       	rcall	.+10     	; 0x245a <__divmodhi4_neg2>
    2450:	3e f4       	brtc	.+14     	; 0x2460 <__divmodhi4_exit>

00002452 <__divmodhi4_neg1>:
    2452:	90 95       	com	r25
    2454:	81 95       	neg	r24
    2456:	9f 4f       	sbci	r25, 0xFF	; 255
    2458:	08 95       	ret

0000245a <__divmodhi4_neg2>:
    245a:	70 95       	com	r23
    245c:	61 95       	neg	r22
    245e:	7f 4f       	sbci	r23, 0xFF	; 255

00002460 <__divmodhi4_exit>:
    2460:	08 95       	ret

00002462 <__divmodsi4>:
    2462:	05 2e       	mov	r0, r21
    2464:	97 fb       	bst	r25, 7
    2466:	1e f4       	brtc	.+6      	; 0x246e <__divmodsi4+0xc>
    2468:	00 94       	com	r0
    246a:	0e 94 48 12 	call	0x2490	; 0x2490 <__negsi2>
    246e:	57 fd       	sbrc	r21, 7
    2470:	07 d0       	rcall	.+14     	; 0x2480 <__divmodsi4_neg2>
    2472:	0e 94 9c 12 	call	0x2538	; 0x2538 <__udivmodsi4>
    2476:	07 fc       	sbrc	r0, 7
    2478:	03 d0       	rcall	.+6      	; 0x2480 <__divmodsi4_neg2>
    247a:	4e f4       	brtc	.+18     	; 0x248e <__divmodsi4_exit>
    247c:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__negsi2>

00002480 <__divmodsi4_neg2>:
    2480:	50 95       	com	r21
    2482:	40 95       	com	r20
    2484:	30 95       	com	r19
    2486:	21 95       	neg	r18
    2488:	3f 4f       	sbci	r19, 0xFF	; 255
    248a:	4f 4f       	sbci	r20, 0xFF	; 255
    248c:	5f 4f       	sbci	r21, 0xFF	; 255

0000248e <__divmodsi4_exit>:
    248e:	08 95       	ret

00002490 <__negsi2>:
    2490:	90 95       	com	r25
    2492:	80 95       	com	r24
    2494:	70 95       	com	r23
    2496:	61 95       	neg	r22
    2498:	7f 4f       	sbci	r23, 0xFF	; 255
    249a:	8f 4f       	sbci	r24, 0xFF	; 255
    249c:	9f 4f       	sbci	r25, 0xFF	; 255
    249e:	08 95       	ret

000024a0 <__tablejump2__>:
    24a0:	ee 0f       	add	r30, r30
    24a2:	ff 1f       	adc	r31, r31
    24a4:	05 90       	lpm	r0, Z+
    24a6:	f4 91       	lpm	r31, Z
    24a8:	e0 2d       	mov	r30, r0
    24aa:	09 94       	ijmp

000024ac <__umulhisi3>:
    24ac:	a2 9f       	mul	r26, r18
    24ae:	b0 01       	movw	r22, r0
    24b0:	b3 9f       	mul	r27, r19
    24b2:	c0 01       	movw	r24, r0
    24b4:	a3 9f       	mul	r26, r19
    24b6:	70 0d       	add	r23, r0
    24b8:	81 1d       	adc	r24, r1
    24ba:	11 24       	eor	r1, r1
    24bc:	91 1d       	adc	r25, r1
    24be:	b2 9f       	mul	r27, r18
    24c0:	70 0d       	add	r23, r0
    24c2:	81 1d       	adc	r24, r1
    24c4:	11 24       	eor	r1, r1
    24c6:	91 1d       	adc	r25, r1
    24c8:	08 95       	ret

000024ca <__prologue_saves__>:
    24ca:	2f 92       	push	r2
    24cc:	3f 92       	push	r3
    24ce:	4f 92       	push	r4
    24d0:	5f 92       	push	r5
    24d2:	6f 92       	push	r6
    24d4:	7f 92       	push	r7
    24d6:	8f 92       	push	r8
    24d8:	9f 92       	push	r9
    24da:	af 92       	push	r10
    24dc:	bf 92       	push	r11
    24de:	cf 92       	push	r12
    24e0:	df 92       	push	r13
    24e2:	ef 92       	push	r14
    24e4:	ff 92       	push	r15
    24e6:	0f 93       	push	r16
    24e8:	1f 93       	push	r17
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	ca 1b       	sub	r28, r26
    24f4:	db 0b       	sbc	r29, r27
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	09 94       	ijmp

00002502 <__epilogue_restores__>:
    2502:	2a 88       	ldd	r2, Y+18	; 0x12
    2504:	39 88       	ldd	r3, Y+17	; 0x11
    2506:	48 88       	ldd	r4, Y+16	; 0x10
    2508:	5f 84       	ldd	r5, Y+15	; 0x0f
    250a:	6e 84       	ldd	r6, Y+14	; 0x0e
    250c:	7d 84       	ldd	r7, Y+13	; 0x0d
    250e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2510:	9b 84       	ldd	r9, Y+11	; 0x0b
    2512:	aa 84       	ldd	r10, Y+10	; 0x0a
    2514:	b9 84       	ldd	r11, Y+9	; 0x09
    2516:	c8 84       	ldd	r12, Y+8	; 0x08
    2518:	df 80       	ldd	r13, Y+7	; 0x07
    251a:	ee 80       	ldd	r14, Y+6	; 0x06
    251c:	fd 80       	ldd	r15, Y+5	; 0x05
    251e:	0c 81       	ldd	r16, Y+4	; 0x04
    2520:	1b 81       	ldd	r17, Y+3	; 0x03
    2522:	aa 81       	ldd	r26, Y+2	; 0x02
    2524:	b9 81       	ldd	r27, Y+1	; 0x01
    2526:	ce 0f       	add	r28, r30
    2528:	d1 1d       	adc	r29, r1
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
    2534:	ed 01       	movw	r28, r26
    2536:	08 95       	ret

00002538 <__udivmodsi4>:
    2538:	a1 e2       	ldi	r26, 0x21	; 33
    253a:	1a 2e       	mov	r1, r26
    253c:	aa 1b       	sub	r26, r26
    253e:	bb 1b       	sub	r27, r27
    2540:	fd 01       	movw	r30, r26
    2542:	0d c0       	rjmp	.+26     	; 0x255e <__udivmodsi4_ep>

00002544 <__udivmodsi4_loop>:
    2544:	aa 1f       	adc	r26, r26
    2546:	bb 1f       	adc	r27, r27
    2548:	ee 1f       	adc	r30, r30
    254a:	ff 1f       	adc	r31, r31
    254c:	a2 17       	cp	r26, r18
    254e:	b3 07       	cpc	r27, r19
    2550:	e4 07       	cpc	r30, r20
    2552:	f5 07       	cpc	r31, r21
    2554:	20 f0       	brcs	.+8      	; 0x255e <__udivmodsi4_ep>
    2556:	a2 1b       	sub	r26, r18
    2558:	b3 0b       	sbc	r27, r19
    255a:	e4 0b       	sbc	r30, r20
    255c:	f5 0b       	sbc	r31, r21

0000255e <__udivmodsi4_ep>:
    255e:	66 1f       	adc	r22, r22
    2560:	77 1f       	adc	r23, r23
    2562:	88 1f       	adc	r24, r24
    2564:	99 1f       	adc	r25, r25
    2566:	1a 94       	dec	r1
    2568:	69 f7       	brne	.-38     	; 0x2544 <__udivmodsi4_loop>
    256a:	60 95       	com	r22
    256c:	70 95       	com	r23
    256e:	80 95       	com	r24
    2570:	90 95       	com	r25
    2572:	9b 01       	movw	r18, r22
    2574:	ac 01       	movw	r20, r24
    2576:	bd 01       	movw	r22, r26
    2578:	cf 01       	movw	r24, r30
    257a:	08 95       	ret

0000257c <do_rand>:
    257c:	8f 92       	push	r8
    257e:	9f 92       	push	r9
    2580:	af 92       	push	r10
    2582:	bf 92       	push	r11
    2584:	cf 92       	push	r12
    2586:	df 92       	push	r13
    2588:	ef 92       	push	r14
    258a:	ff 92       	push	r15
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	ec 01       	movw	r28, r24
    2592:	68 81       	ld	r22, Y
    2594:	79 81       	ldd	r23, Y+1	; 0x01
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	9b 81       	ldd	r25, Y+3	; 0x03
    259a:	61 15       	cp	r22, r1
    259c:	71 05       	cpc	r23, r1
    259e:	81 05       	cpc	r24, r1
    25a0:	91 05       	cpc	r25, r1
    25a2:	21 f4       	brne	.+8      	; 0x25ac <do_rand+0x30>
    25a4:	64 e2       	ldi	r22, 0x24	; 36
    25a6:	79 ed       	ldi	r23, 0xD9	; 217
    25a8:	8b e5       	ldi	r24, 0x5B	; 91
    25aa:	97 e0       	ldi	r25, 0x07	; 7
    25ac:	2d e1       	ldi	r18, 0x1D	; 29
    25ae:	33 ef       	ldi	r19, 0xF3	; 243
    25b0:	41 e0       	ldi	r20, 0x01	; 1
    25b2:	50 e0       	ldi	r21, 0x00	; 0
    25b4:	0e 94 31 12 	call	0x2462	; 0x2462 <__divmodsi4>
    25b8:	49 01       	movw	r8, r18
    25ba:	5a 01       	movw	r10, r20
    25bc:	9b 01       	movw	r18, r22
    25be:	ac 01       	movw	r20, r24
    25c0:	a7 ea       	ldi	r26, 0xA7	; 167
    25c2:	b1 e4       	ldi	r27, 0x41	; 65
    25c4:	0e 94 a2 14 	call	0x2944	; 0x2944 <__muluhisi3>
    25c8:	6b 01       	movw	r12, r22
    25ca:	7c 01       	movw	r14, r24
    25cc:	ac ee       	ldi	r26, 0xEC	; 236
    25ce:	b4 ef       	ldi	r27, 0xF4	; 244
    25d0:	a5 01       	movw	r20, r10
    25d2:	94 01       	movw	r18, r8
    25d4:	0e 94 b0 14 	call	0x2960	; 0x2960 <__mulohisi3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	8c 0d       	add	r24, r12
    25de:	9d 1d       	adc	r25, r13
    25e0:	ae 1d       	adc	r26, r14
    25e2:	bf 1d       	adc	r27, r15
    25e4:	b7 ff       	sbrs	r27, 7
    25e6:	03 c0       	rjmp	.+6      	; 0x25ee <do_rand+0x72>
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	a1 09       	sbc	r26, r1
    25ec:	b0 48       	sbci	r27, 0x80	; 128
    25ee:	88 83       	st	Y, r24
    25f0:	99 83       	std	Y+1, r25	; 0x01
    25f2:	aa 83       	std	Y+2, r26	; 0x02
    25f4:	bb 83       	std	Y+3, r27	; 0x03
    25f6:	9f 77       	andi	r25, 0x7F	; 127
    25f8:	df 91       	pop	r29
    25fa:	cf 91       	pop	r28
    25fc:	ff 90       	pop	r15
    25fe:	ef 90       	pop	r14
    2600:	df 90       	pop	r13
    2602:	cf 90       	pop	r12
    2604:	bf 90       	pop	r11
    2606:	af 90       	pop	r10
    2608:	9f 90       	pop	r9
    260a:	8f 90       	pop	r8
    260c:	08 95       	ret

0000260e <rand_r>:
    260e:	0e 94 be 12 	call	0x257c	; 0x257c <do_rand>
    2612:	08 95       	ret

00002614 <rand>:
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	91 e0       	ldi	r25, 0x01	; 1
    2618:	0e 94 be 12 	call	0x257c	; 0x257c <do_rand>
    261c:	08 95       	ret

0000261e <srand>:
    261e:	a0 e0       	ldi	r26, 0x00	; 0
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    2626:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    262a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    262e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    2632:	08 95       	ret

00002634 <__ftoa_engine>:
    2634:	28 30       	cpi	r18, 0x08	; 8
    2636:	08 f0       	brcs	.+2      	; 0x263a <__ftoa_engine+0x6>
    2638:	27 e0       	ldi	r18, 0x07	; 7
    263a:	33 27       	eor	r19, r19
    263c:	da 01       	movw	r26, r20
    263e:	99 0f       	add	r25, r25
    2640:	31 1d       	adc	r19, r1
    2642:	87 fd       	sbrc	r24, 7
    2644:	91 60       	ori	r25, 0x01	; 1
    2646:	00 96       	adiw	r24, 0x00	; 0
    2648:	61 05       	cpc	r22, r1
    264a:	71 05       	cpc	r23, r1
    264c:	39 f4       	brne	.+14     	; 0x265c <__ftoa_engine+0x28>
    264e:	32 60       	ori	r19, 0x02	; 2
    2650:	2e 5f       	subi	r18, 0xFE	; 254
    2652:	3d 93       	st	X+, r19
    2654:	30 e3       	ldi	r19, 0x30	; 48
    2656:	2a 95       	dec	r18
    2658:	e1 f7       	brne	.-8      	; 0x2652 <__ftoa_engine+0x1e>
    265a:	08 95       	ret
    265c:	9f 3f       	cpi	r25, 0xFF	; 255
    265e:	30 f0       	brcs	.+12     	; 0x266c <__ftoa_engine+0x38>
    2660:	80 38       	cpi	r24, 0x80	; 128
    2662:	71 05       	cpc	r23, r1
    2664:	61 05       	cpc	r22, r1
    2666:	09 f0       	breq	.+2      	; 0x266a <__ftoa_engine+0x36>
    2668:	3c 5f       	subi	r19, 0xFC	; 252
    266a:	3c 5f       	subi	r19, 0xFC	; 252
    266c:	3d 93       	st	X+, r19
    266e:	91 30       	cpi	r25, 0x01	; 1
    2670:	08 f0       	brcs	.+2      	; 0x2674 <__ftoa_engine+0x40>
    2672:	80 68       	ori	r24, 0x80	; 128
    2674:	91 1d       	adc	r25, r1
    2676:	df 93       	push	r29
    2678:	cf 93       	push	r28
    267a:	1f 93       	push	r17
    267c:	0f 93       	push	r16
    267e:	ff 92       	push	r15
    2680:	ef 92       	push	r14
    2682:	19 2f       	mov	r17, r25
    2684:	98 7f       	andi	r25, 0xF8	; 248
    2686:	96 95       	lsr	r25
    2688:	e9 2f       	mov	r30, r25
    268a:	96 95       	lsr	r25
    268c:	96 95       	lsr	r25
    268e:	e9 0f       	add	r30, r25
    2690:	ff 27       	eor	r31, r31
    2692:	ea 5d       	subi	r30, 0xDA	; 218
    2694:	fe 4f       	sbci	r31, 0xFE	; 254
    2696:	99 27       	eor	r25, r25
    2698:	33 27       	eor	r19, r19
    269a:	ee 24       	eor	r14, r14
    269c:	ff 24       	eor	r15, r15
    269e:	a7 01       	movw	r20, r14
    26a0:	e7 01       	movw	r28, r14
    26a2:	05 90       	lpm	r0, Z+
    26a4:	08 94       	sec
    26a6:	07 94       	ror	r0
    26a8:	28 f4       	brcc	.+10     	; 0x26b4 <__ftoa_engine+0x80>
    26aa:	36 0f       	add	r19, r22
    26ac:	e7 1e       	adc	r14, r23
    26ae:	f8 1e       	adc	r15, r24
    26b0:	49 1f       	adc	r20, r25
    26b2:	51 1d       	adc	r21, r1
    26b4:	66 0f       	add	r22, r22
    26b6:	77 1f       	adc	r23, r23
    26b8:	88 1f       	adc	r24, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	06 94       	lsr	r0
    26be:	a1 f7       	brne	.-24     	; 0x26a8 <__ftoa_engine+0x74>
    26c0:	05 90       	lpm	r0, Z+
    26c2:	07 94       	ror	r0
    26c4:	28 f4       	brcc	.+10     	; 0x26d0 <__ftoa_engine+0x9c>
    26c6:	e7 0e       	add	r14, r23
    26c8:	f8 1e       	adc	r15, r24
    26ca:	49 1f       	adc	r20, r25
    26cc:	56 1f       	adc	r21, r22
    26ce:	c1 1d       	adc	r28, r1
    26d0:	77 0f       	add	r23, r23
    26d2:	88 1f       	adc	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	66 1f       	adc	r22, r22
    26d8:	06 94       	lsr	r0
    26da:	a1 f7       	brne	.-24     	; 0x26c4 <__ftoa_engine+0x90>
    26dc:	05 90       	lpm	r0, Z+
    26de:	07 94       	ror	r0
    26e0:	28 f4       	brcc	.+10     	; 0x26ec <__ftoa_engine+0xb8>
    26e2:	f8 0e       	add	r15, r24
    26e4:	49 1f       	adc	r20, r25
    26e6:	56 1f       	adc	r21, r22
    26e8:	c7 1f       	adc	r28, r23
    26ea:	d1 1d       	adc	r29, r1
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	66 1f       	adc	r22, r22
    26f2:	77 1f       	adc	r23, r23
    26f4:	06 94       	lsr	r0
    26f6:	a1 f7       	brne	.-24     	; 0x26e0 <__ftoa_engine+0xac>
    26f8:	05 90       	lpm	r0, Z+
    26fa:	07 94       	ror	r0
    26fc:	20 f4       	brcc	.+8      	; 0x2706 <__ftoa_engine+0xd2>
    26fe:	49 0f       	add	r20, r25
    2700:	56 1f       	adc	r21, r22
    2702:	c7 1f       	adc	r28, r23
    2704:	d8 1f       	adc	r29, r24
    2706:	99 0f       	add	r25, r25
    2708:	66 1f       	adc	r22, r22
    270a:	77 1f       	adc	r23, r23
    270c:	88 1f       	adc	r24, r24
    270e:	06 94       	lsr	r0
    2710:	a9 f7       	brne	.-22     	; 0x26fc <__ftoa_engine+0xc8>
    2712:	84 91       	lpm	r24, Z
    2714:	10 95       	com	r17
    2716:	17 70       	andi	r17, 0x07	; 7
    2718:	41 f0       	breq	.+16     	; 0x272a <__ftoa_engine+0xf6>
    271a:	d6 95       	lsr	r29
    271c:	c7 95       	ror	r28
    271e:	57 95       	ror	r21
    2720:	47 95       	ror	r20
    2722:	f7 94       	ror	r15
    2724:	e7 94       	ror	r14
    2726:	1a 95       	dec	r17
    2728:	c1 f7       	brne	.-16     	; 0x271a <__ftoa_engine+0xe6>
    272a:	ec ec       	ldi	r30, 0xCC	; 204
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	68 94       	set
    2730:	15 90       	lpm	r1, Z+
    2732:	15 91       	lpm	r17, Z+
    2734:	35 91       	lpm	r19, Z+
    2736:	65 91       	lpm	r22, Z+
    2738:	95 91       	lpm	r25, Z+
    273a:	05 90       	lpm	r0, Z+
    273c:	7f e2       	ldi	r23, 0x2F	; 47
    273e:	73 95       	inc	r23
    2740:	e1 18       	sub	r14, r1
    2742:	f1 0a       	sbc	r15, r17
    2744:	43 0b       	sbc	r20, r19
    2746:	56 0b       	sbc	r21, r22
    2748:	c9 0b       	sbc	r28, r25
    274a:	d0 09       	sbc	r29, r0
    274c:	c0 f7       	brcc	.-16     	; 0x273e <__ftoa_engine+0x10a>
    274e:	e1 0c       	add	r14, r1
    2750:	f1 1e       	adc	r15, r17
    2752:	43 1f       	adc	r20, r19
    2754:	56 1f       	adc	r21, r22
    2756:	c9 1f       	adc	r28, r25
    2758:	d0 1d       	adc	r29, r0
    275a:	7e f4       	brtc	.+30     	; 0x277a <__ftoa_engine+0x146>
    275c:	70 33       	cpi	r23, 0x30	; 48
    275e:	11 f4       	brne	.+4      	; 0x2764 <__ftoa_engine+0x130>
    2760:	8a 95       	dec	r24
    2762:	e6 cf       	rjmp	.-52     	; 0x2730 <__ftoa_engine+0xfc>
    2764:	e8 94       	clt
    2766:	01 50       	subi	r16, 0x01	; 1
    2768:	30 f0       	brcs	.+12     	; 0x2776 <__ftoa_engine+0x142>
    276a:	08 0f       	add	r16, r24
    276c:	0a f4       	brpl	.+2      	; 0x2770 <__ftoa_engine+0x13c>
    276e:	00 27       	eor	r16, r16
    2770:	02 17       	cp	r16, r18
    2772:	08 f4       	brcc	.+2      	; 0x2776 <__ftoa_engine+0x142>
    2774:	20 2f       	mov	r18, r16
    2776:	23 95       	inc	r18
    2778:	02 2f       	mov	r16, r18
    277a:	7a 33       	cpi	r23, 0x3A	; 58
    277c:	28 f0       	brcs	.+10     	; 0x2788 <__ftoa_engine+0x154>
    277e:	79 e3       	ldi	r23, 0x39	; 57
    2780:	7d 93       	st	X+, r23
    2782:	2a 95       	dec	r18
    2784:	e9 f7       	brne	.-6      	; 0x2780 <__ftoa_engine+0x14c>
    2786:	10 c0       	rjmp	.+32     	; 0x27a8 <__ftoa_engine+0x174>
    2788:	7d 93       	st	X+, r23
    278a:	2a 95       	dec	r18
    278c:	89 f6       	brne	.-94     	; 0x2730 <__ftoa_engine+0xfc>
    278e:	06 94       	lsr	r0
    2790:	97 95       	ror	r25
    2792:	67 95       	ror	r22
    2794:	37 95       	ror	r19
    2796:	17 95       	ror	r17
    2798:	17 94       	ror	r1
    279a:	e1 18       	sub	r14, r1
    279c:	f1 0a       	sbc	r15, r17
    279e:	43 0b       	sbc	r20, r19
    27a0:	56 0b       	sbc	r21, r22
    27a2:	c9 0b       	sbc	r28, r25
    27a4:	d0 09       	sbc	r29, r0
    27a6:	98 f0       	brcs	.+38     	; 0x27ce <__ftoa_engine+0x19a>
    27a8:	23 95       	inc	r18
    27aa:	7e 91       	ld	r23, -X
    27ac:	73 95       	inc	r23
    27ae:	7a 33       	cpi	r23, 0x3A	; 58
    27b0:	08 f0       	brcs	.+2      	; 0x27b4 <__ftoa_engine+0x180>
    27b2:	70 e3       	ldi	r23, 0x30	; 48
    27b4:	7c 93       	st	X, r23
    27b6:	20 13       	cpse	r18, r16
    27b8:	b8 f7       	brcc	.-18     	; 0x27a8 <__ftoa_engine+0x174>
    27ba:	7e 91       	ld	r23, -X
    27bc:	70 61       	ori	r23, 0x10	; 16
    27be:	7d 93       	st	X+, r23
    27c0:	30 f0       	brcs	.+12     	; 0x27ce <__ftoa_engine+0x19a>
    27c2:	83 95       	inc	r24
    27c4:	71 e3       	ldi	r23, 0x31	; 49
    27c6:	7d 93       	st	X+, r23
    27c8:	70 e3       	ldi	r23, 0x30	; 48
    27ca:	2a 95       	dec	r18
    27cc:	e1 f7       	brne	.-8      	; 0x27c6 <__ftoa_engine+0x192>
    27ce:	11 24       	eor	r1, r1
    27d0:	ef 90       	pop	r14
    27d2:	ff 90       	pop	r15
    27d4:	0f 91       	pop	r16
    27d6:	1f 91       	pop	r17
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	99 27       	eor	r25, r25
    27de:	87 fd       	sbrc	r24, 7
    27e0:	90 95       	com	r25
    27e2:	08 95       	ret

000027e4 <strnlen_P>:
    27e4:	fc 01       	movw	r30, r24
    27e6:	05 90       	lpm	r0, Z+
    27e8:	61 50       	subi	r22, 0x01	; 1
    27ea:	70 40       	sbci	r23, 0x00	; 0
    27ec:	01 10       	cpse	r0, r1
    27ee:	d8 f7       	brcc	.-10     	; 0x27e6 <strnlen_P+0x2>
    27f0:	80 95       	com	r24
    27f2:	90 95       	com	r25
    27f4:	8e 0f       	add	r24, r30
    27f6:	9f 1f       	adc	r25, r31
    27f8:	08 95       	ret

000027fa <strnlen>:
    27fa:	fc 01       	movw	r30, r24
    27fc:	61 50       	subi	r22, 0x01	; 1
    27fe:	70 40       	sbci	r23, 0x00	; 0
    2800:	01 90       	ld	r0, Z+
    2802:	01 10       	cpse	r0, r1
    2804:	d8 f7       	brcc	.-10     	; 0x27fc <strnlen+0x2>
    2806:	80 95       	com	r24
    2808:	90 95       	com	r25
    280a:	8e 0f       	add	r24, r30
    280c:	9f 1f       	adc	r25, r31
    280e:	08 95       	ret

00002810 <fputc>:
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	fb 01       	movw	r30, r22
    281a:	23 81       	ldd	r18, Z+3	; 0x03
    281c:	21 fd       	sbrc	r18, 1
    281e:	03 c0       	rjmp	.+6      	; 0x2826 <fputc+0x16>
    2820:	8f ef       	ldi	r24, 0xFF	; 255
    2822:	9f ef       	ldi	r25, 0xFF	; 255
    2824:	2c c0       	rjmp	.+88     	; 0x287e <fputc+0x6e>
    2826:	22 ff       	sbrs	r18, 2
    2828:	16 c0       	rjmp	.+44     	; 0x2856 <fputc+0x46>
    282a:	46 81       	ldd	r20, Z+6	; 0x06
    282c:	57 81       	ldd	r21, Z+7	; 0x07
    282e:	24 81       	ldd	r18, Z+4	; 0x04
    2830:	35 81       	ldd	r19, Z+5	; 0x05
    2832:	42 17       	cp	r20, r18
    2834:	53 07       	cpc	r21, r19
    2836:	44 f4       	brge	.+16     	; 0x2848 <fputc+0x38>
    2838:	a0 81       	ld	r26, Z
    283a:	b1 81       	ldd	r27, Z+1	; 0x01
    283c:	9d 01       	movw	r18, r26
    283e:	2f 5f       	subi	r18, 0xFF	; 255
    2840:	3f 4f       	sbci	r19, 0xFF	; 255
    2842:	31 83       	std	Z+1, r19	; 0x01
    2844:	20 83       	st	Z, r18
    2846:	8c 93       	st	X, r24
    2848:	26 81       	ldd	r18, Z+6	; 0x06
    284a:	37 81       	ldd	r19, Z+7	; 0x07
    284c:	2f 5f       	subi	r18, 0xFF	; 255
    284e:	3f 4f       	sbci	r19, 0xFF	; 255
    2850:	37 83       	std	Z+7, r19	; 0x07
    2852:	26 83       	std	Z+6, r18	; 0x06
    2854:	14 c0       	rjmp	.+40     	; 0x287e <fputc+0x6e>
    2856:	8b 01       	movw	r16, r22
    2858:	ec 01       	movw	r28, r24
    285a:	fb 01       	movw	r30, r22
    285c:	00 84       	ldd	r0, Z+8	; 0x08
    285e:	f1 85       	ldd	r31, Z+9	; 0x09
    2860:	e0 2d       	mov	r30, r0
    2862:	09 95       	icall
    2864:	89 2b       	or	r24, r25
    2866:	e1 f6       	brne	.-72     	; 0x2820 <fputc+0x10>
    2868:	d8 01       	movw	r26, r16
    286a:	16 96       	adiw	r26, 0x06	; 6
    286c:	8d 91       	ld	r24, X+
    286e:	9c 91       	ld	r25, X
    2870:	17 97       	sbiw	r26, 0x07	; 7
    2872:	01 96       	adiw	r24, 0x01	; 1
    2874:	17 96       	adiw	r26, 0x07	; 7
    2876:	9c 93       	st	X, r25
    2878:	8e 93       	st	-X, r24
    287a:	16 97       	sbiw	r26, 0x06	; 6
    287c:	ce 01       	movw	r24, r28
    287e:	df 91       	pop	r29
    2880:	cf 91       	pop	r28
    2882:	1f 91       	pop	r17
    2884:	0f 91       	pop	r16
    2886:	08 95       	ret

00002888 <__ultoa_invert>:
    2888:	fa 01       	movw	r30, r20
    288a:	aa 27       	eor	r26, r26
    288c:	28 30       	cpi	r18, 0x08	; 8
    288e:	51 f1       	breq	.+84     	; 0x28e4 <__ultoa_invert+0x5c>
    2890:	20 31       	cpi	r18, 0x10	; 16
    2892:	81 f1       	breq	.+96     	; 0x28f4 <__ultoa_invert+0x6c>
    2894:	e8 94       	clt
    2896:	6f 93       	push	r22
    2898:	6e 7f       	andi	r22, 0xFE	; 254
    289a:	6e 5f       	subi	r22, 0xFE	; 254
    289c:	7f 4f       	sbci	r23, 0xFF	; 255
    289e:	8f 4f       	sbci	r24, 0xFF	; 255
    28a0:	9f 4f       	sbci	r25, 0xFF	; 255
    28a2:	af 4f       	sbci	r26, 0xFF	; 255
    28a4:	b1 e0       	ldi	r27, 0x01	; 1
    28a6:	3e d0       	rcall	.+124    	; 0x2924 <__ultoa_invert+0x9c>
    28a8:	b4 e0       	ldi	r27, 0x04	; 4
    28aa:	3c d0       	rcall	.+120    	; 0x2924 <__ultoa_invert+0x9c>
    28ac:	67 0f       	add	r22, r23
    28ae:	78 1f       	adc	r23, r24
    28b0:	89 1f       	adc	r24, r25
    28b2:	9a 1f       	adc	r25, r26
    28b4:	a1 1d       	adc	r26, r1
    28b6:	68 0f       	add	r22, r24
    28b8:	79 1f       	adc	r23, r25
    28ba:	8a 1f       	adc	r24, r26
    28bc:	91 1d       	adc	r25, r1
    28be:	a1 1d       	adc	r26, r1
    28c0:	6a 0f       	add	r22, r26
    28c2:	71 1d       	adc	r23, r1
    28c4:	81 1d       	adc	r24, r1
    28c6:	91 1d       	adc	r25, r1
    28c8:	a1 1d       	adc	r26, r1
    28ca:	20 d0       	rcall	.+64     	; 0x290c <__ultoa_invert+0x84>
    28cc:	09 f4       	brne	.+2      	; 0x28d0 <__ultoa_invert+0x48>
    28ce:	68 94       	set
    28d0:	3f 91       	pop	r19
    28d2:	2a e0       	ldi	r18, 0x0A	; 10
    28d4:	26 9f       	mul	r18, r22
    28d6:	11 24       	eor	r1, r1
    28d8:	30 19       	sub	r19, r0
    28da:	30 5d       	subi	r19, 0xD0	; 208
    28dc:	31 93       	st	Z+, r19
    28de:	de f6       	brtc	.-74     	; 0x2896 <__ultoa_invert+0xe>
    28e0:	cf 01       	movw	r24, r30
    28e2:	08 95       	ret
    28e4:	46 2f       	mov	r20, r22
    28e6:	47 70       	andi	r20, 0x07	; 7
    28e8:	40 5d       	subi	r20, 0xD0	; 208
    28ea:	41 93       	st	Z+, r20
    28ec:	b3 e0       	ldi	r27, 0x03	; 3
    28ee:	0f d0       	rcall	.+30     	; 0x290e <__ultoa_invert+0x86>
    28f0:	c9 f7       	brne	.-14     	; 0x28e4 <__ultoa_invert+0x5c>
    28f2:	f6 cf       	rjmp	.-20     	; 0x28e0 <__ultoa_invert+0x58>
    28f4:	46 2f       	mov	r20, r22
    28f6:	4f 70       	andi	r20, 0x0F	; 15
    28f8:	40 5d       	subi	r20, 0xD0	; 208
    28fa:	4a 33       	cpi	r20, 0x3A	; 58
    28fc:	18 f0       	brcs	.+6      	; 0x2904 <__ultoa_invert+0x7c>
    28fe:	49 5d       	subi	r20, 0xD9	; 217
    2900:	31 fd       	sbrc	r19, 1
    2902:	40 52       	subi	r20, 0x20	; 32
    2904:	41 93       	st	Z+, r20
    2906:	02 d0       	rcall	.+4      	; 0x290c <__ultoa_invert+0x84>
    2908:	a9 f7       	brne	.-22     	; 0x28f4 <__ultoa_invert+0x6c>
    290a:	ea cf       	rjmp	.-44     	; 0x28e0 <__ultoa_invert+0x58>
    290c:	b4 e0       	ldi	r27, 0x04	; 4
    290e:	a6 95       	lsr	r26
    2910:	97 95       	ror	r25
    2912:	87 95       	ror	r24
    2914:	77 95       	ror	r23
    2916:	67 95       	ror	r22
    2918:	ba 95       	dec	r27
    291a:	c9 f7       	brne	.-14     	; 0x290e <__ultoa_invert+0x86>
    291c:	00 97       	sbiw	r24, 0x00	; 0
    291e:	61 05       	cpc	r22, r1
    2920:	71 05       	cpc	r23, r1
    2922:	08 95       	ret
    2924:	9b 01       	movw	r18, r22
    2926:	ac 01       	movw	r20, r24
    2928:	0a 2e       	mov	r0, r26
    292a:	06 94       	lsr	r0
    292c:	57 95       	ror	r21
    292e:	47 95       	ror	r20
    2930:	37 95       	ror	r19
    2932:	27 95       	ror	r18
    2934:	ba 95       	dec	r27
    2936:	c9 f7       	brne	.-14     	; 0x292a <__ultoa_invert+0xa2>
    2938:	62 0f       	add	r22, r18
    293a:	73 1f       	adc	r23, r19
    293c:	84 1f       	adc	r24, r20
    293e:	95 1f       	adc	r25, r21
    2940:	a0 1d       	adc	r26, r0
    2942:	08 95       	ret

00002944 <__muluhisi3>:
    2944:	0e 94 56 12 	call	0x24ac	; 0x24ac <__umulhisi3>
    2948:	a5 9f       	mul	r26, r21
    294a:	90 0d       	add	r25, r0
    294c:	b4 9f       	mul	r27, r20
    294e:	90 0d       	add	r25, r0
    2950:	a4 9f       	mul	r26, r20
    2952:	80 0d       	add	r24, r0
    2954:	91 1d       	adc	r25, r1
    2956:	11 24       	eor	r1, r1
    2958:	08 95       	ret

0000295a <__mulshisi3>:
    295a:	b7 ff       	sbrs	r27, 7
    295c:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__muluhisi3>

00002960 <__mulohisi3>:
    2960:	0e 94 a2 14 	call	0x2944	; 0x2944 <__muluhisi3>
    2964:	82 1b       	sub	r24, r18
    2966:	93 0b       	sbc	r25, r19
    2968:	08 95       	ret

0000296a <_exit>:
    296a:	f8 94       	cli

0000296c <__stop_program>:
    296c:	ff cf       	rjmp	.-2      	; 0x296c <__stop_program>
